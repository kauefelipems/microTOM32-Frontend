
UTOM_V32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a648  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000136c8  0800a7e0  0800a7e0  0001a7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dea8  0801dea8  000300dc  2**0
                  CONTENTS
  4 .ARM          00000000  0801dea8  0801dea8  000300dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801dea8  0801dea8  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dea8  0801dea8  0002dea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801deac  0801deac  0002deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0801deb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300dc  2**0
                  CONTENTS
 10 .bss          000092c8  200000dc  200000dc  000300dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200093a4  200093a4  000300dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018da5  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003320  00000000  00000000  00048eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0004c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  0004d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d65  00000000  00000000  0004e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a63  00000000  00000000  0007260d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd753  00000000  00000000  0008c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  001697c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005860  00000000  00000000  00169884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a9c  00000000  00000000  0016f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000dc 	.word	0x200000dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a7c8 	.word	0x0800a7c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000e0 	.word	0x200000e0
 80001d4:	0800a7c8 	.word	0x0800a7c8

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_dmul>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800029e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002a6:	bf1d      	ittte	ne
 80002a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002ac:	ea94 0f0c 	teqne	r4, ip
 80002b0:	ea95 0f0c 	teqne	r5, ip
 80002b4:	f000 f8de 	bleq	8000474 <__aeabi_dmul+0x1dc>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea81 0603 	eor.w	r6, r1, r3
 80002be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002ca:	bf18      	it	ne
 80002cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d8:	d038      	beq.n	800034c <__aeabi_dmul+0xb4>
 80002da:	fba0 ce02 	umull	ip, lr, r0, r2
 80002de:	f04f 0500 	mov.w	r5, #0
 80002e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ee:	f04f 0600 	mov.w	r6, #0
 80002f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002f6:	f09c 0f00 	teq	ip, #0
 80002fa:	bf18      	it	ne
 80002fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000300:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000304:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000308:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800030c:	d204      	bcs.n	8000318 <__aeabi_dmul+0x80>
 800030e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000312:	416d      	adcs	r5, r5
 8000314:	eb46 0606 	adc.w	r6, r6, r6
 8000318:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800031c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000320:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000324:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000328:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800032c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000330:	bf88      	it	hi
 8000332:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000336:	d81e      	bhi.n	8000376 <__aeabi_dmul+0xde>
 8000338:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000350:	ea46 0101 	orr.w	r1, r6, r1
 8000354:	ea40 0002 	orr.w	r0, r0, r2
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000360:	bfc2      	ittt	gt
 8000362:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000366:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800036a:	bd70      	popgt	{r4, r5, r6, pc}
 800036c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000370:	f04f 0e00 	mov.w	lr, #0
 8000374:	3c01      	subs	r4, #1
 8000376:	f300 80ab 	bgt.w	80004d0 <__aeabi_dmul+0x238>
 800037a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800037e:	bfde      	ittt	le
 8000380:	2000      	movle	r0, #0
 8000382:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd70      	pople	{r4, r5, r6, pc}
 8000388:	f1c4 0400 	rsb	r4, r4, #0
 800038c:	3c20      	subs	r4, #32
 800038e:	da35      	bge.n	80003fc <__aeabi_dmul+0x164>
 8000390:	340c      	adds	r4, #12
 8000392:	dc1b      	bgt.n	80003cc <__aeabi_dmul+0x134>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0520 	rsb	r5, r4, #32
 800039c:	fa00 f305 	lsl.w	r3, r0, r5
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea40 0002 	orr.w	r0, r0, r2
 80003ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b8:	fa21 f604 	lsr.w	r6, r1, r4
 80003bc:	eb42 0106 	adc.w	r1, r2, r6
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f1c4 040c 	rsb	r4, r4, #12
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f304 	lsl.w	r3, r0, r4
 80003d8:	fa20 f005 	lsr.w	r0, r0, r5
 80003dc:	fa01 f204 	lsl.w	r2, r1, r4
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f1c4 0520 	rsb	r5, r4, #32
 8000400:	fa00 f205 	lsl.w	r2, r0, r5
 8000404:	ea4e 0e02 	orr.w	lr, lr, r2
 8000408:	fa20 f304 	lsr.w	r3, r0, r4
 800040c:	fa01 f205 	lsl.w	r2, r1, r5
 8000410:	ea43 0302 	orr.w	r3, r3, r2
 8000414:	fa21 f004 	lsr.w	r0, r1, r4
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	fa21 f204 	lsr.w	r2, r1, r4
 8000420:	ea20 0002 	bic.w	r0, r0, r2
 8000424:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f094 0f00 	teq	r4, #0
 8000438:	d10f      	bne.n	800045a <__aeabi_dmul+0x1c2>
 800043a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800043e:	0040      	lsls	r0, r0, #1
 8000440:	eb41 0101 	adc.w	r1, r1, r1
 8000444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000448:	bf08      	it	eq
 800044a:	3c01      	subeq	r4, #1
 800044c:	d0f7      	beq.n	800043e <__aeabi_dmul+0x1a6>
 800044e:	ea41 0106 	orr.w	r1, r1, r6
 8000452:	f095 0f00 	teq	r5, #0
 8000456:	bf18      	it	ne
 8000458:	4770      	bxne	lr
 800045a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	eb43 0303 	adc.w	r3, r3, r3
 8000464:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000468:	bf08      	it	eq
 800046a:	3d01      	subeq	r5, #1
 800046c:	d0f7      	beq.n	800045e <__aeabi_dmul+0x1c6>
 800046e:	ea43 0306 	orr.w	r3, r3, r6
 8000472:	4770      	bx	lr
 8000474:	ea94 0f0c 	teq	r4, ip
 8000478:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800047c:	bf18      	it	ne
 800047e:	ea95 0f0c 	teqne	r5, ip
 8000482:	d00c      	beq.n	800049e <__aeabi_dmul+0x206>
 8000484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000488:	bf18      	it	ne
 800048a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800048e:	d1d1      	bne.n	8000434 <__aeabi_dmul+0x19c>
 8000490:	ea81 0103 	eor.w	r1, r1, r3
 8000494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd70      	pop	{r4, r5, r6, pc}
 800049e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a2:	bf06      	itte	eq
 80004a4:	4610      	moveq	r0, r2
 80004a6:	4619      	moveq	r1, r3
 80004a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004ac:	d019      	beq.n	80004e2 <__aeabi_dmul+0x24a>
 80004ae:	ea94 0f0c 	teq	r4, ip
 80004b2:	d102      	bne.n	80004ba <__aeabi_dmul+0x222>
 80004b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b8:	d113      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004ba:	ea95 0f0c 	teq	r5, ip
 80004be:	d105      	bne.n	80004cc <__aeabi_dmul+0x234>
 80004c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004c4:	bf1c      	itt	ne
 80004c6:	4610      	movne	r0, r2
 80004c8:	4619      	movne	r1, r3
 80004ca:	d10a      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004cc:	ea81 0103 	eor.w	r1, r1, r3
 80004d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004ea:	bd70      	pop	{r4, r5, r6, pc}

080004ec <__aeabi_drsub>:
 80004ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e002      	b.n	80004f8 <__adddf3>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dsub>:
 80004f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f8 <__adddf3>:
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000502:	ea94 0f05 	teq	r4, r5
 8000506:	bf08      	it	eq
 8000508:	ea90 0f02 	teqeq	r0, r2
 800050c:	bf1f      	itttt	ne
 800050e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000512:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000516:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800051a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051e:	f000 80e2 	beq.w	80006e6 <__adddf3+0x1ee>
 8000522:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000526:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800052a:	bfb8      	it	lt
 800052c:	426d      	neglt	r5, r5
 800052e:	dd0c      	ble.n	800054a <__adddf3+0x52>
 8000530:	442c      	add	r4, r5
 8000532:	ea80 0202 	eor.w	r2, r0, r2
 8000536:	ea81 0303 	eor.w	r3, r1, r3
 800053a:	ea82 0000 	eor.w	r0, r2, r0
 800053e:	ea83 0101 	eor.w	r1, r3, r1
 8000542:	ea80 0202 	eor.w	r2, r0, r2
 8000546:	ea81 0303 	eor.w	r3, r1, r3
 800054a:	2d36      	cmp	r5, #54	; 0x36
 800054c:	bf88      	it	hi
 800054e:	bd30      	pophi	{r4, r5, pc}
 8000550:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000554:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000558:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800055c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000560:	d002      	beq.n	8000568 <__adddf3+0x70>
 8000562:	4240      	negs	r0, r0
 8000564:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000568:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800056c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000570:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x84>
 8000576:	4252      	negs	r2, r2
 8000578:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800057c:	ea94 0f05 	teq	r4, r5
 8000580:	f000 80a7 	beq.w	80006d2 <__adddf3+0x1da>
 8000584:	f1a4 0401 	sub.w	r4, r4, #1
 8000588:	f1d5 0e20 	rsbs	lr, r5, #32
 800058c:	db0d      	blt.n	80005aa <__adddf3+0xb2>
 800058e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000592:	fa22 f205 	lsr.w	r2, r2, r5
 8000596:	1880      	adds	r0, r0, r2
 8000598:	f141 0100 	adc.w	r1, r1, #0
 800059c:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a0:	1880      	adds	r0, r0, r2
 80005a2:	fa43 f305 	asr.w	r3, r3, r5
 80005a6:	4159      	adcs	r1, r3
 80005a8:	e00e      	b.n	80005c8 <__adddf3+0xd0>
 80005aa:	f1a5 0520 	sub.w	r5, r5, #32
 80005ae:	f10e 0e20 	add.w	lr, lr, #32
 80005b2:	2a01      	cmp	r2, #1
 80005b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b8:	bf28      	it	cs
 80005ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005be:	fa43 f305 	asr.w	r3, r3, r5
 80005c2:	18c0      	adds	r0, r0, r3
 80005c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	d507      	bpl.n	80005de <__adddf3+0xe6>
 80005ce:	f04f 0e00 	mov.w	lr, #0
 80005d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005da:	eb6e 0101 	sbc.w	r1, lr, r1
 80005de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005e2:	d31b      	bcc.n	800061c <__adddf3+0x124>
 80005e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e8:	d30c      	bcc.n	8000604 <__adddf3+0x10c>
 80005ea:	0849      	lsrs	r1, r1, #1
 80005ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f4:	f104 0401 	add.w	r4, r4, #1
 80005f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000600:	f080 809a 	bcs.w	8000738 <__adddf3+0x240>
 8000604:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	ea41 0105 	orr.w	r1, r1, r5
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000620:	4140      	adcs	r0, r0
 8000622:	eb41 0101 	adc.w	r1, r1, r1
 8000626:	3c01      	subs	r4, #1
 8000628:	bf28      	it	cs
 800062a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800062e:	d2e9      	bcs.n	8000604 <__adddf3+0x10c>
 8000630:	f091 0f00 	teq	r1, #0
 8000634:	bf04      	itt	eq
 8000636:	4601      	moveq	r1, r0
 8000638:	2000      	moveq	r0, #0
 800063a:	fab1 f381 	clz	r3, r1
 800063e:	bf08      	it	eq
 8000640:	3320      	addeq	r3, #32
 8000642:	f1a3 030b 	sub.w	r3, r3, #11
 8000646:	f1b3 0220 	subs.w	r2, r3, #32
 800064a:	da0c      	bge.n	8000666 <__adddf3+0x16e>
 800064c:	320c      	adds	r2, #12
 800064e:	dd08      	ble.n	8000662 <__adddf3+0x16a>
 8000650:	f102 0c14 	add.w	ip, r2, #20
 8000654:	f1c2 020c 	rsb	r2, r2, #12
 8000658:	fa01 f00c 	lsl.w	r0, r1, ip
 800065c:	fa21 f102 	lsr.w	r1, r1, r2
 8000660:	e00c      	b.n	800067c <__adddf3+0x184>
 8000662:	f102 0214 	add.w	r2, r2, #20
 8000666:	bfd8      	it	le
 8000668:	f1c2 0c20 	rsble	ip, r2, #32
 800066c:	fa01 f102 	lsl.w	r1, r1, r2
 8000670:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000674:	bfdc      	itt	le
 8000676:	ea41 010c 	orrle.w	r1, r1, ip
 800067a:	4090      	lslle	r0, r2
 800067c:	1ae4      	subs	r4, r4, r3
 800067e:	bfa2      	ittt	ge
 8000680:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000684:	4329      	orrge	r1, r5
 8000686:	bd30      	popge	{r4, r5, pc}
 8000688:	ea6f 0404 	mvn.w	r4, r4
 800068c:	3c1f      	subs	r4, #31
 800068e:	da1c      	bge.n	80006ca <__adddf3+0x1d2>
 8000690:	340c      	adds	r4, #12
 8000692:	dc0e      	bgt.n	80006b2 <__adddf3+0x1ba>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0220 	rsb	r2, r4, #32
 800069c:	fa20 f004 	lsr.w	r0, r0, r4
 80006a0:	fa01 f302 	lsl.w	r3, r1, r2
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	fa21 f304 	lsr.w	r3, r1, r4
 80006ac:	ea45 0103 	orr.w	r1, r5, r3
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	f1c4 040c 	rsb	r4, r4, #12
 80006b6:	f1c4 0220 	rsb	r2, r4, #32
 80006ba:	fa20 f002 	lsr.w	r0, r0, r2
 80006be:	fa01 f304 	lsl.w	r3, r1, r4
 80006c2:	ea40 0003 	orr.w	r0, r0, r3
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	fa21 f004 	lsr.w	r0, r1, r4
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f094 0f00 	teq	r4, #0
 80006d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006da:	bf06      	itte	eq
 80006dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e0:	3401      	addeq	r4, #1
 80006e2:	3d01      	subne	r5, #1
 80006e4:	e74e      	b.n	8000584 <__adddf3+0x8c>
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf18      	it	ne
 80006ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f0:	d029      	beq.n	8000746 <__adddf3+0x24e>
 80006f2:	ea94 0f05 	teq	r4, r5
 80006f6:	bf08      	it	eq
 80006f8:	ea90 0f02 	teqeq	r0, r2
 80006fc:	d005      	beq.n	800070a <__adddf3+0x212>
 80006fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000702:	bf04      	itt	eq
 8000704:	4619      	moveq	r1, r3
 8000706:	4610      	moveq	r0, r2
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea91 0f03 	teq	r1, r3
 800070e:	bf1e      	ittt	ne
 8000710:	2100      	movne	r1, #0
 8000712:	2000      	movne	r0, #0
 8000714:	bd30      	popne	{r4, r5, pc}
 8000716:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800071a:	d105      	bne.n	8000728 <__adddf3+0x230>
 800071c:	0040      	lsls	r0, r0, #1
 800071e:	4149      	adcs	r1, r1
 8000720:	bf28      	it	cs
 8000722:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd30      	pop	{r4, r5, pc}
 8000728:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800072c:	bf3c      	itt	cc
 800072e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000732:	bd30      	popcc	{r4, r5, pc}
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800074a:	bf1a      	itte	ne
 800074c:	4619      	movne	r1, r3
 800074e:	4610      	movne	r0, r2
 8000750:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000754:	bf1c      	itt	ne
 8000756:	460b      	movne	r3, r1
 8000758:	4602      	movne	r2, r0
 800075a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075e:	bf06      	itte	eq
 8000760:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000764:	ea91 0f03 	teqeq	r1, r3
 8000768:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	bf00      	nop

08000770 <__aeabi_ui2d>:
 8000770:	f090 0f00 	teq	r0, #0
 8000774:	bf04      	itt	eq
 8000776:	2100      	moveq	r1, #0
 8000778:	4770      	bxeq	lr
 800077a:	b530      	push	{r4, r5, lr}
 800077c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000780:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000784:	f04f 0500 	mov.w	r5, #0
 8000788:	f04f 0100 	mov.w	r1, #0
 800078c:	e750      	b.n	8000630 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_i2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a8:	bf48      	it	mi
 80007aa:	4240      	negmi	r0, r0
 80007ac:	f04f 0100 	mov.w	r1, #0
 80007b0:	e73e      	b.n	8000630 <__adddf3+0x138>
 80007b2:	bf00      	nop

080007b4 <__aeabi_f2d>:
 80007b4:	0042      	lsls	r2, r0, #1
 80007b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007c2:	bf1f      	itttt	ne
 80007c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d0:	4770      	bxne	lr
 80007d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007d6:	bf08      	it	eq
 80007d8:	4770      	bxeq	lr
 80007da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007de:	bf04      	itt	eq
 80007e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007e4:	4770      	bxeq	lr
 80007e6:	b530      	push	{r4, r5, lr}
 80007e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	e71c      	b.n	8000630 <__adddf3+0x138>
 80007f6:	bf00      	nop

080007f8 <__aeabi_ul2d>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	b530      	push	{r4, r5, lr}
 8000802:	f04f 0500 	mov.w	r5, #0
 8000806:	e00a      	b.n	800081e <__aeabi_l2d+0x16>

08000808 <__aeabi_l2d>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000816:	d502      	bpl.n	800081e <__aeabi_l2d+0x16>
 8000818:	4240      	negs	r0, r0
 800081a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000822:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000826:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800082a:	f43f aed8 	beq.w	80005de <__adddf3+0xe6>
 800082e:	f04f 0203 	mov.w	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	fa00 fc03 	lsl.w	ip, r0, r3
 800084e:	fa20 f002 	lsr.w	r0, r0, r2
 8000852:	fa01 fe03 	lsl.w	lr, r1, r3
 8000856:	ea40 000e 	orr.w	r0, r0, lr
 800085a:	fa21 f102 	lsr.w	r1, r1, r2
 800085e:	4414      	add	r4, r2
 8000860:	e6bd      	b.n	80005de <__adddf3+0xe6>
 8000862:	bf00      	nop

08000864 <__gedf2>:
 8000864:	f04f 3cff 	mov.w	ip, #4294967295
 8000868:	e006      	b.n	8000878 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__ledf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	e002      	b.n	8000878 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__cmpdf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	f84d cd04 	str.w	ip, [sp, #-4]!
 800087c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000884:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800088e:	d01b      	beq.n	80008c8 <__cmpdf2+0x54>
 8000890:	b001      	add	sp, #4
 8000892:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000896:	bf0c      	ite	eq
 8000898:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800089c:	ea91 0f03 	teqne	r1, r3
 80008a0:	bf02      	ittt	eq
 80008a2:	ea90 0f02 	teqeq	r0, r2
 80008a6:	2000      	moveq	r0, #0
 80008a8:	4770      	bxeq	lr
 80008aa:	f110 0f00 	cmn.w	r0, #0
 80008ae:	ea91 0f03 	teq	r1, r3
 80008b2:	bf58      	it	pl
 80008b4:	4299      	cmppl	r1, r3
 80008b6:	bf08      	it	eq
 80008b8:	4290      	cmpeq	r0, r2
 80008ba:	bf2c      	ite	cs
 80008bc:	17d8      	asrcs	r0, r3, #31
 80008be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008c2:	f040 0001 	orr.w	r0, r0, #1
 80008c6:	4770      	bx	lr
 80008c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d0:	d102      	bne.n	80008d8 <__cmpdf2+0x64>
 80008d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008d6:	d107      	bne.n	80008e8 <__cmpdf2+0x74>
 80008d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e0:	d1d6      	bne.n	8000890 <__cmpdf2+0x1c>
 80008e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008e6:	d0d3      	beq.n	8000890 <__cmpdf2+0x1c>
 80008e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <__aeabi_cdrcmple>:
 80008f0:	4684      	mov	ip, r0
 80008f2:	4610      	mov	r0, r2
 80008f4:	4662      	mov	r2, ip
 80008f6:	468c      	mov	ip, r1
 80008f8:	4619      	mov	r1, r3
 80008fa:	4663      	mov	r3, ip
 80008fc:	e000      	b.n	8000900 <__aeabi_cdcmpeq>
 80008fe:	bf00      	nop

08000900 <__aeabi_cdcmpeq>:
 8000900:	b501      	push	{r0, lr}
 8000902:	f7ff ffb7 	bl	8000874 <__cmpdf2>
 8000906:	2800      	cmp	r0, #0
 8000908:	bf48      	it	mi
 800090a:	f110 0f00 	cmnmi.w	r0, #0
 800090e:	bd01      	pop	{r0, pc}

08000910 <__aeabi_dcmpeq>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff fff4 	bl	8000900 <__aeabi_cdcmpeq>
 8000918:	bf0c      	ite	eq
 800091a:	2001      	moveq	r0, #1
 800091c:	2000      	movne	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmplt>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffea 	bl	8000900 <__aeabi_cdcmpeq>
 800092c:	bf34      	ite	cc
 800092e:	2001      	movcc	r0, #1
 8000930:	2000      	movcs	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmple>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffe0 	bl	8000900 <__aeabi_cdcmpeq>
 8000940:	bf94      	ite	ls
 8000942:	2001      	movls	r0, #1
 8000944:	2000      	movhi	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmpge>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffce 	bl	80008f0 <__aeabi_cdrcmple>
 8000954:	bf94      	ite	ls
 8000956:	2001      	movls	r0, #1
 8000958:	2000      	movhi	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmpgt>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffc4 	bl	80008f0 <__aeabi_cdrcmple>
 8000968:	bf34      	ite	cc
 800096a:	2001      	movcc	r0, #1
 800096c:	2000      	movcs	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f001 fbe1 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f8b5 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 fc73 	bl	800135c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a76:	f000 fc27 	bl	80012c8 <MX_DMA_Init>
  MX_RTC_Init();
 8000a7a:	f000 faa3 	bl	8000fc4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000a7e:	f000 fbf1 	bl	8001264 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8000a82:	f000 fa69 	bl	8000f58 <MX_DAC1_Init>
  MX_TIM8_Init();
 8000a86:	f000 fb5f 	bl	8001148 <MX_TIM8_Init>
  MX_ADC3_Init();
 8000a8a:	f000 f9f3 	bl	8000e74 <MX_ADC3_Init>
  MX_TIM3_Init();
 8000a8e:	f000 fabf 	bl	8001010 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000a92:	f000 f91d 	bl	8000cd0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a96:	f000 f98d 	bl	8000db4 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000a9a:	f000 fb07 	bl	80010ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  // Set State Machine Variables:
  States_TypeDef state = ENTRY_STATE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
  Actions_TypeDef action;
  State_FunctionsTypeDef state_func;

  //ADC Calibration Function
  if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_DIFFERENTIAL_ENDED) != HAL_OK)
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4841      	ldr	r0, [pc, #260]	; (8000bac <main+0x148>)
 8000aa6:	f001 ffb5 	bl	8002a14 <HAL_ADCEx_Calibration_Start>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <main+0x50>
	  Error_Handler();
 8000ab0:	f000 ffe6 	bl	8001a80 <Error_Handler>

  //GAIN_DAC Start and set value to 0.1 V
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_DB) != HAL_OK) ||
 8000ab4:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <main+0x14c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	483d      	ldr	r0, [pc, #244]	; (8000bb4 <main+0x150>)
 8000abe:	f002 ff12 	bl	80038e6 <HAL_DAC_SetValue>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d106      	bne.n	8000ad6 <main+0x72>
		  (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	483a      	ldr	r0, [pc, #232]	; (8000bb4 <main+0x150>)
 8000acc:	f002 ff30 	bl	8003930 <HAL_DAC_Start>
 8000ad0:	4603      	mov	r3, r0
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_DB) != HAL_OK) ||
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <main+0x76>
	  Error_Handler();
 8000ad6:	f000 ffd3 	bl	8001a80 <Error_Handler>
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_LIN) != HAL_OK) ||
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <main+0x154>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4834      	ldr	r0, [pc, #208]	; (8000bb4 <main+0x150>)
 8000ae4:	f002 feff 	bl	80038e6 <HAL_DAC_SetValue>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d106      	bne.n	8000afc <main+0x98>
		  (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK) != HAL_OK)
 8000aee:	2110      	movs	r1, #16
 8000af0:	4830      	ldr	r0, [pc, #192]	; (8000bb4 <main+0x150>)
 8000af2:	f002 ff1d 	bl	8003930 <HAL_DAC_Start>
 8000af6:	4603      	mov	r3, r0
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_LIN) != HAL_OK) ||
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <main+0x9c>
	  Error_Handler();
 8000afc:	f000 ffc0 	bl	8001a80 <Error_Handler>


  //Ring Buffer Initialization
	ring_buf_init(&ring_buffer_struct, uart_ring_buffer, RING_BUFFER_SIZE);
 8000b00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b04:	492d      	ldr	r1, [pc, #180]	; (8000bbc <main+0x158>)
 8000b06:	482e      	ldr	r0, [pc, #184]	; (8000bc0 <main+0x15c>)
 8000b08:	f000 ffbf 	bl	8001a8a <ring_buf_init>

  //Initialize Hann Window for FFT
	for(int i=0; i < ADC_BUFF_SIZE; i++){
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	e035      	b.n	8000b7e <main+0x11a>
		hann_multiplier[i] = 0.5 * (1 - cos(2*PI*i/2047));
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000bc4 <main+0x160>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000bc8 <main+0x164>
 8000b28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000b2c:	ee16 0a90 	vmov	r0, s13
 8000b30:	f7ff fe40 	bl	80007b4 <__aeabi_f2d>
 8000b34:	4602      	mov	r2, r0
 8000b36:	460b      	mov	r3, r1
 8000b38:	ec43 2b10 	vmov	d0, r2, r3
 8000b3c:	f008 fdd4 	bl	80096e8 <cos>
 8000b40:	ec53 2b10 	vmov	r2, r3, d0
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4920      	ldr	r1, [pc, #128]	; (8000bcc <main+0x168>)
 8000b4a:	f7ff fcd3 	bl	80004f4 <__aeabi_dsub>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	4610      	mov	r0, r2
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <main+0x16c>)
 8000b5c:	f7ff fb9c 	bl	8000298 <__aeabi_dmul>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	4610      	mov	r0, r2
 8000b66:	4619      	mov	r1, r3
 8000b68:	f7ff ff2c 	bl	80009c4 <__aeabi_d2f>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4919      	ldr	r1, [pc, #100]	; (8000bd4 <main+0x170>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	601a      	str	r2, [r3, #0]
	for(int i=0; i < ADC_BUFF_SIZE; i++){
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b84:	dbc5      	blt.n	8000b12 <main+0xae>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	state_func = state_func_ptr[state];
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <main+0x174>)
 8000b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8e:	607b      	str	r3, [r7, #4]
	action = state_func();
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4798      	blx	r3
 8000b94:	4603      	mov	r3, r0
 8000b96:	70fb      	strb	r3, [r7, #3]
	state = ST_nextstate(state, action);
 8000b98:	78fa      	ldrb	r2, [r7, #3]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 ff9a 	bl	8001ad8 <ST_nextstate>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73fb      	strb	r3, [r7, #15]
	state_func = state_func_ptr[state];
 8000ba8:	e7ed      	b.n	8000b86 <main+0x122>
 8000baa:	bf00      	nop
 8000bac:	20000198 	.word	0x20000198
 8000bb0:	20000060 	.word	0x20000060
 8000bb4:	200002b4 	.word	0x200002b4
 8000bb8:	20000064 	.word	0x20000064
 8000bbc:	20001484 	.word	0x20001484
 8000bc0:	20002424 	.word	0x20002424
 8000bc4:	40c90fdb 	.word	0x40c90fdb
 8000bc8:	44ffe000 	.word	0x44ffe000
 8000bcc:	3ff00000 	.word	0x3ff00000
 8000bd0:	3fe00000 	.word	0x3fe00000
 8000bd4:	2000745c 	.word	0x2000745c
 8000bd8:	20000000 	.word	0x20000000

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0a6      	sub	sp, #152	; 0x98
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 fd72 	bl	80096d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2258      	movs	r2, #88	; 0x58
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 fd64 	bl	80096d4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c0c:	f003 fafa 	bl	8004204 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <SystemClock_Config+0xec>)
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	4a2c      	ldr	r2, [pc, #176]	; (8000cc8 <SystemClock_Config+0xec>)
 8000c16:	f023 0318 	bic.w	r3, r3, #24
 8000c1a:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c24:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c3c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fae8 	bl	8004224 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c5a:	f000 ff11 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2302      	movs	r3, #2
 8000c64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 fb26 	bl	80052cc <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c86:	f000 fefb 	bl	8001a80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_RTC
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <SystemClock_Config+0xf0>)
 8000c8c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8000c8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c92:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fd2b 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000cbc:	f000 fee0 	bl	8001a80 <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3798      	adds	r7, #152	; 0x98
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	00212184 	.word	0x00212184

08000cd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000cf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d50:	4817      	ldr	r0, [pc, #92]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d52:	f001 fae7 	bl	8002324 <HAL_ADC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d5c:	f000 fe90 	bl	8001a80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4811      	ldr	r0, [pc, #68]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d6c:	f002 f9b0 	bl	80030d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000d76:	f000 fe83 	bl	8001a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000d86:	2304      	movs	r3, #4
 8000d88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_ADC1_Init+0xe0>)
 8000d98:	f001 feae 	bl	8002af8 <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000da2:	f000 fe6d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000f8 	.word	0x200000f8

08000db4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <MX_ADC2_Init+0xbc>)
 8000dce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e16:	2204      	movs	r2, #4
 8000e18:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e26:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e28:	f001 fa7c 	bl	8002324 <HAL_ADC_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC2_Init+0x82>
  {
    Error_Handler();
 8000e32:	f000 fe25 	bl	8001a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e36:	2309      	movs	r3, #9
 8000e38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000e42:	2304      	movs	r3, #4
 8000e44:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <MX_ADC2_Init+0xb8>)
 8000e54:	f001 fe50 	bl	8002af8 <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 8000e5e:	f000 fe0f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000148 	.word	0x20000148
 8000e70:	50000100 	.word	0x50000100

08000e74 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000e98:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <MX_ADC3_Init+0xe0>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ef2:	4817      	ldr	r0, [pc, #92]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000ef4:	f001 fa16 	bl	8002324 <HAL_ADC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000efe:	f000 fdbf 	bl	8001a80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4810      	ldr	r0, [pc, #64]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000f0e:	f002 f8df 	bl	80030d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 8000f18:	f000 fdb2 	bl	8001a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f1c:	2309      	movs	r3, #9
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_ADC3_Init+0xdc>)
 8000f3a:	f001 fddd 	bl	8002af8 <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000f44:	f000 fd9c 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000198 	.word	0x20000198
 8000f54:	50000400 	.word	0x50000400

08000f58 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_DAC1_Init+0x64>)
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_DAC1_Init+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_DAC1_Init+0x64>)
 8000f70:	f002 fc97 	bl	80038a2 <HAL_DAC_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000f7a:	f000 fd81 	bl	8001a80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000f7e:	233c      	movs	r3, #60	; 0x3c
 8000f80:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <MX_DAC1_Init+0x64>)
 8000f8e:	f002 fd1a 	bl	80039c6 <HAL_DAC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000f98:	f000 fd72 	bl	8001a80 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_DAC1_Init+0x64>)
 8000fa4:	f002 fd0f 	bl	80039c6 <HAL_DAC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
 8000fae:	f000 fd67 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200002b4 	.word	0x200002b4
 8000fc0:	40007400 	.word	0x40007400

08000fc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_RTC_Init+0x44>)
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <MX_RTC_Init+0x48>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_RTC_Init+0x44>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_RTC_Init+0x44>)
 8000fd6:	227f      	movs	r2, #127	; 0x7f
 8000fd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_RTC_Init+0x44>)
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_RTC_Init+0x44>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_RTC_Init+0x44>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_RTC_Init+0x44>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_RTC_Init+0x44>)
 8000ff4:	f004 fda8 	bl	8005b48 <HAL_RTC_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ffe:	f000 fd3f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002c8 	.word	0x200002c8
 800100c:	40002800 	.word	0x40002800

08001010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_TIM3_Init+0x94>)
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <MX_TIM3_Init+0x98>)
 8001032:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_TIM3_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_TIM3_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_TIM3_Init+0x94>)
 8001042:	2223      	movs	r2, #35	; 0x23
 8001044:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_TIM3_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_TIM3_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001052:	4814      	ldr	r0, [pc, #80]	; (80010a4 <MX_TIM3_Init+0x94>)
 8001054:	f004 fe7e 	bl	8005d54 <HAL_TIM_Base_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800105e:	f000 fd0f 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001066:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_TIM3_Init+0x94>)
 8001070:	f005 fa6a 	bl	8006548 <HAL_TIM_ConfigClockSource>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 fd01 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800107e:	2320      	movs	r3, #32
 8001080:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_TIM3_Init+0x94>)
 800108c:	f005 ff96 	bl	8006fbc <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001096:	f000 fcf3 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002e8 	.word	0x200002e8
 80010a8:	40000400 	.word	0x40000400

080010ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM4_Init+0x94>)
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <MX_TIM4_Init+0x98>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM4_Init+0x94>)
 80010d2:	2247      	movs	r2, #71	; 0x47
 80010d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM4_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM4_Init+0x94>)
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_TIM4_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM4_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <MX_TIM4_Init+0x94>)
 80010f2:	f004 fe2f 	bl	8005d54 <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010fc:	f000 fcc0 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM4_Init+0x94>)
 800110e:	f005 fa1b 	bl	8006548 <HAL_TIM_ConfigClockSource>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 fcb2 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM4_Init+0x94>)
 800112a:	f005 ff47 	bl	8006fbc <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 fca4 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000334 	.word	0x20000334
 8001144:	40000800 	.word	0x40000800

08001148 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	; 0x58
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	222c      	movs	r2, #44	; 0x2c
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f008 faad 	bl	80096d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <MX_TIM8_Init+0x114>)
 800117c:	4a38      	ldr	r2, [pc, #224]	; (8001260 <MX_TIM8_Init+0x118>)
 800117e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 99;
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <MX_TIM8_Init+0x114>)
 8001182:	2263      	movs	r2, #99	; 0x63
 8001184:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b35      	ldr	r3, [pc, #212]	; (800125c <MX_TIM8_Init+0x114>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 71;
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <MX_TIM8_Init+0x114>)
 800118e:	2247      	movs	r2, #71	; 0x47
 8001190:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b32      	ldr	r3, [pc, #200]	; (800125c <MX_TIM8_Init+0x114>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <MX_TIM8_Init+0x114>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <MX_TIM8_Init+0x114>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011a4:	482d      	ldr	r0, [pc, #180]	; (800125c <MX_TIM8_Init+0x114>)
 80011a6:	f004 febc 	bl	8005f22 <HAL_TIM_PWM_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80011b0:	f000 fc66 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011c4:	4619      	mov	r1, r3
 80011c6:	4825      	ldr	r0, [pc, #148]	; (800125c <MX_TIM8_Init+0x114>)
 80011c8:	f005 fef8 	bl	8006fbc <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80011d2:	f000 fc55 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 35;
 80011da:	2323      	movs	r3, #35	; 0x23
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80011e6:	2304      	movs	r3, #4
 80011e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f6:	2204      	movs	r2, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4818      	ldr	r0, [pc, #96]	; (800125c <MX_TIM8_Init+0x114>)
 80011fc:	f005 f890 	bl	8006320 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001206:	f000 fc3b 	bl	8001a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM8_Init+0x114>)
 8001240:	f005 ff48 	bl	80070d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800124a:	f000 fc19 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM8_Init+0x114>)
 8001250:	f000 fe74 	bl	8001f3c <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3758      	adds	r7, #88	; 0x58
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000380 	.word	0x20000380
 8001260:	40013400 	.word	0x40013400

08001264 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <MX_USART3_UART_Init+0x60>)
 800126c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 8001286:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800128a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_USART3_UART_Init+0x5c>)
 80012ac:	f005 ff98 	bl	80071e0 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80012b6:	f000 fbe3 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003cc 	.word	0x200003cc
 80012c4:	40004800 	.word	0x40004800

080012c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <MX_DMA_Init+0x90>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <MX_DMA_Init+0x90>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_DMA_Init+0x90>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_DMA_Init+0x90>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <MX_DMA_Init+0x90>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6153      	str	r3, [r2, #20]
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_DMA_Init+0x90>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	200b      	movs	r0, #11
 8001304:	f002 fa97 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001308:	200b      	movs	r0, #11
 800130a:	f002 fab0 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	200c      	movs	r0, #12
 8001314:	f002 fa8f 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001318:	200c      	movs	r0, #12
 800131a:	f002 faa8 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	200d      	movs	r0, #13
 8001324:	f002 fa87 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001328:	200d      	movs	r0, #13
 800132a:	f002 faa0 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2038      	movs	r0, #56	; 0x38
 8001334:	f002 fa7f 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001338:	2038      	movs	r0, #56	; 0x38
 800133a:	f002 fa98 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	203c      	movs	r0, #60	; 0x3c
 8001344:	f002 fa77 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001348:	203c      	movs	r0, #60	; 0x3c
 800134a:	f002 fa90 	bl	800386e <HAL_NVIC_EnableIRQ>

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b64      	ldr	r3, [pc, #400]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	4a63      	ldr	r2, [pc, #396]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800137c:	6153      	str	r3, [r2, #20]
 800137e:	4b61      	ldr	r3, [pc, #388]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138a:	4b5e      	ldr	r3, [pc, #376]	; (8001504 <MX_GPIO_Init+0x1a8>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a5d      	ldr	r2, [pc, #372]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001394:	6153      	str	r3, [r2, #20]
 8001396:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b58      	ldr	r3, [pc, #352]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4a57      	ldr	r2, [pc, #348]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6153      	str	r3, [r2, #20]
 80013ae:	4b55      	ldr	r3, [pc, #340]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b52      	ldr	r3, [pc, #328]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a51      	ldr	r2, [pc, #324]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6153      	str	r3, [r2, #20]
 80013c6:	4b4f      	ldr	r3, [pc, #316]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a4b      	ldr	r2, [pc, #300]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b49      	ldr	r3, [pc, #292]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ea:	4b46      	ldr	r3, [pc, #280]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a45      	ldr	r2, [pc, #276]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013f4:	6153      	str	r3, [r2, #20]
 80013f6:	4b43      	ldr	r3, [pc, #268]	; (8001504 <MX_GPIO_Init+0x1a8>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800140c:	6153      	str	r3, [r2, #20]
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <MX_GPIO_Init+0x1a8>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_A0_GPIO_Port, MUX_A0_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f002 fed7 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_A1_Pin|MUX_A4_Pin|MUX_A3_Pin|LD3_Pin
 8001426:	2200      	movs	r2, #0
 8001428:	f644 4181 	movw	r1, #19585	; 0x4c81
 800142c:	4836      	ldr	r0, [pc, #216]	; (8001508 <MX_GPIO_Init+0x1ac>)
 800142e:	f002 fed1 	bl	80041d4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MUX_CS4_Pin|MUX_CS3_Pin|MUX_CS2_Pin|MUX_CS1_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8001438:	4834      	ldr	r0, [pc, #208]	; (800150c <MX_GPIO_Init+0x1b0>)
 800143a:	f002 fecb 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	4833      	ldr	r0, [pc, #204]	; (8001510 <MX_GPIO_Init+0x1b4>)
 8001444:	f002 fec6 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_A2_GPIO_Port, MUX_A2_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2101      	movs	r1, #1
 800144c:	482f      	ldr	r0, [pc, #188]	; (800150c <MX_GPIO_Init+0x1b0>)
 800144e:	f002 fec1 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001458:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <MX_GPIO_Init+0x1b8>)
 800146a:	f002 fd29 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_A0_Pin */
  GPIO_InitStruct.Pin = MUX_A0_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MUX_A0_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f002 fd1a 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_A1_Pin MUX_A4_Pin MUX_A3_Pin LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = MUX_A1_Pin|MUX_A4_Pin|MUX_A3_Pin|LD3_Pin
 800148c:	f644 4381 	movw	r3, #19585	; 0x4c81
 8001490:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <MX_GPIO_Init+0x1ac>)
 80014a6:	f002 fd0b 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_CS4_Pin MUX_CS3_Pin MUX_CS2_Pin MUX_CS1_Pin
                           MUX_A2_Pin */
  GPIO_InitStruct.Pin = MUX_CS4_Pin|MUX_CS3_Pin|MUX_CS2_Pin|MUX_CS1_Pin
 80014aa:	f24d 4301 	movw	r3, #54273	; 0xd401
 80014ae:	61fb      	str	r3, [r7, #28]
                          |MUX_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <MX_GPIO_Init+0x1b0>)
 80014c4:	f002 fcfc 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014c8:	2340      	movs	r3, #64	; 0x40
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <MX_GPIO_Init+0x1b4>)
 80014e0:	f002 fcee 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_GPIO_Init+0x1b4>)
 80014f8:	f002 fce2 	bl	8003ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	48000400 	.word	0x48000400
 800150c:	48001000 	.word	0x48001000
 8001510:	48001800 	.word	0x48001800
 8001514:	48000800 	.word	0x48000800

08001518 <comm_wait_state>:
/* State Functions BEGIN-----------------------------------------------------------------*/
/**
  * @brief Wait for Serial Command from the Interface
  * @retval Next Action: go_g, go_ch, go_meas, repeat, fail
  */
Actions_TypeDef comm_wait_state(void){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef uart_state = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]

	if (uart_cplt_lck == HAL_UNLOCKED){	//DMA complete transfer
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <comm_wait_state+0xa8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d138      	bne.n	800159c <comm_wait_state+0x84>

		uart_cplt_lck = HAL_LOCKED;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <comm_wait_state+0xa8>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]

		switch (comm[0]){
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <comm_wait_state+0xac>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3b45      	subs	r3, #69	; 0x45
 8001536:	2b0e      	cmp	r3, #14
 8001538:	d82e      	bhi.n	8001598 <comm_wait_state+0x80>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <comm_wait_state+0x28>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	0800158d 	.word	0x0800158d
 8001544:	08001589 	.word	0x08001589
 8001548:	0800157d 	.word	0x0800157d
 800154c:	08001599 	.word	0x08001599
 8001550:	08001599 	.word	0x08001599
 8001554:	08001599 	.word	0x08001599
 8001558:	08001599 	.word	0x08001599
 800155c:	08001599 	.word	0x08001599
 8001560:	08001585 	.word	0x08001585
 8001564:	08001595 	.word	0x08001595
 8001568:	08001599 	.word	0x08001599
 800156c:	08001591 	.word	0x08001591
 8001570:	08001599 	.word	0x08001599
 8001574:	08001599 	.word	0x08001599
 8001578:	08001581 	.word	0x08001581
			case 'G': return go_g;
 800157c:	2300      	movs	r3, #0
 800157e:	e01a      	b.n	80015b6 <comm_wait_state+0x9e>
			case 'S': return go_ch;
 8001580:	2301      	movs	r3, #1
 8001582:	e018      	b.n	80015b6 <comm_wait_state+0x9e>
			case 'M': return go_meas;
 8001584:	2302      	movs	r3, #2
 8001586:	e016      	b.n	80015b6 <comm_wait_state+0x9e>
			case 'F': return go_FFT;
 8001588:	2306      	movs	r3, #6
 800158a:	e014      	b.n	80015b6 <comm_wait_state+0x9e>
			case 'E': return go_ex;
 800158c:	2307      	movs	r3, #7
 800158e:	e012      	b.n	80015b6 <comm_wait_state+0x9e>
			case 'P': return go_ip;
 8001590:	2308      	movs	r3, #8
 8001592:	e010      	b.n	80015b6 <comm_wait_state+0x9e>
			case 'N': return go_in;
 8001594:	2309      	movs	r3, #9
 8001596:	e00e      	b.n	80015b6 <comm_wait_state+0x9e>
			default: return repeat;
 8001598:	2304      	movs	r3, #4
 800159a:	e00c      	b.n	80015b6 <comm_wait_state+0x9e>
		}
	}

	else {

		uart_state = HAL_UART_Receive_DMA(&huart3, comm, COMM_BUFF_SIZE); //Start receiving
 800159c:	2205      	movs	r2, #5
 800159e:	4909      	ldr	r1, [pc, #36]	; (80015c4 <comm_wait_state+0xac>)
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <comm_wait_state+0xb0>)
 80015a2:	f005 fee7 	bl	8007374 <HAL_UART_Receive_DMA>
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]

		if((uart_state == HAL_ERROR)){		//If UART ERROR
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <comm_wait_state+0x9c>
				Error_Handler();
 80015b0:	f000 fa66 	bl	8001a80 <Error_Handler>
		}

		return repeat;
 80015b4:	2304      	movs	r3, #4
	}
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000024 	.word	0x20000024
 80015c4:	200004dc 	.word	0x200004dc
 80015c8:	200003cc 	.word	0x200003cc

080015cc <g_sel_state>:

/**
  * @brief Change Gain of the PGA
  * @retval Next Action: OK, repeat, fail
  */
Actions_TypeDef g_sel_state(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

	dac_DB = __DAC1_VOLTAGE2BIT(comm[1]);
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <g_sel_state+0x98>)
 80015d2:	785b      	ldrb	r3, [r3, #1]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4613      	mov	r3, r2
 80015d8:	031b      	lsls	r3, r3, #12
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <g_sel_state+0x9c>)
 80015de:	fb82 1203 	smull	r1, r2, r2, r3
 80015e2:	441a      	add	r2, r3
 80015e4:	1252      	asrs	r2, r2, #9
 80015e6:	17db      	asrs	r3, r3, #31
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <g_sel_state+0xa0>)
 80015ee:	601a      	str	r2, [r3, #0]
	dac_LIN = __DAC2_VOLTAGE2BIT(comm[2]);
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <g_sel_state+0x98>)
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4613      	mov	r3, r2
 80015f8:	031b      	lsls	r3, r3, #12
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <g_sel_state+0xa4>)
 80015fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001602:	441a      	add	r2, r3
 8001604:	11d2      	asrs	r2, r2, #7
 8001606:	17db      	asrs	r3, r3, #31
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	461a      	mov	r2, r3
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <g_sel_state+0xa8>)
 800160e:	601a      	str	r2, [r3, #0]

	//Set DAC to the desired GAIN value
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_DB) != HAL_OK) ||
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <g_sel_state+0xa0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	4817      	ldr	r0, [pc, #92]	; (8001678 <g_sel_state+0xac>)
 800161a:	f002 f964 	bl	80038e6 <HAL_DAC_SetValue>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <g_sel_state+0x66>
		  (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) != HAL_OK)
 8001624:	2100      	movs	r1, #0
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <g_sel_state+0xac>)
 8001628:	f002 f982 	bl	8003930 <HAL_DAC_Start>
 800162c:	4603      	mov	r3, r0
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_DB) != HAL_OK) ||
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <g_sel_state+0x6a>
		Error_Handler();
 8001632:	f000 fa25 	bl	8001a80 <Error_Handler>

	//Set DAC to the desired GAIN value
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_LIN) != HAL_OK) ||
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <g_sel_state+0xa8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	2110      	movs	r1, #16
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <g_sel_state+0xac>)
 8001640:	f002 f951 	bl	80038e6 <HAL_DAC_SetValue>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d106      	bne.n	8001658 <g_sel_state+0x8c>
		  (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK) != HAL_OK)
 800164a:	2110      	movs	r1, #16
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <g_sel_state+0xac>)
 800164e:	f002 f96f 	bl	8003930 <HAL_DAC_Start>
 8001652:	4603      	mov	r3, r0
	if((HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_LIN) != HAL_OK) ||
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <g_sel_state+0x90>
		Error_Handler();
 8001658:	f000 fa12 	bl	8001a80 <Error_Handler>

	return ok;
 800165c:	2303      	movs	r3, #3

}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200004dc 	.word	0x200004dc
 8001668:	e9a3d25f 	.word	0xe9a3d25f
 800166c:	20000060 	.word	0x20000060
 8001670:	80808081 	.word	0x80808081
 8001674:	20000064 	.word	0x20000064
 8001678:	200002b4 	.word	0x200002b4

0800167c <ch_sel_state>:

/**
  * @brief Change Measurement Channel
  * @retval Next Action: OK, repeat, fail
  */
Actions_TypeDef ch_sel_state(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

	//Channel selection initialization

	channels_value[3] = comm[1];
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <ch_sel_state+0xd8>)
 8001684:	785a      	ldrb	r2, [r3, #1]
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <ch_sel_state+0xdc>)
 8001688:	70da      	strb	r2, [r3, #3]
	channels_value[2] = comm[2];
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <ch_sel_state+0xd8>)
 800168c:	789a      	ldrb	r2, [r3, #2]
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <ch_sel_state+0xdc>)
 8001690:	709a      	strb	r2, [r3, #2]
	channels_value[1] = comm[3];
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <ch_sel_state+0xd8>)
 8001694:	78da      	ldrb	r2, [r3, #3]
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <ch_sel_state+0xdc>)
 8001698:	705a      	strb	r2, [r3, #1]
	channels_value[0] = comm[4];
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <ch_sel_state+0xd8>)
 800169c:	791a      	ldrb	r2, [r3, #4]
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <ch_sel_state+0xdc>)
 80016a0:	701a      	strb	r2, [r3, #0]

	//Check if channel is valid
	if ((channels_value[0] >= N_CHANNELS) && (channels_value[1] >= N_CHANNELS) && (channels_value[2] >= N_CHANNELS)
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <ch_sel_state+0xdc>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b1f      	cmp	r3, #31
 80016a8:	d90d      	bls.n	80016c6 <ch_sel_state+0x4a>
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <ch_sel_state+0xdc>)
 80016ac:	785b      	ldrb	r3, [r3, #1]
 80016ae:	2b1f      	cmp	r3, #31
 80016b0:	d909      	bls.n	80016c6 <ch_sel_state+0x4a>
 80016b2:	4b29      	ldr	r3, [pc, #164]	; (8001758 <ch_sel_state+0xdc>)
 80016b4:	789b      	ldrb	r3, [r3, #2]
 80016b6:	2b1f      	cmp	r3, #31
 80016b8:	d905      	bls.n	80016c6 <ch_sel_state+0x4a>
			&&(channels_value[3] >= N_CHANNELS)){
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <ch_sel_state+0xdc>)
 80016bc:	78db      	ldrb	r3, [r3, #3]
 80016be:	2b1f      	cmp	r3, #31
 80016c0:	d901      	bls.n	80016c6 <ch_sel_state+0x4a>
		return fail;
 80016c2:	2305      	movs	r3, #5
 80016c4:	e041      	b.n	800174a <ch_sel_state+0xce>
	}

	//Set pins for channel selection

	for(uint8_t i = 0; i < 4; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	e03a      	b.n	8001742 <ch_sel_state+0xc6>
	{
		for(uint8_t j = 0; j < 5; j++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	71bb      	strb	r3, [r7, #6]
 80016d0:	e019      	b.n	8001706 <ch_sel_state+0x8a>
		{
			GPIO_PinState pin_value;

			//Extract MUX Input Configuration from UART value
			pin_value = (channels_value[i] & (1 << j)) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <ch_sel_state+0xdc>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	461a      	mov	r2, r3
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	fa42 f303 	asr.w	r3, r2, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	717b      	strb	r3, [r7, #5]

			//Set MUX selection input
			HAL_GPIO_WritePin(mux_ports[j], mux_pins[j], pin_value);
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <ch_sel_state+0xe0>)
 80016ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <ch_sel_state+0xe4>)
 80016f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016f8:	797a      	ldrb	r2, [r7, #5]
 80016fa:	4619      	mov	r1, r3
 80016fc:	f002 fd6a 	bl	80041d4 <HAL_GPIO_WritePin>
		for(uint8_t j = 0; j < 5; j++)
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	3301      	adds	r3, #1
 8001704:	71bb      	strb	r3, [r7, #6]
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d9e2      	bls.n	80016d2 <ch_sel_state+0x56>

		}

		//Write channel configuration to MUX i using chip select pins
		HAL_GPIO_WritePin(cs_ports[i], cs_pins[i], GPIO_PIN_RESET);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <ch_sel_state+0xe8>)
 8001710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4a14      	ldr	r2, [pc, #80]	; (8001768 <ch_sel_state+0xec>)
 8001718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	f002 fd58 	bl	80041d4 <HAL_GPIO_WritePin>


		//Latch MUX i
		HAL_GPIO_WritePin(cs_ports[i], cs_pins[i], GPIO_PIN_SET);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <ch_sel_state+0xe8>)
 8001728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <ch_sel_state+0xec>)
 8001730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	f002 fd4c 	bl	80041d4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < 4; i++)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3301      	adds	r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d9c1      	bls.n	80016cc <ch_sel_state+0x50>
	}
	//delay(500); //wait for channel selection stabilization

	return ok;
 8001748:	2303      	movs	r3, #3
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200004dc 	.word	0x200004dc
 8001758:	2000243c 	.word	0x2000243c
 800175c:	20000034 	.word	0x20000034
 8001760:	20000028 	.word	0x20000028
 8001764:	20000050 	.word	0x20000050
 8001768:	20000048 	.word	0x20000048

0800176c <exc_state>:

/**
  * @brief Starts/Stops Excitation Signal (Square Wave, 10 kHz)
  * @retval Next Action: OK, repeat, fail
  */
Actions_TypeDef exc_state(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	f_target= comm[1];
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <exc_state+0x4c>)
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <exc_state+0x50>)
 8001776:	701a      	strb	r2, [r3, #0]

	switch(f_target){
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <exc_state+0x50>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d002      	beq.n	8001786 <exc_state+0x1a>
 8001780:	2b02      	cmp	r3, #2
 8001782:	d009      	beq.n	8001798 <exc_state+0x2c>
 8001784:	e011      	b.n	80017aa <exc_state+0x3e>

		case 1: // 10kHz
			__HAL_TIM_SET_PRESCALER(&htim8, 99);
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <exc_state+0x54>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2263      	movs	r2, #99	; 0x63
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2); //Starts PWM for Current Source (10 kHz)
 800178e:	2104      	movs	r1, #4
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <exc_state+0x54>)
 8001792:	f004 fc1d 	bl	8005fd0 <HAL_TIM_PWM_Start>
			break;
 8001796:	e00c      	b.n	80017b2 <exc_state+0x46>

		case 2: // 100kHz
			__HAL_TIM_SET_PRESCALER(&htim8, 9);
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <exc_state+0x54>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2209      	movs	r2, #9
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2); //Starts PWM for Current Source (100 kHz)
 80017a0:	2104      	movs	r1, #4
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <exc_state+0x54>)
 80017a4:	f004 fc14 	bl	8005fd0 <HAL_TIM_PWM_Start>
			break;
 80017a8:	e003      	b.n	80017b2 <exc_state+0x46>

		default: //TURN-OFF
			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2); //Stops PWM for Current Source
 80017aa:	2104      	movs	r1, #4
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <exc_state+0x54>)
 80017ae:	f004 fd1b 	bl	80061e8 <HAL_TIM_PWM_Stop>
	}

	return ok;
 80017b2:	2303      	movs	r3, #3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200004dc 	.word	0x200004dc
 80017bc:	20000068 	.word	0x20000068
 80017c0:	20000380 	.word	0x20000380

080017c4 <meas_state>:

/**
  * @brief Starts and Manages One Voltage Measurement Run
  * @retval Next Action: OK, repeat, fail
  */
Actions_TypeDef meas_state(void){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

	return take_measurement(&hadc3);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <meas_state+0x10>)
 80017ca:	f000 f8e3 	bl	8001994 <take_measurement>
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000198 	.word	0x20000198

080017d8 <current_p_state>:

/**
  * @brief Starts and Manages One Current Measurement Leaving Terminal P of the Howland Source
  * @retval Next Action - OK, repeat, fail
  */
Actions_TypeDef current_p_state(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	return take_measurement(&hadc1);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <current_p_state+0x10>)
 80017de:	f000 f8d9 	bl	8001994 <take_measurement>
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200000f8 	.word	0x200000f8

080017ec <current_n_state>:

/**
  * @brief Starts and Manages One Current Measurement Leaving Terminal N of the Howland Source
  * @retval Next Action - OK, repeat, fail
  */
Actions_TypeDef current_n_state(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

	return take_measurement(&hadc2);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <current_n_state+0x10>)
 80017f2:	f000 f8cf 	bl	8001994 <take_measurement>
 80017f6:	4603      	mov	r3, r0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000148 	.word	0x20000148

08001800 <calc_FFT_state>:
/**
  * @brief Measures the magnitude and phase of the trans-impedance at the current frequency
  * @retval Next Action - OK, repeat, fail
  */

Actions_TypeDef calc_FFT_state(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

	//if (ch_sel_state() != ok){ //Change channel
		//return fail;
	//}

	fft_lck = HAL_LOCKED; //don't send data via uart after ADC completing
 8001806:	4b53      	ldr	r3, [pc, #332]	; (8001954 <calc_FFT_state+0x154>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]

	if (take_measurement(&hadc3) != ok){ //Take measurement from ADC
 800180c:	4852      	ldr	r0, [pc, #328]	; (8001958 <calc_FFT_state+0x158>)
 800180e:	f000 f8c1 	bl	8001994 <take_measurement>
 8001812:	4603      	mov	r3, r0
 8001814:	2b03      	cmp	r3, #3
 8001816:	d001      	beq.n	800181c <calc_FFT_state+0x1c>
		return repeat;
 8001818:	2304      	movs	r3, #4
 800181a:	e097      	b.n	800194c <calc_FFT_state+0x14c>
	}

	// Prepare input: fill with ADC data, zero-padding if necessary
	for (int i = 0; i < FFT_SIZE; i++) {
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e036      	b.n	8001890 <calc_FFT_state+0x90>
		if (i < ADC_BUFF_SIZE) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001828:	da28      	bge.n	800187c <calc_FFT_state+0x7c>
			fft_input[i] = (float32_t)(adc_buffer[i] - 2048) * (1.0f / 2048.0f) ;  // Scale to [-1, 1]
 800182a:	4a4c      	ldr	r2, [pc, #304]	; (800195c <calc_FFT_state+0x15c>)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001832:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001960 <calc_FFT_state+0x160>
 8001842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <calc_FFT_state+0x164>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	edc3 7a00 	vstr	s15, [r3]
			fft_input[i] *= hann_multiplier[i]; //windowing
 8001852:	4a44      	ldr	r2, [pc, #272]	; (8001964 <calc_FFT_state+0x164>)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	4a42      	ldr	r2, [pc, #264]	; (8001968 <calc_FFT_state+0x168>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <calc_FFT_state+0x164>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	edc3 7a00 	vstr	s15, [r3]
 800187a:	e006      	b.n	800188a <calc_FFT_state+0x8a>
		} else {
			fft_input[i] = 0.0f;  // Zero-padding
 800187c:	4a39      	ldr	r2, [pc, #228]	; (8001964 <calc_FFT_state+0x164>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FFT_SIZE; i++) {
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3301      	adds	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001896:	dbc4      	blt.n	8001822 <calc_FFT_state+0x22>
		}
	}

		// Initialize FFT
		arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 8001898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189c:	4833      	ldr	r0, [pc, #204]	; (800196c <calc_FFT_state+0x16c>)
 800189e:	f006 ff07 	bl	80086b0 <arm_rfft_fast_init_f32>
		// Perform FFT
		arm_rfft_fast_f32(&fft_instance, fft_input, fft_output, 0);
 80018a2:	2300      	movs	r3, #0
 80018a4:	4a32      	ldr	r2, [pc, #200]	; (8001970 <calc_FFT_state+0x170>)
 80018a6:	492f      	ldr	r1, [pc, #188]	; (8001964 <calc_FFT_state+0x164>)
 80018a8:	4830      	ldr	r0, [pc, #192]	; (800196c <calc_FFT_state+0x16c>)
 80018aa:	f006 ff83 	bl	80087b4 <arm_rfft_fast_f32>

		// Calculate magnitudes
		for (int i = 0; i < FFT_SIZE / 2; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	e027      	b.n	8001904 <calc_FFT_state+0x104>
			float32_t real = fft_output[2 * i];      // Real part
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <calc_FFT_state+0x170>)
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	607b      	str	r3, [r7, #4]
			float32_t imag = fft_output[2 * i + 1]; // Imaginary part
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <calc_FFT_state+0x170>)
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	603b      	str	r3, [r7, #0]
			magnitudes[i] = sqrtf(real * real + imag * imag);
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018da:	edd7 7a00 	vldr	s15, [r7]
 80018de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	f007 ff51 	bl	8009790 <sqrtf>
 80018ee:	eef0 7a40 	vmov.f32	s15, s0
 80018f2:	4a20      	ldr	r2, [pc, #128]	; (8001974 <calc_FFT_state+0x174>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < FFT_SIZE / 2; i++) {
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3301      	adds	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190a:	dbd3      	blt.n	80018b4 <calc_FFT_state+0xb4>
		}


	switch (f_target) {
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <calc_FFT_state+0x178>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d002      	beq.n	800191a <calc_FFT_state+0x11a>
 8001914:	2b02      	cmp	r3, #2
 8001916:	d005      	beq.n	8001924 <calc_FFT_state+0x124>
 8001918:	e00a      	b.n	8001930 <calc_FFT_state+0x130>
		case 1:
			mag_value = magnitudes[10];  // Bin 5 corresponds to 10kHz
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <calc_FFT_state+0x174>)
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <calc_FFT_state+0x17c>)
 8001920:	6013      	str	r3, [r2, #0]
			break;
 8001922:	e00a      	b.n	800193a <calc_FFT_state+0x13a>
		case 2:
			mag_value = magnitudes[102]; // Bin 51 corresponds to 100kHz
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <calc_FFT_state+0x174>)
 8001926:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <calc_FFT_state+0x17c>)
 800192c:	6013      	str	r3, [r2, #0]
			break;
 800192e:	e004      	b.n	800193a <calc_FFT_state+0x13a>
		default:
			mag_value = magnitudes[10];
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <calc_FFT_state+0x174>)
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <calc_FFT_state+0x17c>)
 8001936:	6013      	str	r3, [r2, #0]
			break;
 8001938:	bf00      	nop
	}

	HAL_UART_Transmit_DMA(&huart3, (uint8_t*) &mag_value, 4);
 800193a:	2204      	movs	r2, #4
 800193c:	490f      	ldr	r1, [pc, #60]	; (800197c <calc_FFT_state+0x17c>)
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <calc_FFT_state+0x180>)
 8001940:	f005 fc9c 	bl	800727c <HAL_UART_Transmit_DMA>

	fft_lck = HAL_UNLOCKED;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <calc_FFT_state+0x154>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
    return ok;
 800194a:	2303      	movs	r3, #3
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20002438 	.word	0x20002438
 8001958:	20000198 	.word	0x20000198
 800195c:	200004e4 	.word	0x200004e4
 8001960:	3a000000 	.word	0x3a000000
 8001964:	20002440 	.word	0x20002440
 8001968:	2000745c 	.word	0x2000745c
 800196c:	20007440 	.word	0x20007440
 8001970:	20004440 	.word	0x20004440
 8001974:	20006440 	.word	0x20006440
 8001978:	20000068 	.word	0x20000068
 800197c:	20007458 	.word	0x20007458
 8001980:	200003cc 	.word	0x200003cc

08001984 <error_state>:

/**
  * @brief Handles and Informs Errors
  * @retval Next Action - OK, repeat
  */
Actions_TypeDef error_state(void){
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	Error_Handler();
 8001988:	f000 f87a 	bl	8001a80 <Error_Handler>
	return ok;
 800198c:	2303      	movs	r3, #3
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <take_measurement>:

/**
  * @brief Take measure of 1000 points for a certain ADC and store it in adc_buffer
  * @retval Next Action - OK, repeat, fail
  */
Actions_TypeDef take_measurement(ADC_HandleTypeDef* hadc){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

	//ADC Start (TRANSFER TO volt_vector USING DMA)
	if(HAL_ADC_Start_DMA(hadc, (uint32_t*) adc_buffer, ADC_BUFF_SIZE) == HAL_OK)
 800199c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019a0:	4912      	ldr	r1, [pc, #72]	; (80019ec <take_measurement+0x58>)
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 feb8 	bl	8002718 <HAL_ADC_Start_DMA>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <take_measurement+0x22>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <take_measurement+0x5c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim4);					//If not busy, starts the timer
 80019b6:	480e      	ldr	r0, [pc, #56]	; (80019f0 <take_measurement+0x5c>)
 80019b8:	f004 fa24 	bl	8005e04 <HAL_TIM_Base_Start>

	if (__HAL_TIM_GET_COUNTER(&htim4) >= CHANNEL_STABILIZATION_TIME){ //Wait switching stabilization time
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <take_measurement+0x5c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <take_measurement+0x4c>

		//Start TIM3 to trigger the ADC
		if(HAL_TIM_Base_Start(&htim3) != HAL_OK)
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <take_measurement+0x60>)
 80019c8:	f004 fa1c 	bl	8005e04 <HAL_TIM_Base_Start>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <take_measurement+0x42>
		  Error_Handler();
 80019d2:	f000 f855 	bl	8001a80 <Error_Handler>

		HAL_TIM_Base_Stop(&htim4); //stops counter
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <take_measurement+0x5c>)
 80019d8:	f004 fa7c 	bl	8005ed4 <HAL_TIM_Base_Stop>
		return ok;
 80019dc:	2303      	movs	r3, #3
 80019de:	e000      	b.n	80019e2 <take_measurement+0x4e>
	}
	else
		return repeat;
 80019e0:	2304      	movs	r3, #4
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200004e4 	.word	0x200004e4
 80019f0:	20000334 	.word	0x20000334
 80019f4:	200002e8 	.word	0x200002e8

080019f8 <HAL_ADC_ConvCpltCallback>:

/* Callback Functions BEGIN-----------------------------------------------------------------*/


//Stops TIM3 once the DMA transfer is completed (this is called by the ADC DMA IRQ Handler)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

	//Stops ADC Measurement and Timer
	if(HAL_TIM_Base_Stop(&htim3) != HAL_OK)
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <HAL_ADC_ConvCpltCallback+0x44>)
 8001a02:	f004 fa67 	bl	8005ed4 <HAL_TIM_Base_Stop>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_ADC_ConvCpltCallback+0x18>
		Error_Handler();
 8001a0c:	f000 f838 	bl	8001a80 <Error_Handler>

	if(HAL_ADC_Stop_DMA(hadc) != HAL_OK)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 ff9d 	bl	8002950 <HAL_ADC_Stop_DMA>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_ADC_ConvCpltCallback+0x28>
		Error_Handler();
 8001a1c:	f000 f830 	bl	8001a80 <Error_Handler>

	//uart_cplt_lck = HAL_LOCKED;
	if(fft_lck != HAL_LOCKED)
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_ADC_ConvCpltCallback+0x48>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d005      	beq.n	8001a34 <HAL_ADC_ConvCpltCallback+0x3c>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) adc_buffer, (ADC_BUFF_SIZE));
 8001a28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a2c:	4905      	ldr	r1, [pc, #20]	; (8001a44 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x50>)
 8001a30:	f005 fc24 	bl	800727c <HAL_UART_Transmit_DMA>

}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200002e8 	.word	0x200002e8
 8001a40:	20002438 	.word	0x20002438
 8001a44:	200004e4 	.word	0x200004e4
 8001a48:	200003cc 	.word	0x200003cc

08001a4c <HAL_UART_RxCpltCallback>:

//UART Receive callback (called by the UART DMA IRQ Handler)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	uart_cplt_lck = HAL_UNLOCKED;
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_UART_RxCpltCallback+0x1c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000024 	.word	0x20000024

08001a6c <HAL_UART_TxCpltCallback>:

//UART Transmit callback (called by the UART DMA IRQ Handler)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	//uart_cplt_lck = HAL_UNLOCKED;
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>

08001a8a <ring_buf_init>:

static void advance_pointer(ring_handler_t rbuf);
static void retreat_pointer(ring_handler_t rbuf);

void ring_buf_init(ring_handler_t rbuf, uint16_t* buffer, size_t size)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
	rbuf->max = size;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	60da      	str	r2, [r3, #12]
	rbuf->buffer = buffer;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	601a      	str	r2, [r3, #0]
	ring_buf_reset(rbuf);
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f804 	bl	8001ab0 <ring_buf_reset>
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <ring_buf_reset>:

void ring_buf_reset(ring_handler_t rbuf)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

    rbuf->head = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
    rbuf->tail = 0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
    rbuf->full = false;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	741a      	strb	r2, [r3, #16]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <ST_nextstate>:
 */

#include "state_machine.h"
/* Function Declaration*/

States_TypeDef ST_nextstate(States_TypeDef state, Actions_TypeDef action){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b09a      	sub	sp, #104	; 0x68
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71bb      	strb	r3, [r7, #6]

	States_TypeDef state_transition[N_STATES][N_ACTIONS] = { //possible transitions of the SM
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <ST_nextstate+0x40>)
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4611      	mov	r1, r2
 8001af0:	225a      	movs	r2, #90	; 0x5a
 8001af2:	4618      	mov	r0, r3
 8001af4:	f007 fde0 	bl	80096b8 <memcpy>
			[excitation]       =      {error_msg, error_msg, error_msg, wait_code, excitation,  error_msg, error_msg,   error_msg,  error_msg,  error_msg},
			[meas_ip]    	   =      {error_msg, error_msg, error_msg, wait_code, meas_ip,     error_msg, error_msg,   error_msg,  error_msg,  error_msg},
			[meas_in]      	   =      {error_msg, error_msg, error_msg, wait_code, meas_in,     error_msg, error_msg,   error_msg,  error_msg,  error_msg}
	};

	return state_transition[state][action];
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	79b9      	ldrb	r1, [r7, #6]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	3368      	adds	r3, #104	; 0x68
 8001b06:	443b      	add	r3, r7
 8001b08:	440b      	add	r3, r1
 8001b0a:	3b5c      	subs	r3, #92	; 0x5c
 8001b0c:	781b      	ldrb	r3, [r3, #0]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3768      	adds	r7, #104	; 0x68
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	0800a7e0 	.word	0x0800a7e0

08001b1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_MspInit+0x44>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_MspInit+0x44>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x44>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x44>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x44>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x44>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b84:	d156      	bne.n	8001c34 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b86:	4b85      	ldr	r3, [pc, #532]	; (8001d9c <HAL_ADC_MspInit+0x238>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a83      	ldr	r2, [pc, #524]	; (8001d9c <HAL_ADC_MspInit+0x238>)
 8001b8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b90:	4b82      	ldr	r3, [pc, #520]	; (8001d9c <HAL_ADC_MspInit+0x238>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10b      	bne.n	8001bb0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b98:	4b81      	ldr	r3, [pc, #516]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	4a80      	ldr	r2, [pc, #512]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6153      	str	r3, [r2, #20]
 8001ba4:	4b7e      	ldr	r3, [pc, #504]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001bb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bba:	6153      	str	r3, [r2, #20]
 8001bbc:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = I_P_Pin;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I_P_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4872      	ldr	r0, [pc, #456]	; (8001da4 <HAL_ADC_MspInit+0x240>)
 8001bdc:	f002 f970 	bl	8003ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001be0:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001be2:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_ADC_MspInit+0x248>)
 8001be4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be6:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bec:	4b6e      	ldr	r3, [pc, #440]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c00:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c08:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c0e:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c16:	4864      	ldr	r0, [pc, #400]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001c18:	f001 ff22 	bl	8003a60 <HAL_DMA_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001c22:	f7ff ff2d 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a5f      	ldr	r2, [pc, #380]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c2c:	4a5e      	ldr	r2, [pc, #376]	; (8001da8 <HAL_ADC_MspInit+0x244>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c32:	e0ae      	b.n	8001d92 <HAL_ADC_MspInit+0x22e>
  else if(hadc->Instance==ADC2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a5d      	ldr	r2, [pc, #372]	; (8001db0 <HAL_ADC_MspInit+0x24c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d156      	bne.n	8001cec <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_ADC_MspInit+0x238>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_ADC_MspInit+0x238>)
 8001c46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c48:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HAL_ADC_MspInit+0x238>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6153      	str	r3, [r2, #20]
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c72:	6153      	str	r3, [r2, #20]
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = I_N_Pin;
 8001c80:	2308      	movs	r3, #8
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c84:	2303      	movs	r3, #3
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I_N_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	4844      	ldr	r0, [pc, #272]	; (8001da4 <HAL_ADC_MspInit+0x240>)
 8001c94:	f002 f914 	bl	8003ec0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001c98:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_ADC_MspInit+0x254>)
 8001c9c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c9e:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca4:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001caa:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cb8:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ccc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001cce:	4839      	ldr	r0, [pc, #228]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001cd0:	f001 fec6 	bl	8003a60 <HAL_DMA_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8001cda:	f7ff fed1 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a34      	ldr	r2, [pc, #208]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ce4:	4a33      	ldr	r2, [pc, #204]	; (8001db4 <HAL_ADC_MspInit+0x250>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001cea:	e052      	b.n	8001d92 <HAL_ADC_MspInit+0x22e>
  else if(hadc->Instance==ADC3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <HAL_ADC_MspInit+0x258>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d14d      	bne.n	8001d92 <HAL_ADC_MspInit+0x22e>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d00:	6153      	str	r3, [r2, #20]
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_ADC_MspInit+0x23c>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VMEAS_N_Pin|VMEAS_P_Pin;
 8001d26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <HAL_ADC_MspInit+0x25c>)
 8001d3c:	f002 f8c0 	bl	8003ec0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_ADC_MspInit+0x264>)
 8001d44:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d66:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d70:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d78:	f001 fe72 	bl	8003a60 <HAL_DMA_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001d82:	f7ff fe7d 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_ADC_MspInit+0x260>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001d92:	bf00      	nop
 8001d94:	3738      	adds	r7, #56	; 0x38
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000939c 	.word	0x2000939c
 8001da0:	40021000 	.word	0x40021000
 8001da4:	48000800 	.word	0x48000800
 8001da8:	200001e8 	.word	0x200001e8
 8001dac:	40020008 	.word	0x40020008
 8001db0:	50000100 	.word	0x50000100
 8001db4:	2000022c 	.word	0x2000022c
 8001db8:	40020408 	.word	0x40020408
 8001dbc:	50000400 	.word	0x50000400
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	20000270 	.word	0x20000270
 8001dc8:	40020458 	.word	0x40020458

08001dcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_DAC_MspInit+0x74>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d124      	bne.n	8001e38 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_DAC_MspInit+0x78>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_DAC_MspInit+0x78>)
 8001df4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001df8:	61d3      	str	r3, [r2, #28]
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_DAC_MspInit+0x78>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_DAC_MspInit+0x78>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_DAC_MspInit+0x78>)
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	6153      	str	r3, [r2, #20]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_DAC_MspInit+0x78>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = PGA_DB_Pin|PGA_LIN_Pin;
 8001e1e:	2330      	movs	r3, #48	; 0x30
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e22:	2303      	movs	r3, #3
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e34:	f002 f844 	bl	8003ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e38:	bf00      	nop
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40007400 	.word	0x40007400
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_RTC_MspInit+0x44>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d111      	bne.n	8001e7e <HAL_RTC_MspInit+0x36>
 8001e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e68:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_RTC_MspInit+0x48>)
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40002800 	.word	0x40002800
 8001e90:	10908100 	.word	0x10908100

08001e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_TIM_Base_MspInit+0x5c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_TIM_Base_MspInit+0x60>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_TIM_Base_MspInit+0x60>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	61d3      	str	r3, [r2, #28]
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_TIM_Base_MspInit+0x60>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ebe:	e010      	b.n	8001ee2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_TIM_Base_MspInit+0x64>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_TIM_Base_MspInit+0x60>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_TIM_Base_MspInit+0x60>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_TIM_Base_MspInit+0x60>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40000800 	.word	0x40000800

08001efc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_TIM_PWM_MspInit+0x38>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d10b      	bne.n	8001f26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f18:	6193      	str	r3, [r2, #24]
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40013400 	.word	0x40013400
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <HAL_TIM_MspPostInit+0x64>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d11b      	bne.n	8001f96 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f68:	6153      	str	r3, [r2, #20]
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_TIM_MspPostInit+0x68>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = HWL_DIBS_Pin;
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001f86:	2304      	movs	r3, #4
 8001f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HWL_DIBS_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_TIM_MspPostInit+0x6c>)
 8001f92:	f001 ff95 	bl	8003ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40013400 	.word	0x40013400
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000800 	.word	0x48000800

08001fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a41      	ldr	r2, [pc, #260]	; (80020d0 <HAL_UART_MspInit+0x124>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d17c      	bne.n	80020c8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fce:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <HAL_UART_MspInit+0x128>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_UART_MspInit+0x128>)
 8001fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_UART_MspInit+0x128>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <HAL_UART_MspInit+0x128>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <HAL_UART_MspInit+0x128>)
 8001fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff0:	6153      	str	r3, [r2, #20]
 8001ff2:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_UART_MspInit+0x128>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ffe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002010:	2307      	movs	r3, #7
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	482f      	ldr	r0, [pc, #188]	; (80020d8 <HAL_UART_MspInit+0x12c>)
 800201c:	f001 ff50 	bl	8003ec0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002022:	4a2f      	ldr	r2, [pc, #188]	; (80020e0 <HAL_UART_MspInit+0x134>)
 8002024:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002028:	2210      	movs	r2, #16
 800202a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_UART_MspInit+0x130>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_UART_MspInit+0x130>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_UART_MspInit+0x130>)
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002050:	4822      	ldr	r0, [pc, #136]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002052:	f001 fd05 	bl	8003a60 <HAL_DMA_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800205c:	f7ff fd10 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002064:	671a      	str	r2, [r3, #112]	; 0x70
 8002066:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <HAL_UART_MspInit+0x130>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_UART_MspInit+0x138>)
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_UART_MspInit+0x13c>)
 8002070:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_UART_MspInit+0x138>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_UART_MspInit+0x138>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800209c:	4811      	ldr	r0, [pc, #68]	; (80020e4 <HAL_UART_MspInit+0x138>)
 800209e:	f001 fcdf 	bl	8003a60 <HAL_DMA_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80020a8:	f7ff fcea 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_UART_MspInit+0x138>)
 80020b0:	675a      	str	r2, [r3, #116]	; 0x74
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_UART_MspInit+0x138>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2027      	movs	r0, #39	; 0x27
 80020be:	f001 fbba 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c2:	2027      	movs	r0, #39	; 0x27
 80020c4:	f001 fbd3 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40004800 	.word	0x40004800
 80020d4:	40021000 	.word	0x40021000
 80020d8:	48000c00 	.word	0x48000c00
 80020dc:	20000454 	.word	0x20000454
 80020e0:	4002001c 	.word	0x4002001c
 80020e4:	20000498 	.word	0x20000498
 80020e8:	40020030 	.word	0x40020030

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <NMI_Handler+0x4>

080020f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <MemManage_Handler+0x4>

080020fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <BusFault_Handler+0x4>

08002104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <UsageFault_Handler+0x4>

0800210a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002138:	f000 f8c0 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <DMA1_Channel1_IRQHandler+0x10>)
 8002146:	f001 fdad 	bl	8003ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200001e8 	.word	0x200001e8

08002154 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <DMA1_Channel2_IRQHandler+0x10>)
 800215a:	f001 fda3 	bl	8003ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000454 	.word	0x20000454

08002168 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <DMA1_Channel3_IRQHandler+0x10>)
 800216e:	f001 fd99 	bl	8003ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000498 	.word	0x20000498

0800217c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <USART3_IRQHandler+0x10>)
 8002182:	f005 f93b 	bl	80073fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200003cc 	.word	0x200003cc

08002190 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA2_Channel1_IRQHandler+0x10>)
 8002196:	f001 fd85 	bl	8003ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000022c 	.word	0x2000022c

080021a4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <DMA2_Channel5_IRQHandler+0x10>)
 80021aa:	f001 fd7b 	bl	8003ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000270 	.word	0x20000270

080021b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002214 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e0:	f7ff ffea 	bl	80021b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <LoopForever+0x6>)
  ldr r1, =_edata
 80021e6:	490d      	ldr	r1, [pc, #52]	; (800221c <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e8:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <LoopForever+0xe>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021fc:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <LoopForever+0x16>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220a:	f007 fa31 	bl	8009670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800220e:	f7fe fc29 	bl	8000a64 <main>

08002212 <LoopForever>:

LoopForever:
    b LoopForever
 8002212:	e7fe      	b.n	8002212 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002214:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8002220:	0801deb0 	.word	0x0801deb0
  ldr r2, =_sbss
 8002224:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8002228:	200093a4 	.word	0x200093a4

0800222c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC1_2_IRQHandler>
	...

08002230 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_Init+0x28>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_Init+0x28>)
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f001 faed 	bl	8003820 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f808 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff fc66 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000

0800225c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_InitTick+0x54>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fb05 	bl	800388a <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f001 facd 	bl	8003836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_InitTick+0x5c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000006c 	.word	0x2000006c
 80022b4:	20000074 	.word	0x20000074
 80022b8:	20000070 	.word	0x20000070

080022bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000074 	.word	0x20000074
 80022e0:	200093a0 	.word	0x200093a0

080022e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200093a0 	.word	0x200093a0

080022fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b09a      	sub	sp, #104	; 0x68
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e1e3      	b.n	800270c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d176      	bne.n	8002444 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d152      	bne.n	8002404 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fbf3 	bl	8001b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d13b      	bne.n	8002404 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f001 f85b 	bl	8003448 <ADC_Disable>
 8002392:	4603      	mov	r3, r0
 8002394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d12f      	bne.n	8002404 <HAL_ADC_Init+0xe0>
 80023a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d12b      	bne.n	8002404 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b4:	f023 0302 	bic.w	r3, r3, #2
 80023b8:	f043 0202 	orr.w	r2, r3, #2
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <HAL_ADC_Init+0x308>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a92      	ldr	r2, [pc, #584]	; (8002630 <HAL_ADC_Init+0x30c>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9a      	lsrs	r2, r3, #18
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023f6:	e002      	b.n	80023fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800241c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002420:	d110      	bne.n	8002444 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f023 0312 	bic.w	r3, r3, #18
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8150 	bne.w	80026f2 <HAL_ADC_Init+0x3ce>
 8002452:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 814b 	bne.w	80026f2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 8143 	bne.w	80026f2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002474:	f043 0202 	orr.w	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002484:	d004      	beq.n	8002490 <HAL_ADC_Init+0x16c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_ADC_Init+0x310>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <HAL_ADC_Init+0x170>
 8002490:	4b69      	ldr	r3, [pc, #420]	; (8002638 <HAL_ADC_Init+0x314>)
 8002492:	e000      	b.n	8002496 <HAL_ADC_Init+0x172>
 8002494:	4b69      	ldr	r3, [pc, #420]	; (800263c <HAL_ADC_Init+0x318>)
 8002496:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a0:	d102      	bne.n	80024a8 <HAL_ADC_Init+0x184>
 80024a2:	4b64      	ldr	r3, [pc, #400]	; (8002634 <HAL_ADC_Init+0x310>)
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e01a      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a61      	ldr	r2, [pc, #388]	; (8002634 <HAL_ADC_Init+0x310>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d103      	bne.n	80024ba <HAL_ADC_Init+0x196>
 80024b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e011      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a60      	ldr	r2, [pc, #384]	; (8002640 <HAL_ADC_Init+0x31c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <HAL_ADC_Init+0x1a6>
 80024c4:	4b5f      	ldr	r3, [pc, #380]	; (8002644 <HAL_ADC_Init+0x320>)
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e009      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_ADC_Init+0x320>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <HAL_ADC_Init+0x1b6>
 80024d4:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <HAL_ADC_Init+0x31c>)
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e001      	b.n	80024de <HAL_ADC_Init+0x1ba>
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_ADC_Init+0x1da>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Init+0x1da>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_ADC_Init+0x1dc>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11c      	bne.n	800253e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002504:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_ADC_Init+0x202>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADC_Init+0x202>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_ADC_Init+0x204>
 8002526:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002528:	2b00      	cmp	r3, #0
 800252a:	d108      	bne.n	800253e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800252c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7e5b      	ldrb	r3, [r3, #25]
 8002542:	035b      	lsls	r3, r3, #13
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002548:	2a01      	cmp	r2, #1
 800254a:	d002      	beq.n	8002552 <HAL_ADC_Init+0x22e>
 800254c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002550:	e000      	b.n	8002554 <HAL_ADC_Init+0x230>
 8002552:	2200      	movs	r2, #0
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4313      	orrs	r3, r2
 8002562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002564:	4313      	orrs	r3, r2
 8002566:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d11b      	bne.n	80025aa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7e5b      	ldrb	r3, [r3, #25]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	3b01      	subs	r3, #1
 8002580:	045a      	lsls	r2, r3, #17
 8002582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002584:	4313      	orrs	r3, r2
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	663b      	str	r3, [r7, #96]	; 0x60
 800258c:	e00d      	b.n	80025aa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d054      	beq.n	800265c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_ADC_Init+0x31c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Init+0x2a2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <HAL_ADC_Init+0x320>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d140      	bne.n	8002648 <HAL_ADC_Init+0x324>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80025ce:	d02a      	beq.n	8002626 <HAL_ADC_Init+0x302>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d8:	d022      	beq.n	8002620 <HAL_ADC_Init+0x2fc>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80025e2:	d01a      	beq.n	800261a <HAL_ADC_Init+0x2f6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80025ec:	d012      	beq.n	8002614 <HAL_ADC_Init+0x2f0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80025f6:	d00a      	beq.n	800260e <HAL_ADC_Init+0x2ea>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002600:	d002      	beq.n	8002608 <HAL_ADC_Init+0x2e4>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	e023      	b.n	8002650 <HAL_ADC_Init+0x32c>
 8002608:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800260c:	e020      	b.n	8002650 <HAL_ADC_Init+0x32c>
 800260e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002612:	e01d      	b.n	8002650 <HAL_ADC_Init+0x32c>
 8002614:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002618:	e01a      	b.n	8002650 <HAL_ADC_Init+0x32c>
 800261a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261e:	e017      	b.n	8002650 <HAL_ADC_Init+0x32c>
 8002620:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002624:	e014      	b.n	8002650 <HAL_ADC_Init+0x32c>
 8002626:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800262a:	e011      	b.n	8002650 <HAL_ADC_Init+0x32c>
 800262c:	2000006c 	.word	0x2000006c
 8002630:	431bde83 	.word	0x431bde83
 8002634:	50000100 	.word	0x50000100
 8002638:	50000300 	.word	0x50000300
 800263c:	50000700 	.word	0x50000700
 8002640:	50000400 	.word	0x50000400
 8002644:	50000500 	.word	0x50000500
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002654:	4313      	orrs	r3, r2
 8002656:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002658:	4313      	orrs	r3, r2
 800265a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d114      	bne.n	8002694 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002678:	f023 0302 	bic.w	r3, r3, #2
 800267c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7e1b      	ldrb	r3, [r3, #24]
 8002682:	039a      	lsls	r2, r3, #14
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4313      	orrs	r3, r2
 800268e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002690:	4313      	orrs	r3, r2
 8002692:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <HAL_ADC_Init+0x3f0>)
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026a4:	430b      	orrs	r3, r1
 80026a6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10c      	bne.n	80026ca <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f023 010f 	bic.w	r1, r3, #15
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
 80026c8:	e007      	b.n	80026da <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 020f 	bic.w	r2, r2, #15
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
 80026f0:	e00a      	b.n	8002708 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f023 0312 	bic.w	r3, r3, #18
 80026fa:	f043 0210 	orr.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002708:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800270c:	4618      	mov	r0, r3
 800270e:	3768      	adds	r7, #104	; 0x68
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	fff0c007 	.word	0xfff0c007

08002718 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80f7 	bne.w	8002926 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Start_DMA+0x2e>
 8002742:	2302      	movs	r3, #2
 8002744:	e0f2      	b.n	800292c <HAL_ADC_Start_DMA+0x214>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002756:	d004      	beq.n	8002762 <HAL_ADC_Start_DMA+0x4a>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a75      	ldr	r2, [pc, #468]	; (8002934 <HAL_ADC_Start_DMA+0x21c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d109      	bne.n	8002776 <HAL_ADC_Start_DMA+0x5e>
 8002762:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_ADC_Start_DMA+0x220>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	e008      	b.n	8002788 <HAL_ADC_Start_DMA+0x70>
 8002776:	4b71      	ldr	r3, [pc, #452]	; (800293c <HAL_ADC_Start_DMA+0x224>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80c5 	beq.w	8002918 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fdf6 	bl	8003380 <ADC_Enable>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80b7 	bne.w	800290e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_Start_DMA+0xb0>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5c      	ldr	r2, [pc, #368]	; (8002934 <HAL_ADC_Start_DMA+0x21c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d106      	bne.n	80027d6 <HAL_ADC_Start_DMA+0xbe>
 80027c8:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <HAL_ADC_Start_DMA+0x220>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d010      	beq.n	80027f6 <HAL_ADC_Start_DMA+0xde>
 80027d4:	e005      	b.n	80027e2 <HAL_ADC_Start_DMA+0xca>
 80027d6:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_ADC_Start_DMA+0x224>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_ADC_Start_DMA+0xde>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ea:	d004      	beq.n	80027f6 <HAL_ADC_Start_DMA+0xde>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a53      	ldr	r2, [pc, #332]	; (8002940 <HAL_ADC_Start_DMA+0x228>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d115      	bne.n	8002822 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d036      	beq.n	800287e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002818:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002820:	e02d      	b.n	800287e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002836:	d004      	beq.n	8002842 <HAL_ADC_Start_DMA+0x12a>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3d      	ldr	r2, [pc, #244]	; (8002934 <HAL_ADC_Start_DMA+0x21c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10a      	bne.n	8002858 <HAL_ADC_Start_DMA+0x140>
 8002842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e008      	b.n	800286a <HAL_ADC_Start_DMA+0x152>
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_ADC_Start_DMA+0x228>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002876:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d106      	bne.n	800289a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f023 0206 	bic.w	r2, r3, #6
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
 8002898:	e002      	b.n	80028a0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <HAL_ADC_Start_DMA+0x22c>)
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	4a24      	ldr	r2, [pc, #144]	; (8002948 <HAL_ADC_Start_DMA+0x230>)
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	4a23      	ldr	r2, [pc, #140]	; (800294c <HAL_ADC_Start_DMA+0x234>)
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	221c      	movs	r2, #28
 80028c6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0210 	orr.w	r2, r2, #16
 80028d6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3340      	adds	r3, #64	; 0x40
 80028f2:	4619      	mov	r1, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f001 f8f9 	bl	8003aee <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0204 	orr.w	r2, r2, #4
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e00d      	b.n	800292a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002916:	e008      	b.n	800292a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002924:	e001      	b.n	800292a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	50000100 	.word	0x50000100
 8002938:	50000300 	.word	0x50000300
 800293c:	50000700 	.word	0x50000700
 8002940:	50000400 	.word	0x50000400
 8002944:	080032b5 	.word	0x080032b5
 8002948:	0800332f 	.word	0x0800332f
 800294c:	0800334b 	.word	0x0800334b

08002950 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_ADC_Stop_DMA+0x1a>
 8002966:	2302      	movs	r3, #2
 8002968:	e050      	b.n	8002a0c <HAL_ADC_Stop_DMA+0xbc>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002972:	216c      	movs	r1, #108	; 0x6c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fdcd 	bl	8003514 <ADC_ConversionStop>
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d13e      	bne.n	8002a02 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800299c:	2b02      	cmp	r3, #2
 800299e:	d10f      	bne.n	80029c0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 f901 	bl	8003bac <HAL_DMA_Abort>
 80029aa:	4603      	mov	r3, r0
 80029ac:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0210 	bic.w	r2, r2, #16
 80029ce:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fd36 	bl	8003448 <ADC_Disable>
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e002      	b.n	80029e8 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fd30 	bl	8003448 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADCEx_Calibration_Start+0x1c>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e05f      	b.n	8002af0 <HAL_ADCEx_Calibration_Start+0xdc>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fd05 	bl	8003448 <ADC_Disable>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d14e      	bne.n	8002ae6 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002a5c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a72:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a82:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002a84:	f7ff fc2e 	bl	80022e4 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a8a:	e01c      	b.n	8002ac6 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a8c:	f7ff fc2a 	bl	80022e4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b0a      	cmp	r3, #10
 8002a98:	d915      	bls.n	8002ac6 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f023 0312 	bic.w	r3, r3, #18
 8002ab2:	f043 0210 	orr.w	r2, r3, #16
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e014      	b.n	8002af0 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad4:	d0da      	beq.n	8002a8c <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b09b      	sub	sp, #108	; 0x6c
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x22>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e2ca      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x5b8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 82ae 	bne.w	800308e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d81c      	bhi.n	8002b74 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	231f      	movs	r3, #31
 8002b50:	4093      	lsls	r3, r2
 8002b52:	43db      	mvns	r3, r3
 8002b54:	4019      	ands	r1, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
 8002b72:	e063      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d81e      	bhi.n	8002bba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	3b1e      	subs	r3, #30
 8002b90:	221f      	movs	r2, #31
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	4019      	ands	r1, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	3b1e      	subs	r3, #30
 8002bac:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb8:	e040      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b0e      	cmp	r3, #14
 8002bc0:	d81e      	bhi.n	8002c00 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	3b3c      	subs	r3, #60	; 0x3c
 8002bd6:	221f      	movs	r2, #31
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4019      	ands	r1, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	3b3c      	subs	r3, #60	; 0x3c
 8002bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfe:	e01d      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	3b5a      	subs	r3, #90	; 0x5a
 8002c14:	221f      	movs	r2, #31
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	4019      	ands	r1, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	3b5a      	subs	r3, #90	; 0x5a
 8002c30:	fa00 f203 	lsl.w	r2, r0, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 80e5 	bne.w	8002e16 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b09      	cmp	r3, #9
 8002c52:	d91c      	bls.n	8002c8e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6999      	ldr	r1, [r3, #24]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	3b1e      	subs	r3, #30
 8002c66:	2207      	movs	r2, #7
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	4019      	ands	r1, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6898      	ldr	r0, [r3, #8]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b1e      	subs	r3, #30
 8002c80:	fa00 f203 	lsl.w	r2, r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	619a      	str	r2, [r3, #24]
 8002c8c:	e019      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6959      	ldr	r1, [r3, #20]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4019      	ands	r1, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6898      	ldr	r0, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d84f      	bhi.n	8002d84 <HAL_ADC_ConfigChannel+0x28c>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_ADC_ConfigChannel+0x1f4>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d1f 	.word	0x08002d1f
 8002cf4:	08002d41 	.word	0x08002d41
 8002cf8:	08002d63 	.word	0x08002d63
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d02:	4b9a      	ldr	r3, [pc, #616]	; (8002f6c <HAL_ADC_ConfigChannel+0x474>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	0691      	lsls	r1, r2, #26
 8002d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d1a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d1c:	e07e      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d24:	4b91      	ldr	r3, [pc, #580]	; (8002f6c <HAL_ADC_ConfigChannel+0x474>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	0691      	lsls	r1, r2, #26
 8002d2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d30:	430a      	orrs	r2, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d3c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d3e:	e06d      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d46:	4b89      	ldr	r3, [pc, #548]	; (8002f6c <HAL_ADC_ConfigChannel+0x474>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	0691      	lsls	r1, r2, #26
 8002d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d52:	430a      	orrs	r2, r1
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d5e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d60:	e05c      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d68:	4b80      	ldr	r3, [pc, #512]	; (8002f6c <HAL_ADC_ConfigChannel+0x474>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	0691      	lsls	r1, r2, #26
 8002d72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d74:	430a      	orrs	r2, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d80:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d82:	e04b      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d107      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	069b      	lsls	r3, r3, #26
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d107      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	069b      	lsls	r3, r3, #26
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d107      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d10a      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e12:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002e14:	e001      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002e1a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x344>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x344>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x346>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 8130 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d00f      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	400a      	ands	r2, r1
 8002e66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e6a:	e049      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b09      	cmp	r3, #9
 8002e8c:	d91c      	bls.n	8002ec8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6999      	ldr	r1, [r3, #24]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b1b      	subs	r3, #27
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4019      	ands	r1, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6898      	ldr	r0, [r3, #8]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b1b      	subs	r3, #27
 8002eba:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]
 8002ec6:	e01b      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6959      	ldr	r1, [r3, #20]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	2207      	movs	r2, #7
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4019      	ands	r1, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6898      	ldr	r0, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_ConfigChannel+0x41c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_ADC_ConfigChannel+0x478>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x420>
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_ADC_ConfigChannel+0x47c>)
 8002f16:	e000      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x422>
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_ADC_ConfigChannel+0x480>)
 8002f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d105      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f34:	2b11      	cmp	r3, #17
 8002f36:	d105      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f48:	2b12      	cmp	r3, #18
 8002f4a:	f040 80ab 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 80a4 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f64:	d10a      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x484>
 8002f66:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_ADC_ConfigChannel+0x478>)
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e022      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4ba>
 8002f6c:	83fff000 	.word	0x83fff000
 8002f70:	50000100 	.word	0x50000100
 8002f74:	50000300 	.word	0x50000300
 8002f78:	50000700 	.word	0x50000700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a4e      	ldr	r2, [pc, #312]	; (80030bc <HAL_ADC_ConfigChannel+0x5c4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d103      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x496>
 8002f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e011      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4ba>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x4a6>
 8002f98:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e009      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4ba>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a48      	ldr	r2, [pc, #288]	; (80030c4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d102      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x4b6>
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e001      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x4ba>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x4da>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x4da>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x4dc>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d150      	bne.n	800307a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x502>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x502>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x504>
 8002ffa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d13c      	bne.n	800307a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d11d      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x54c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003010:	d118      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800301a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_ADC_ConfigChannel+0x5d4>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	0c9a      	lsrs	r2, r3, #18
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003034:	e002      	b.n	800303c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3b01      	subs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f9      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003042:	e02e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b11      	cmp	r3, #17
 800304a:	d10b      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x56c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003054:	d106      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003062:	e01e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d11a      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800306c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003076:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003078:	e013      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800308c:	e00a      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80030a0:	e000      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030a2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	376c      	adds	r7, #108	; 0x6c
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	50000100 	.word	0x50000100
 80030c0:	50000400 	.word	0x50000400
 80030c4:	50000500 	.word	0x50000500
 80030c8:	2000006c 	.word	0x2000006c
 80030cc:	431bde83 	.word	0x431bde83

080030d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b099      	sub	sp, #100	; 0x64
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e8:	d102      	bne.n	80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80030ea:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	e01a      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d103      	bne.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80030fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	e011      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a67      	ldr	r2, [pc, #412]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	e009      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d102      	bne.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800311c:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	e001      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b0      	b.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800313a:	2302      	movs	r3, #2
 800313c:	e0a9      	b.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 808d 	bne.w	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 8086 	bne.w	8003270 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800316c:	d004      	beq.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800317a:	e000      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800317c:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800317e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d040      	beq.n	800320a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319a:	035b      	lsls	r3, r3, #13
 800319c:	430b      	orrs	r3, r1
 800319e:	431a      	orrs	r2, r3
 80031a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d15c      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80031e6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d14b      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80031ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031f4:	f023 030f 	bic.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	6811      	ldr	r1, [r2, #0]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	6892      	ldr	r2, [r2, #8]
 8003200:	430a      	orrs	r2, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003206:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003208:	e03c      	b.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800320a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003214:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d123      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003258:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d112      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800325e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800326c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800326e:	e009      	b.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003282:	e000      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003284:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800328e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003292:	4618      	mov	r0, r3
 8003294:	3764      	adds	r7, #100	; 0x64
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	50000100 	.word	0x50000100
 80032a4:	50000400 	.word	0x50000400
 80032a8:	50000500 	.word	0x50000500
 80032ac:	50000300 	.word	0x50000300
 80032b0:	50000700 	.word	0x50000700

080032b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d126      	bne.n	800331c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d115      	bne.n	8003314 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d111      	bne.n	8003314 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7fe fb6f 	bl	80019f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800331a:	e004      	b.n	8003326 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7fe ffdd 	bl	80022fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	f043 0204 	orr.w	r2, r3, #4
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7fe ffcd 	bl	8002310 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d108      	bne.n	80033ac <ADC_Enable+0x2c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <ADC_Enable+0x2c>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <ADC_Enable+0x2e>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d143      	bne.n	800343a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	4b22      	ldr	r3, [pc, #136]	; (8003444 <ADC_Enable+0xc4>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0210 	orr.w	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e02f      	b.n	800343c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80033ec:	f7fe ff7a 	bl	80022e4 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033f2:	e01b      	b.n	800342c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033f4:	f7fe ff76 	bl	80022e4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d914      	bls.n	800342c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d00d      	beq.n	800342c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d1dc      	bne.n	80033f4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	8000003f 	.word	0x8000003f

08003448 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d108      	bne.n	8003474 <ADC_Disable+0x2c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <ADC_Disable+0x2c>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <ADC_Disable+0x2e>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d047      	beq.n	800350a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030d 	and.w	r3, r3, #13
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10f      	bne.n	80034a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0202 	orr.w	r2, r2, #2
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2203      	movs	r2, #3
 800349e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80034a0:	f7fe ff20 	bl	80022e4 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034a6:	e029      	b.n	80034fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0210 	orr.w	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e023      	b.n	800350c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034c4:	f7fe ff0e 	bl	80022e4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d914      	bls.n	80034fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d10d      	bne.n	80034fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f043 0210 	orr.w	r2, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d0dc      	beq.n	80034c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 809b 	beq.w	8003670 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003548:	d12a      	bne.n	80035a0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800354e:	2b01      	cmp	r3, #1
 8003550:	d126      	bne.n	80035a0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003556:	2b01      	cmp	r3, #1
 8003558:	d122      	bne.n	80035a0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800355a:	230c      	movs	r3, #12
 800355c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800355e:	e014      	b.n	800358a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4a46      	ldr	r2, [pc, #280]	; (800367c <ADC_ConversionStop+0x168>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d90d      	bls.n	8003584 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f043 0210 	orr.w	r2, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e076      	b.n	8003672 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	3301      	adds	r3, #1
 8003588:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	d1e3      	bne.n	8003560 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b60      	cmp	r3, #96	; 0x60
 80035a4:	d015      	beq.n	80035d2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d10e      	bne.n	80035d2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d107      	bne.n	80035d2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0210 	orr.w	r2, r2, #16
 80035d0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d015      	beq.n	8003604 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d10e      	bne.n	8003604 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0220 	orr.w	r2, r2, #32
 8003602:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b60      	cmp	r3, #96	; 0x60
 8003608:	d005      	beq.n	8003616 <ADC_ConversionStop+0x102>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b6c      	cmp	r3, #108	; 0x6c
 800360e:	d105      	bne.n	800361c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003610:	230c      	movs	r3, #12
 8003612:	617b      	str	r3, [r7, #20]
        break;
 8003614:	e005      	b.n	8003622 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003616:	2308      	movs	r3, #8
 8003618:	617b      	str	r3, [r7, #20]
        break;
 800361a:	e002      	b.n	8003622 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800361c:	2304      	movs	r3, #4
 800361e:	617b      	str	r3, [r7, #20]
        break;
 8003620:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003622:	f7fe fe5f 	bl	80022e4 <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003628:	e01b      	b.n	8003662 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800362a:	f7fe fe5b 	bl	80022e4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b0b      	cmp	r3, #11
 8003636:	d914      	bls.n	8003662 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f043 0210 	orr.w	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e007      	b.n	8003672 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1dc      	bne.n	800362a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	000993ff 	.word	0x000993ff

08003680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800369c:	4013      	ands	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b2:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	60d3      	str	r3, [r2, #12]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f003 0307 	and.w	r3, r3, #7
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db0b      	blt.n	800370e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	f003 021f 	and.w	r2, r3, #31
 80036fc:	4907      	ldr	r1, [pc, #28]	; (800371c <__NVIC_EnableIRQ+0x38>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2001      	movs	r0, #1
 8003706:	fa00 f202 	lsl.w	r2, r0, r2
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000e100 	.word	0xe000e100

08003720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	6039      	str	r1, [r7, #0]
 800372a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	2b00      	cmp	r3, #0
 8003732:	db0a      	blt.n	800374a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	490c      	ldr	r1, [pc, #48]	; (800376c <__NVIC_SetPriority+0x4c>)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	440b      	add	r3, r1
 8003744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003748:	e00a      	b.n	8003760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4908      	ldr	r1, [pc, #32]	; (8003770 <__NVIC_SetPriority+0x50>)
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	3b04      	subs	r3, #4
 8003758:	0112      	lsls	r2, r2, #4
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	440b      	add	r3, r1
 800375e:	761a      	strb	r2, [r3, #24]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	e000e100 	.word	0xe000e100
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f1c3 0307 	rsb	r3, r3, #7
 800378e:	2b04      	cmp	r3, #4
 8003790:	bf28      	it	cs
 8003792:	2304      	movcs	r3, #4
 8003794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3304      	adds	r3, #4
 800379a:	2b06      	cmp	r3, #6
 800379c:	d902      	bls.n	80037a4 <NVIC_EncodePriority+0x30>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3b03      	subs	r3, #3
 80037a2:	e000      	b.n	80037a6 <NVIC_EncodePriority+0x32>
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	401a      	ands	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037bc:	f04f 31ff 	mov.w	r1, #4294967295
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	43d9      	mvns	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037cc:	4313      	orrs	r3, r2
         );
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3724      	adds	r7, #36	; 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ec:	d301      	bcc.n	80037f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ee:	2301      	movs	r3, #1
 80037f0:	e00f      	b.n	8003812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <SysTick_Config+0x40>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037fa:	210f      	movs	r1, #15
 80037fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003800:	f7ff ff8e 	bl	8003720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <SysTick_Config+0x40>)
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <SysTick_Config+0x40>)
 800380c:	2207      	movs	r2, #7
 800380e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	e000e010 	.word	0xe000e010

08003820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff29 	bl	8003680 <__NVIC_SetPriorityGrouping>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003848:	f7ff ff3e 	bl	80036c8 <__NVIC_GetPriorityGrouping>
 800384c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	6978      	ldr	r0, [r7, #20]
 8003854:	f7ff ff8e 	bl	8003774 <NVIC_EncodePriority>
 8003858:	4602      	mov	r2, r0
 800385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff5d 	bl	8003720 <__NVIC_SetPriority>
}
 8003866:	bf00      	nop
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	4603      	mov	r3, r0
 8003876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff31 	bl	80036e4 <__NVIC_EnableIRQ>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ffa2 	bl	80037dc <SysTick_Config>
 8003898:	4603      	mov	r3, r0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e014      	b.n	80038de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	791b      	ldrb	r3, [r3, #4]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fe fa81 	bl	8001dcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80038e6:	b480      	push	{r7}
 80038e8:	b087      	sub	sp, #28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	3308      	adds	r3, #8
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e004      	b.n	800391a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3314      	adds	r3, #20
 8003918:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	461a      	mov	r2, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	795b      	ldrb	r3, [r3, #5]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_DAC_Start+0x16>
 8003942:	2302      	movs	r3, #2
 8003944:	e039      	b.n	80039ba <HAL_DAC_Start+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	409a      	lsls	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10f      	bne.n	800398c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003976:	2b3c      	cmp	r3, #60	; 0x3c
 8003978:	d118      	bne.n	80039ac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	e00f      	b.n	80039ac <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003996:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800399a:	d107      	bne.n	80039ac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0202 	orr.w	r2, r2, #2
 80039aa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b087      	sub	sp, #28
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	795b      	ldrb	r3, [r3, #5]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_DAC_ConfigChannel+0x20>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e036      	b.n	8003a54 <HAL_DAC_ConfigChannel+0x8e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2202      	movs	r2, #2
 80039f0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80039fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	22c0      	movs	r2, #192	; 0xc0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	400a      	ands	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e037      	b.n	8003ae6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a8c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a90:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f9bd 	bl	8003e48 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_DMA_Start_IT+0x20>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e04a      	b.n	8003ba4 <HAL_DMA_Start_IT+0xb6>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d13a      	bne.n	8003b96 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f950 	bl	8003dea <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 020e 	orr.w	r2, r2, #14
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e00f      	b.n	8003b84 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 020a 	orr.w	r2, r2, #10
 8003b72:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e005      	b.n	8003ba2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e02e      	b.n	8003c1c <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d008      	beq.n	8003bda <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e020      	b.n	8003c1c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 020e 	bic.w	r2, r2, #14
 8003be8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d005      	beq.n	8003c4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2204      	movs	r2, #4
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
 8003c48:	e027      	b.n	8003c9a <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 020e 	bic.w	r2, r2, #14
 8003c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
    }
  }
  return status;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d024      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x72>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01f      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0204 	bic.w	r2, r2, #4
 8003cf2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003d02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d06a      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d14:	e065      	b.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02c      	beq.n	8003d80 <HAL_DMA_IRQHandler+0xdc>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d027      	beq.n	8003d80 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 020a 	bic.w	r2, r2, #10
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2102      	movs	r1, #2
 8003d60:	fa01 f202 	lsl.w	r2, r1, r2
 8003d64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d035      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d7e:	e030      	b.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2208      	movs	r2, #8
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d028      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d023      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 020e 	bic.w	r2, r2, #14
 8003da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	2101      	movs	r1, #1
 8003db4:	fa01 f202 	lsl.w	r2, r1, r2
 8003db8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
    }
  }
}
 8003de0:	e7ff      	b.n	8003de2 <HAL_DMA_IRQHandler+0x13e>
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f202 	lsl.w	r2, r1, r2
 8003e06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d108      	bne.n	8003e2a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e28:	e007      	b.n	8003e3a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	60da      	str	r2, [r3, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x60>)
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d80f      	bhi.n	8003e7c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <DMA_CalcBaseAndBitshift+0x64>)
 8003e64:	4413      	add	r3, r2
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	009a      	lsls	r2, r3, #2
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x6c>)
 8003e78:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003e7a:	e00e      	b.n	8003e9a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x70>)
 8003e84:	4413      	add	r3, r2
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <DMA_CalcBaseAndBitshift+0x74>)
 8003e98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40020407 	.word	0x40020407
 8003eac:	bffdfff8 	.word	0xbffdfff8
 8003eb0:	cccccccd 	.word	0xcccccccd
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	bffdfbf8 	.word	0xbffdfbf8
 8003ebc:	40020400 	.word	0x40020400

08003ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ece:	e160      	b.n	8004192 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8152 	beq.w	800418c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d005      	beq.n	8003f00 <HAL_GPIO_Init+0x40>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d130      	bne.n	8003f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f36:	2201      	movs	r2, #1
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	f003 0201 	and.w	r2, r3, #1
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d017      	beq.n	8003f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d123      	bne.n	8003ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	08da      	lsrs	r2, r3, #3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3208      	adds	r2, #8
 8003fec:	6939      	ldr	r1, [r7, #16]
 8003fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0203 	and.w	r2, r3, #3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80ac 	beq.w	800418c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004034:	4b5e      	ldr	r3, [pc, #376]	; (80041b0 <HAL_GPIO_Init+0x2f0>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	4a5d      	ldr	r2, [pc, #372]	; (80041b0 <HAL_GPIO_Init+0x2f0>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6193      	str	r3, [r2, #24]
 8004040:	4b5b      	ldr	r3, [pc, #364]	; (80041b0 <HAL_GPIO_Init+0x2f0>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800404c:	4a59      	ldr	r2, [pc, #356]	; (80041b4 <HAL_GPIO_Init+0x2f4>)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	3302      	adds	r3, #2
 8004054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	220f      	movs	r2, #15
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004076:	d025      	beq.n	80040c4 <HAL_GPIO_Init+0x204>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a4f      	ldr	r2, [pc, #316]	; (80041b8 <HAL_GPIO_Init+0x2f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d01f      	beq.n	80040c0 <HAL_GPIO_Init+0x200>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a4e      	ldr	r2, [pc, #312]	; (80041bc <HAL_GPIO_Init+0x2fc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d019      	beq.n	80040bc <HAL_GPIO_Init+0x1fc>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a4d      	ldr	r2, [pc, #308]	; (80041c0 <HAL_GPIO_Init+0x300>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <HAL_GPIO_Init+0x1f8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_GPIO_Init+0x304>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00d      	beq.n	80040b4 <HAL_GPIO_Init+0x1f4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a4b      	ldr	r2, [pc, #300]	; (80041c8 <HAL_GPIO_Init+0x308>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <HAL_GPIO_Init+0x1f0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a4a      	ldr	r2, [pc, #296]	; (80041cc <HAL_GPIO_Init+0x30c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d101      	bne.n	80040ac <HAL_GPIO_Init+0x1ec>
 80040a8:	2306      	movs	r3, #6
 80040aa:	e00c      	b.n	80040c6 <HAL_GPIO_Init+0x206>
 80040ac:	2307      	movs	r3, #7
 80040ae:	e00a      	b.n	80040c6 <HAL_GPIO_Init+0x206>
 80040b0:	2305      	movs	r3, #5
 80040b2:	e008      	b.n	80040c6 <HAL_GPIO_Init+0x206>
 80040b4:	2304      	movs	r3, #4
 80040b6:	e006      	b.n	80040c6 <HAL_GPIO_Init+0x206>
 80040b8:	2303      	movs	r3, #3
 80040ba:	e004      	b.n	80040c6 <HAL_GPIO_Init+0x206>
 80040bc:	2302      	movs	r3, #2
 80040be:	e002      	b.n	80040c6 <HAL_GPIO_Init+0x206>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_GPIO_Init+0x206>
 80040c4:	2300      	movs	r3, #0
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	f002 0203 	and.w	r2, r2, #3
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	4093      	lsls	r3, r2
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040d6:	4937      	ldr	r1, [pc, #220]	; (80041b4 <HAL_GPIO_Init+0x2f4>)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	3302      	adds	r3, #2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040e4:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_GPIO_Init+0x310>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004108:	4a31      	ldr	r2, [pc, #196]	; (80041d0 <HAL_GPIO_Init+0x310>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800410e:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_GPIO_Init+0x310>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004132:	4a27      	ldr	r2, [pc, #156]	; (80041d0 <HAL_GPIO_Init+0x310>)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004138:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <HAL_GPIO_Init+0x310>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800415c:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <HAL_GPIO_Init+0x310>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004162:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_GPIO_Init+0x310>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <HAL_GPIO_Init+0x310>)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3301      	adds	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	f47f ae97 	bne.w	8003ed0 <HAL_GPIO_Init+0x10>
  }
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40010000 	.word	0x40010000
 80041b8:	48000400 	.word	0x48000400
 80041bc:	48000800 	.word	0x48000800
 80041c0:	48000c00 	.word	0x48000c00
 80041c4:	48001000 	.word	0x48001000
 80041c8:	48001400 	.word	0x48001400
 80041cc:	48001800 	.word	0x48001800
 80041d0:	40010400 	.word	0x40010400

080041d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
 80041e0:	4613      	mov	r3, r2
 80041e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041e4:	787b      	ldrb	r3, [r7, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800420e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004212:	6013      	str	r3, [r2, #0]
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40007000 	.word	0x40007000

08004224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800422a:	af00      	add	r7, sp, #0
 800422c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004230:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004234:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800423a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f001 b83a 	b.w	80052be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800424e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 816f 	beq.w	800453e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004260:	4bb5      	ldr	r3, [pc, #724]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b04      	cmp	r3, #4
 800426a:	d00c      	beq.n	8004286 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800426c:	4bb2      	ldr	r3, [pc, #712]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d15c      	bne.n	8004332 <HAL_RCC_OscConfig+0x10e>
 8004278:	4baf      	ldr	r3, [pc, #700]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d155      	bne.n	8004332 <HAL_RCC_OscConfig+0x10e>
 8004286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800429a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429e:	fab3 f383 	clz	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <HAL_RCC_OscConfig+0x94>
 80042b2:	4ba1      	ldr	r3, [pc, #644]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	e015      	b.n	80042e4 <HAL_RCC_OscConfig+0xc0>
 80042b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80042cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80042d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80042e0:	4b95      	ldr	r3, [pc, #596]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042e8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80042ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80042f0:	fa92 f2a2 	rbit	r2, r2
 80042f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80042f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80042fc:	fab2 f282 	clz	r2, r2
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	f042 0220 	orr.w	r2, r2, #32
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	f002 021f 	and.w	r2, r2, #31
 800430c:	2101      	movs	r1, #1
 800430e:	fa01 f202 	lsl.w	r2, r1, r2
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8111 	beq.w	800453c <HAL_RCC_OscConfig+0x318>
 800431a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800431e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 8108 	bne.w	800453c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f000 bfc6 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004336:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x12e>
 8004344:	4b7c      	ldr	r3, [pc, #496]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7b      	ldr	r2, [pc, #492]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 800434a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e036      	b.n	80043c0 <HAL_RCC_OscConfig+0x19c>
 8004352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004356:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x158>
 8004362:	4b75      	ldr	r3, [pc, #468]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a74      	ldr	r2, [pc, #464]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b72      	ldr	r3, [pc, #456]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a71      	ldr	r2, [pc, #452]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e021      	b.n	80043c0 <HAL_RCC_OscConfig+0x19c>
 800437c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004380:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x184>
 800438e:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a69      	ldr	r2, [pc, #420]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b67      	ldr	r3, [pc, #412]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a66      	ldr	r2, [pc, #408]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e00b      	b.n	80043c0 <HAL_RCC_OscConfig+0x19c>
 80043a8:	4b63      	ldr	r3, [pc, #396]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a62      	ldr	r2, [pc, #392]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80043ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b60      	ldr	r3, [pc, #384]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a5f      	ldr	r2, [pc, #380]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80043ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d059      	beq.n	8004484 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fd ff88 	bl	80022e4 <HAL_GetTick>
 80043d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043da:	f7fd ff83 	bl	80022e4 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d902      	bls.n	80043f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	f000 bf67 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
 80043f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004404:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d102      	bne.n	8004422 <HAL_RCC_OscConfig+0x1fe>
 800441c:	4b46      	ldr	r3, [pc, #280]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	e015      	b.n	800444e <HAL_RCC_OscConfig+0x22a>
 8004422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004426:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800443a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800443e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800444a:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004452:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004456:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800445a:	fa92 f2a2 	rbit	r2, r2
 800445e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004462:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004466:	fab2 f282 	clz	r2, r2
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	f042 0220 	orr.w	r2, r2, #32
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	f002 021f 	and.w	r2, r2, #31
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f202 	lsl.w	r2, r1, r2
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0ab      	beq.n	80043da <HAL_RCC_OscConfig+0x1b6>
 8004482:	e05c      	b.n	800453e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd ff2e 	bl	80022e4 <HAL_GetTick>
 8004488:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448e:	f7fd ff29 	bl	80022e4 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d902      	bls.n	80044a4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	f000 bf0d 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
 80044a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80044b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2b2>
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x2de>
 80044d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80044ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80044f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HAL_RCC_OscConfig+0x314>)
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004506:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800450a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800450e:	fa92 f2a2 	rbit	r2, r2
 8004512:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004516:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800451a:	fab2 f282 	clz	r2, r2
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	f042 0220 	orr.w	r2, r2, #32
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	f002 021f 	and.w	r2, r2, #31
 800452a:	2101      	movs	r1, #1
 800452c:	fa01 f202 	lsl.w	r2, r1, r2
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1ab      	bne.n	800448e <HAL_RCC_OscConfig+0x26a>
 8004536:	e002      	b.n	800453e <HAL_RCC_OscConfig+0x31a>
 8004538:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004542:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 817f 	beq.w	8004852 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004554:	4ba7      	ldr	r3, [pc, #668]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00c      	beq.n	800457a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004560:	4ba4      	ldr	r3, [pc, #656]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d173      	bne.n	8004654 <HAL_RCC_OscConfig+0x430>
 800456c:	4ba1      	ldr	r3, [pc, #644]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004578:	d16c      	bne.n	8004654 <HAL_RCC_OscConfig+0x430>
 800457a:	2302      	movs	r3, #2
 800457c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800458c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d102      	bne.n	80045aa <HAL_RCC_OscConfig+0x386>
 80045a4:	4b93      	ldr	r3, [pc, #588]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	e013      	b.n	80045d2 <HAL_RCC_OscConfig+0x3ae>
 80045aa:	2302      	movs	r3, #2
 80045ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80045b4:	fa93 f3a3 	rbit	r3, r3
 80045b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80045bc:	2302      	movs	r3, #2
 80045be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045c2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80045ce:	4b89      	ldr	r3, [pc, #548]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2202      	movs	r2, #2
 80045d4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80045d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80045dc:	fa92 f2a2 	rbit	r2, r2
 80045e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80045e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCC_OscConfig+0x3f6>
 8004604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d002      	beq.n	800461a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f000 be52 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004626:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	21f8      	movs	r1, #248	; 0xf8
 8004630:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004638:	fa91 f1a1 	rbit	r1, r1
 800463c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004640:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004644:	fab1 f181 	clz	r1, r1
 8004648:	b2c9      	uxtb	r1, r1
 800464a:	408b      	lsls	r3, r1
 800464c:	4969      	ldr	r1, [pc, #420]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004652:	e0fe      	b.n	8004852 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004658:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8088 	beq.w	8004776 <HAL_RCC_OscConfig+0x552>
 8004666:	2301      	movs	r3, #1
 8004668:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004678:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004686:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	461a      	mov	r2, r3
 800468e:	2301      	movs	r3, #1
 8004690:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fd fe27 	bl	80022e4 <HAL_GetTick>
 8004696:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800469c:	f7fd fe22 	bl	80022e4 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d902      	bls.n	80046b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f000 be06 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
 80046b2:	2302      	movs	r3, #2
 80046b4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80046c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	fab3 f383 	clz	r3, r3
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d102      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4be>
 80046dc:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	e013      	b.n	800470a <HAL_RCC_OscConfig+0x4e6>
 80046e2:	2302      	movs	r3, #2
 80046e4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046ec:	fa93 f3a3 	rbit	r3, r3
 80046f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80046f4:	2302      	movs	r3, #2
 80046f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80046fa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	2202      	movs	r2, #2
 800470c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004710:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004714:	fa92 f2a2 	rbit	r2, r2
 8004718:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800471c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004720:	fab2 f282 	clz	r2, r2
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	f042 0220 	orr.w	r2, r2, #32
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	f002 021f 	and.w	r2, r2, #31
 8004730:	2101      	movs	r1, #1
 8004732:	fa01 f202 	lsl.w	r2, r1, r2
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0af      	beq.n	800469c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	21f8      	movs	r1, #248	; 0xf8
 8004752:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800475a:	fa91 f1a1 	rbit	r1, r1
 800475e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004762:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004766:	fab1 f181 	clz	r1, r1
 800476a:	b2c9      	uxtb	r1, r1
 800476c:	408b      	lsls	r3, r1
 800476e:	4921      	ldr	r1, [pc, #132]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
 8004774:	e06d      	b.n	8004852 <HAL_RCC_OscConfig+0x62e>
 8004776:	2301      	movs	r3, #1
 8004778:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004780:	fa93 f3a3 	rbit	r3, r3
 8004784:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004788:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800478c:	fab3 f383 	clz	r3, r3
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004796:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	461a      	mov	r2, r3
 800479e:	2300      	movs	r3, #0
 80047a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fd fd9f 	bl	80022e4 <HAL_GetTick>
 80047a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fd fd9a 	bl	80022e4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d902      	bls.n	80047c2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	f000 bd7e 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
 80047c2:	2302      	movs	r3, #2
 80047c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80047cc:	fa93 f3a3 	rbit	r3, r3
 80047d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80047d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5d4>
 80047ec:	4b01      	ldr	r3, [pc, #4]	; (80047f4 <HAL_RCC_OscConfig+0x5d0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	e016      	b.n	8004820 <HAL_RCC_OscConfig+0x5fc>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	2302      	movs	r3, #2
 80047fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800480a:	2302      	movs	r3, #2
 800480c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004810:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800481c:	4bbf      	ldr	r3, [pc, #764]	; (8004b1c <HAL_RCC_OscConfig+0x8f8>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2202      	movs	r2, #2
 8004822:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004826:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800482a:	fa92 f2a2 	rbit	r2, r2
 800482e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004832:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004836:	fab2 f282 	clz	r2, r2
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	f042 0220 	orr.w	r2, r2, #32
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	f002 021f 	and.w	r2, r2, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f202 	lsl.w	r2, r1, r2
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1ac      	bne.n	80047ac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004856:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8113 	beq.w	8004a8e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800486c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d07c      	beq.n	8004972 <HAL_RCC_OscConfig+0x74e>
 8004878:	2301      	movs	r3, #1
 800487a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	fa93 f3a3 	rbit	r3, r3
 8004886:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800488a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	4ba2      	ldr	r3, [pc, #648]	; (8004b20 <HAL_RCC_OscConfig+0x8fc>)
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	461a      	mov	r2, r3
 800489e:	2301      	movs	r3, #1
 80048a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a2:	f7fd fd1f 	bl	80022e4 <HAL_GetTick>
 80048a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fd fd1a 	bl	80022e4 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d902      	bls.n	80048c2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	f000 bcfe 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
 80048c2:	2302      	movs	r3, #2
 80048c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048cc:	fa93 f2a3 	rbit	r2, r3
 80048d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048e2:	2202      	movs	r2, #2
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	fa93 f2a3 	rbit	r2, r3
 80048f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004902:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004906:	2202      	movs	r2, #2
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	fa93 f2a3 	rbit	r2, r3
 8004918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800491c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004920:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004922:	4b7e      	ldr	r3, [pc, #504]	; (8004b1c <HAL_RCC_OscConfig+0x8f8>)
 8004924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800492a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800492e:	2102      	movs	r1, #2
 8004930:	6019      	str	r1, [r3, #0]
 8004932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004936:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	fa93 f1a3 	rbit	r1, r3
 8004940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004944:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004948:	6019      	str	r1, [r3, #0]
  return result;
 800494a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	fab3 f383 	clz	r3, r3
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2101      	movs	r1, #1
 8004966:	fa01 f303 	lsl.w	r3, r1, r3
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d09d      	beq.n	80048ac <HAL_RCC_OscConfig+0x688>
 8004970:	e08d      	b.n	8004a8e <HAL_RCC_OscConfig+0x86a>
 8004972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004976:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004982:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	fa93 f2a3 	rbit	r2, r3
 800498c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004990:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004994:	601a      	str	r2, [r3, #0]
  return result;
 8004996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800499a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800499e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_RCC_OscConfig+0x8fc>)
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	461a      	mov	r2, r3
 80049b0:	2300      	movs	r3, #0
 80049b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b4:	f7fd fc96 	bl	80022e4 <HAL_GetTick>
 80049b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049be:	f7fd fc91 	bl	80022e4 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d902      	bls.n	80049d4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	f000 bc75 	b.w	80052be <HAL_RCC_OscConfig+0x109a>
 80049d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80049dc:	2202      	movs	r2, #2
 80049de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	fa93 f2a3 	rbit	r2, r3
 80049ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a00:	2202      	movs	r2, #2
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	fa93 f2a3 	rbit	r2, r3
 8004a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a24:	2202      	movs	r2, #2
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fa93 f2a3 	rbit	r2, r3
 8004a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a40:	4b36      	ldr	r3, [pc, #216]	; (8004b1c <HAL_RCC_OscConfig+0x8f8>)
 8004a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	6019      	str	r1, [r3, #0]
 8004a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	fa93 f1a3 	rbit	r1, r3
 8004a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a66:	6019      	str	r1, [r3, #0]
  return result;
 8004a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2101      	movs	r1, #1
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d197      	bne.n	80049be <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 81a5 	beq.w	8004dee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aaa:	4b1c      	ldr	r3, [pc, #112]	; (8004b1c <HAL_RCC_OscConfig+0x8f8>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d116      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_RCC_OscConfig+0x8f8>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_RCC_OscConfig+0x8f8>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	61d3      	str	r3, [r2, #28]
 8004ac2:	4b16      	ldr	r3, [pc, #88]	; (8004b1c <HAL_RCC_OscConfig+0x8f8>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004adc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <HAL_RCC_OscConfig+0x900>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d121      	bne.n	8004b34 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <HAL_RCC_OscConfig+0x900>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <HAL_RCC_OscConfig+0x900>)
 8004af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004afc:	f7fd fbf2 	bl	80022e4 <HAL_GetTick>
 8004b00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	e010      	b.n	8004b28 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b06:	f7fd fbed 	bl	80022e4 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d908      	bls.n	8004b28 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e3d1      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	10908120 	.word	0x10908120
 8004b24:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	4b8d      	ldr	r3, [pc, #564]	; (8004d60 <HAL_RCC_OscConfig+0xb3c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0e8      	beq.n	8004b06 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d106      	bne.n	8004b52 <HAL_RCC_OscConfig+0x92e>
 8004b44:	4b87      	ldr	r3, [pc, #540]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	4a86      	ldr	r2, [pc, #536]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6213      	str	r3, [r2, #32]
 8004b50:	e035      	b.n	8004bbe <HAL_RCC_OscConfig+0x99a>
 8004b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x958>
 8004b62:	4b80      	ldr	r3, [pc, #512]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	4a7f      	ldr	r2, [pc, #508]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	6213      	str	r3, [r2, #32]
 8004b6e:	4b7d      	ldr	r3, [pc, #500]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4a7c      	ldr	r2, [pc, #496]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b74:	f023 0304 	bic.w	r3, r3, #4
 8004b78:	6213      	str	r3, [r2, #32]
 8004b7a:	e020      	b.n	8004bbe <HAL_RCC_OscConfig+0x99a>
 8004b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x982>
 8004b8c:	4b75      	ldr	r3, [pc, #468]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4a74      	ldr	r2, [pc, #464]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6213      	str	r3, [r2, #32]
 8004b98:	4b72      	ldr	r3, [pc, #456]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4a71      	ldr	r2, [pc, #452]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6213      	str	r3, [r2, #32]
 8004ba4:	e00b      	b.n	8004bbe <HAL_RCC_OscConfig+0x99a>
 8004ba6:	4b6f      	ldr	r3, [pc, #444]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	4a6e      	ldr	r2, [pc, #440]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	6213      	str	r3, [r2, #32]
 8004bb2:	4b6c      	ldr	r3, [pc, #432]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4a6b      	ldr	r2, [pc, #428]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8081 	beq.w	8004cd2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd0:	f7fd fb88 	bl	80022e4 <HAL_GetTick>
 8004bd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	e00b      	b.n	8004bf2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fd fb83 	bl	80022e4 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e365      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
 8004bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bf6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	fa93 f2a3 	rbit	r2, r3
 8004c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c1a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c1e:	2202      	movs	r2, #2
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	fa93 f2a3 	rbit	r2, r3
 8004c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c38:	601a      	str	r2, [r3, #0]
  return result;
 8004c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004c42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	fab3 f383 	clz	r3, r3
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f043 0302 	orr.w	r3, r3, #2
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d102      	bne.n	8004c5e <HAL_RCC_OscConfig+0xa3a>
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	e013      	b.n	8004c86 <HAL_RCC_OscConfig+0xa62>
 8004c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004c66:	2202      	movs	r2, #2
 8004c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	fa93 f2a3 	rbit	r2, r3
 8004c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c7c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c8a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004c8e:	2102      	movs	r1, #2
 8004c90:	6011      	str	r1, [r2, #0]
 8004c92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	fa92 f1a2 	rbit	r1, r2
 8004ca0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ca4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004ca8:	6011      	str	r1, [r2, #0]
  return result;
 8004caa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cae:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	fab2 f282 	clz	r2, r2
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	f002 021f 	and.w	r2, r2, #31
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d084      	beq.n	8004bda <HAL_RCC_OscConfig+0x9b6>
 8004cd0:	e083      	b.n	8004dda <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd2:	f7fd fb07 	bl	80022e4 <HAL_GetTick>
 8004cd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd fb02 	bl	80022e4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e2e4      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
 8004cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	fa93 f2a3 	rbit	r2, r3
 8004d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d20:	2202      	movs	r2, #2
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	fa93 f2a3 	rbit	r2, r3
 8004d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d3a:	601a      	str	r2, [r3, #0]
  return result;
 8004d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d40:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d106      	bne.n	8004d68 <HAL_RCC_OscConfig+0xb44>
 8004d5a:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <HAL_RCC_OscConfig+0xb40>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	e017      	b.n	8004d90 <HAL_RCC_OscConfig+0xb6c>
 8004d60:	40007000 	.word	0x40007000
 8004d64:	40021000 	.word	0x40021000
 8004d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d70:	2202      	movs	r2, #2
 8004d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	fa93 f2a3 	rbit	r2, r3
 8004d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d86:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	4bb3      	ldr	r3, [pc, #716]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004d98:	2102      	movs	r1, #2
 8004d9a:	6011      	str	r1, [r2, #0]
 8004d9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004da0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	fa92 f1a2 	rbit	r1, r2
 8004daa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dae:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004db2:	6011      	str	r1, [r2, #0]
  return result;
 8004db4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004db8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	fab2 f282 	clz	r2, r2
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	f002 021f 	and.w	r2, r2, #31
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d180      	bne.n	8004cdc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dda:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b9e      	ldr	r3, [pc, #632]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4a9d      	ldr	r2, [pc, #628]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 825e 	beq.w	80052bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e00:	4b96      	ldr	r3, [pc, #600]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	f000 821f 	beq.w	800524c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	f040 8170 	bne.w	8005100 <HAL_RCC_OscConfig+0xedc>
 8004e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e24:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	fa93 f2a3 	rbit	r2, r3
 8004e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e44:	601a      	str	r2, [r3, #0]
  return result;
 8004e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e4a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004e4e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	fab3 f383 	clz	r3, r3
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	461a      	mov	r2, r3
 8004e62:	2300      	movs	r3, #0
 8004e64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e66:	f7fd fa3d 	bl	80022e4 <HAL_GetTick>
 8004e6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e6e:	e009      	b.n	8004e84 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fa38 	bl	80022e4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e21c      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
 8004e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e88:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	fa93 f2a3 	rbit	r2, r3
 8004ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ea4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004ea8:	601a      	str	r2, [r3, #0]
  return result;
 8004eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004eb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d102      	bne.n	8004ece <HAL_RCC_OscConfig+0xcaa>
 8004ec8:	4b64      	ldr	r3, [pc, #400]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	e027      	b.n	8004f1e <HAL_RCC_OscConfig+0xcfa>
 8004ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ed2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f2a3 	rbit	r2, r3
 8004eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f06:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	fa93 f2a3 	rbit	r2, r3
 8004f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f14:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	4b50      	ldr	r3, [pc, #320]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f22:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f2a:	6011      	str	r1, [r2, #0]
 8004f2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f30:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	fa92 f1a2 	rbit	r1, r2
 8004f3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f3e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004f42:	6011      	str	r1, [r2, #0]
  return result;
 8004f44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f48:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	fab2 f282 	clz	r2, r2
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	f042 0220 	orr.w	r2, r2, #32
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	f002 021f 	and.w	r2, r2, #31
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f202 	lsl.w	r2, r1, r2
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d182      	bne.n	8004e70 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6a:	4b3c      	ldr	r3, [pc, #240]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f023 020f 	bic.w	r2, r3, #15
 8004f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	4937      	ldr	r1, [pc, #220]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6a19      	ldr	r1, [r3, #32]
 8004f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	492d      	ldr	r1, [pc, #180]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	604b      	str	r3, [r1, #4]
 8004fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fbe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	fa93 f2a3 	rbit	r2, r3
 8004fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fcc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004fd0:	601a      	str	r2, [r3, #0]
  return result;
 8004fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fd6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004fda:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fdc:	fab3 f383 	clz	r3, r3
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fe6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	461a      	mov	r2, r3
 8004fee:	2301      	movs	r3, #1
 8004ff0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff2:	f7fd f977 	bl	80022e4 <HAL_GetTick>
 8004ff6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ffa:	e009      	b.n	8005010 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffc:	f7fd f972 	bl	80022e4 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e156      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
 8005010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005014:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800501c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005022:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	fa93 f2a3 	rbit	r2, r3
 800502c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005030:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005034:	601a      	str	r2, [r3, #0]
  return result;
 8005036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800503a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800503e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005040:	fab3 f383 	clz	r3, r3
 8005044:	b2db      	uxtb	r3, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <HAL_RCC_OscConfig+0xe3c>
 8005054:	4b01      	ldr	r3, [pc, #4]	; (800505c <HAL_RCC_OscConfig+0xe38>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	e02a      	b.n	80050b0 <HAL_RCC_OscConfig+0xe8c>
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005064:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800506c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005072:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	fa93 f2a3 	rbit	r2, r3
 800507c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005080:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800508a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800508e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005098:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	fa93 f2a3 	rbit	r2, r3
 80050a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	4b86      	ldr	r3, [pc, #536]	; (80052c8 <HAL_RCC_OscConfig+0x10a4>)
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050bc:	6011      	str	r1, [r2, #0]
 80050be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	fa92 f1a2 	rbit	r1, r2
 80050cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050d0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80050d4:	6011      	str	r1, [r2, #0]
  return result;
 80050d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050da:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	fab2 f282 	clz	r2, r2
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	f042 0220 	orr.w	r2, r2, #32
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	f002 021f 	and.w	r2, r2, #31
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f202 	lsl.w	r2, r1, r2
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f43f af7f 	beq.w	8004ffc <HAL_RCC_OscConfig+0xdd8>
 80050fe:	e0dd      	b.n	80052bc <HAL_RCC_OscConfig+0x1098>
 8005100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005104:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800510c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005112:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	fa93 f2a3 	rbit	r2, r3
 800511c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005120:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005124:	601a      	str	r2, [r3, #0]
  return result;
 8005126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800512a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800512e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005130:	fab3 f383 	clz	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800513a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005146:	f7fd f8cd 	bl	80022e4 <HAL_GetTick>
 800514a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514e:	e009      	b.n	8005164 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005150:	f7fd f8c8 	bl	80022e4 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0ac      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
 8005164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005168:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800516c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005176:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fa93 f2a3 	rbit	r2, r3
 8005180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005184:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005188:	601a      	str	r2, [r3, #0]
  return result;
 800518a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800518e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005192:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005194:	fab3 f383 	clz	r3, r3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d102      	bne.n	80051ae <HAL_RCC_OscConfig+0xf8a>
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCC_OscConfig+0x10a4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	e027      	b.n	80051fe <HAL_RCC_OscConfig+0xfda>
 80051ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	fa93 f2a3 	rbit	r2, r3
 80051ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80051dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	fa93 f2a3 	rbit	r2, r3
 80051f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051f4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	4b33      	ldr	r3, [pc, #204]	; (80052c8 <HAL_RCC_OscConfig+0x10a4>)
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005202:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005206:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800520a:	6011      	str	r1, [r2, #0]
 800520c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005210:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	fa92 f1a2 	rbit	r1, r2
 800521a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800521e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005222:	6011      	str	r1, [r2, #0]
  return result;
 8005224:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005228:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	fab2 f282 	clz	r2, r2
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	f042 0220 	orr.w	r2, r2, #32
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	f002 021f 	and.w	r2, r2, #31
 800523e:	2101      	movs	r1, #1
 8005240:	fa01 f202 	lsl.w	r2, r1, r2
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d182      	bne.n	8005150 <HAL_RCC_OscConfig+0xf2c>
 800524a:	e037      	b.n	80052bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005250:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e02e      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_RCC_OscConfig+0x10a4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <HAL_RCC_OscConfig+0x10a4>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005270:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005274:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800527c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	429a      	cmp	r2, r3
 8005286:	d117      	bne.n	80052b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005288:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800528c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005294:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800529c:	429a      	cmp	r2, r3
 800529e:	d10b      	bne.n	80052b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80052a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021000 	.word	0x40021000

080052cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b09e      	sub	sp, #120	; 0x78
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e162      	b.n	80055aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052e4:	4b90      	ldr	r3, [pc, #576]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d910      	bls.n	8005314 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b8d      	ldr	r3, [pc, #564]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 0207 	bic.w	r2, r3, #7
 80052fa:	498b      	ldr	r1, [pc, #556]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b89      	ldr	r3, [pc, #548]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e14a      	b.n	80055aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005320:	4b82      	ldr	r3, [pc, #520]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	497f      	ldr	r1, [pc, #508]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80dc 	beq.w	80054f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d13c      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xf6>
 8005348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800534c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d102      	bne.n	8005372 <HAL_RCC_ClockConfig+0xa6>
 800536c:	4b6f      	ldr	r3, [pc, #444]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	e00f      	b.n	8005392 <HAL_RCC_ClockConfig+0xc6>
 8005372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005376:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800537a:	fa93 f3a3 	rbit	r3, r3
 800537e:	667b      	str	r3, [r7, #100]	; 0x64
 8005380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005384:	663b      	str	r3, [r7, #96]	; 0x60
 8005386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005388:	fa93 f3a3 	rbit	r3, r3
 800538c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800538e:	4b67      	ldr	r3, [pc, #412]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005396:	65ba      	str	r2, [r7, #88]	; 0x58
 8005398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800539a:	fa92 f2a2 	rbit	r2, r2
 800539e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80053a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053a2:	fab2 f282 	clz	r2, r2
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	f042 0220 	orr.w	r2, r2, #32
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	f002 021f 	and.w	r2, r2, #31
 80053b2:	2101      	movs	r1, #1
 80053b4:	fa01 f202 	lsl.w	r2, r1, r2
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d17b      	bne.n	80054b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0f3      	b.n	80055aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d13c      	bne.n	8005444 <HAL_RCC_ClockConfig+0x178>
 80053ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80053d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d102      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x128>
 80053ee:	4b4f      	ldr	r3, [pc, #316]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	e00f      	b.n	8005414 <HAL_RCC_ClockConfig+0x148>
 80053f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	647b      	str	r3, [r7, #68]	; 0x44
 8005402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005406:	643b      	str	r3, [r7, #64]	; 0x40
 8005408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540a:	fa93 f3a3 	rbit	r3, r3
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005410:	4b46      	ldr	r3, [pc, #280]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005418:	63ba      	str	r2, [r7, #56]	; 0x38
 800541a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800541c:	fa92 f2a2 	rbit	r2, r2
 8005420:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005424:	fab2 f282 	clz	r2, r2
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	f042 0220 	orr.w	r2, r2, #32
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	f002 021f 	and.w	r2, r2, #31
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f202 	lsl.w	r2, r1, r2
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d13a      	bne.n	80054b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0b2      	b.n	80055aa <HAL_RCC_ClockConfig+0x2de>
 8005444:	2302      	movs	r3, #2
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	fa93 f3a3 	rbit	r3, r3
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005452:	fab3 f383 	clz	r3, r3
 8005456:	b2db      	uxtb	r3, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d102      	bne.n	800546c <HAL_RCC_ClockConfig+0x1a0>
 8005466:	4b31      	ldr	r3, [pc, #196]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	e00d      	b.n	8005488 <HAL_RCC_ClockConfig+0x1bc>
 800546c:	2302      	movs	r3, #2
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	2302      	movs	r3, #2
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	4b29      	ldr	r3, [pc, #164]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2202      	movs	r2, #2
 800548a:	61ba      	str	r2, [r7, #24]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	fa92 f2a2 	rbit	r2, r2
 8005492:	617a      	str	r2, [r7, #20]
  return result;
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	fab2 f282 	clz	r2, r2
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	f042 0220 	orr.w	r2, r2, #32
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	f002 021f 	and.w	r2, r2, #31
 80054a6:	2101      	movs	r1, #1
 80054a8:	fa01 f202 	lsl.w	r2, r1, r2
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e079      	b.n	80055aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054b6:	4b1d      	ldr	r3, [pc, #116]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f023 0203 	bic.w	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	491a      	ldr	r1, [pc, #104]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054c8:	f7fc ff0c 	bl	80022e4 <HAL_GetTick>
 80054cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d0:	f7fc ff08 	bl	80022e4 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e061      	b.n	80055aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <HAL_RCC_ClockConfig+0x260>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 020c 	and.w	r2, r3, #12
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d1eb      	bne.n	80054d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d214      	bcs.n	8005530 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 0207 	bic.w	r2, r3, #7
 800550e:	4906      	ldr	r1, [pc, #24]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b04      	ldr	r3, [pc, #16]	; (8005528 <HAL_RCC_ClockConfig+0x25c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d005      	beq.n	8005530 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e040      	b.n	80055aa <HAL_RCC_ClockConfig+0x2de>
 8005528:	40022000 	.word	0x40022000
 800552c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <HAL_RCC_ClockConfig+0x2e8>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	491a      	ldr	r1, [pc, #104]	; (80055b4 <HAL_RCC_ClockConfig+0x2e8>)
 800554a:	4313      	orrs	r3, r2
 800554c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <HAL_RCC_ClockConfig+0x2e8>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4912      	ldr	r1, [pc, #72]	; (80055b4 <HAL_RCC_ClockConfig+0x2e8>)
 800556a:	4313      	orrs	r3, r2
 800556c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800556e:	f000 f829 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8005572:	4601      	mov	r1, r0
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <HAL_RCC_ClockConfig+0x2e8>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800557c:	22f0      	movs	r2, #240	; 0xf0
 800557e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	fa92 f2a2 	rbit	r2, r2
 8005586:	60fa      	str	r2, [r7, #12]
  return result;
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	fab2 f282 	clz	r2, r2
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	40d3      	lsrs	r3, r2
 8005592:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <HAL_RCC_ClockConfig+0x2ec>)
 8005594:	5cd3      	ldrb	r3, [r2, r3]
 8005596:	fa21 f303 	lsr.w	r3, r1, r3
 800559a:	4a08      	ldr	r2, [pc, #32]	; (80055bc <HAL_RCC_ClockConfig+0x2f0>)
 800559c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800559e:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <HAL_RCC_ClockConfig+0x2f4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc fe5a 	bl	800225c <HAL_InitTick>
  
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3778      	adds	r7, #120	; 0x78
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40021000 	.word	0x40021000
 80055b8:	0800a83c 	.word	0x0800a83c
 80055bc:	2000006c 	.word	0x2000006c
 80055c0:	20000070 	.word	0x20000070

080055c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <HAL_RCC_GetSysClockFreq+0x98>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d002      	beq.n	80055f4 <HAL_RCC_GetSysClockFreq+0x30>
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d003      	beq.n	80055fa <HAL_RCC_GetSysClockFreq+0x36>
 80055f2:	e029      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <HAL_RCC_GetSysClockFreq+0x9c>)
 80055f6:	613b      	str	r3, [r7, #16]
      break;
 80055f8:	e029      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	0c9b      	lsrs	r3, r3, #18
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	4a18      	ldr	r2, [pc, #96]	; (8005664 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005604:	5cd3      	ldrb	r3, [r2, r3]
 8005606:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005608:	4b14      	ldr	r3, [pc, #80]	; (800565c <HAL_RCC_GetSysClockFreq+0x98>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	4a15      	ldr	r2, [pc, #84]	; (8005668 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005612:	5cd3      	ldrb	r3, [r2, r3]
 8005614:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005620:	4a0f      	ldr	r2, [pc, #60]	; (8005660 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	fbb2 f2f3 	udiv	r2, r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e007      	b.n	8005642 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005632:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	fbb2 f2f3 	udiv	r2, r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	613b      	str	r3, [r7, #16]
      break;
 8005646:	e002      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCC_GetSysClockFreq+0x9c>)
 800564a:	613b      	str	r3, [r7, #16]
      break;
 800564c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800564e:	693b      	ldr	r3, [r7, #16]
}
 8005650:	4618      	mov	r0, r3
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40021000 	.word	0x40021000
 8005660:	007a1200 	.word	0x007a1200
 8005664:	0800a854 	.word	0x0800a854
 8005668:	0800a864 	.word	0x0800a864

0800566c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005670:	4b03      	ldr	r3, [pc, #12]	; (8005680 <HAL_RCC_GetHCLKFreq+0x14>)
 8005672:	681b      	ldr	r3, [r3, #0]
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	2000006c 	.word	0x2000006c

08005684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800568a:	f7ff ffef 	bl	800566c <HAL_RCC_GetHCLKFreq>
 800568e:	4601      	mov	r1, r0
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005698:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800569c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	fa92 f2a2 	rbit	r2, r2
 80056a4:	603a      	str	r2, [r7, #0]
  return result;
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	fab2 f282 	clz	r2, r2
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	40d3      	lsrs	r3, r2
 80056b0:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80056b2:	5cd3      	ldrb	r3, [r2, r3]
 80056b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000
 80056c4:	0800a84c 	.word	0x0800a84c

080056c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80056ce:	f7ff ffcd 	bl	800566c <HAL_RCC_GetHCLKFreq>
 80056d2:	4601      	mov	r1, r0
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80056dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80056e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	fa92 f2a2 	rbit	r2, r2
 80056e8:	603a      	str	r2, [r7, #0]
  return result;
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	fab2 f282 	clz	r2, r2
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	40d3      	lsrs	r3, r2
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <HAL_RCC_GetPCLK2Freq+0x40>)
 80056f6:	5cd3      	ldrb	r3, [r2, r3]
 80056f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40021000 	.word	0x40021000
 8005708:	0800a84c 	.word	0x0800a84c

0800570c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b092      	sub	sp, #72	; 0x48
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80d4 	beq.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005730:	4b4e      	ldr	r3, [pc, #312]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10e      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573c:	4b4b      	ldr	r3, [pc, #300]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	4a4a      	ldr	r2, [pc, #296]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005746:	61d3      	str	r3, [r2, #28]
 8005748:	4b48      	ldr	r3, [pc, #288]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575a:	4b45      	ldr	r3, [pc, #276]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d118      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005766:	4b42      	ldr	r3, [pc, #264]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a41      	ldr	r2, [pc, #260]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800576c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005772:	f7fc fdb7 	bl	80022e4 <HAL_GetTick>
 8005776:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005778:	e008      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fc fdb3 	bl	80022e4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b64      	cmp	r3, #100	; 0x64
 8005786:	d901      	bls.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e1d6      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578c:	4b38      	ldr	r3, [pc, #224]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005798:	4b34      	ldr	r3, [pc, #208]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8084 	beq.w	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d07c      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057b8:	4b2c      	ldr	r3, [pc, #176]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	fa93 f3a3 	rbit	r3, r3
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057d2:	fab3 f383 	clz	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	4b26      	ldr	r3, [pc, #152]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	461a      	mov	r2, r3
 80057e2:	2301      	movs	r3, #1
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	fa93 f3a3 	rbit	r3, r3
 80057f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	461a      	mov	r2, r3
 8005806:	2300      	movs	r3, #0
 8005808:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800580a:	4a18      	ldr	r2, [pc, #96]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d04b      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fc fd63 	bl	80022e4 <HAL_GetTick>
 800581e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005820:	e00a      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005822:	f7fc fd5f 	bl	80022e4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e180      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005838:	2302      	movs	r3, #2
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	fa93 f3a3 	rbit	r3, r3
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	2302      	movs	r3, #2
 8005846:	623b      	str	r3, [r7, #32]
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	fa93 f3a3 	rbit	r3, r3
 800584e:	61fb      	str	r3, [r7, #28]
  return result;
 8005850:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005852:	fab3 f383 	clz	r3, r3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	095b      	lsrs	r3, r3, #5
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f043 0302 	orr.w	r3, r3, #2
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d108      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005866:	4b01      	ldr	r3, [pc, #4]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	e00d      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800586c:	40021000 	.word	0x40021000
 8005870:	40007000 	.word	0x40007000
 8005874:	10908100 	.word	0x10908100
 8005878:	2302      	movs	r3, #2
 800587a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	fa93 f3a3 	rbit	r3, r3
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	4b9a      	ldr	r3, [pc, #616]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2202      	movs	r2, #2
 800588a:	613a      	str	r2, [r7, #16]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	fa92 f2a2 	rbit	r2, r2
 8005892:	60fa      	str	r2, [r7, #12]
  return result;
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	fab2 f282 	clz	r2, r2
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	f002 021f 	and.w	r2, r2, #31
 80058a6:	2101      	movs	r1, #1
 80058a8:	fa01 f202 	lsl.w	r2, r1, r2
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0b7      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058b2:	4b8f      	ldr	r3, [pc, #572]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	498c      	ldr	r1, [pc, #560]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d105      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058cc:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4a87      	ldr	r2, [pc, #540]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058e4:	4b82      	ldr	r3, [pc, #520]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	f023 0203 	bic.w	r2, r3, #3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	497f      	ldr	r1, [pc, #508]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005902:	4b7b      	ldr	r3, [pc, #492]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4978      	ldr	r1, [pc, #480]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005910:	4313      	orrs	r3, r2
 8005912:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005920:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	4970      	ldr	r1, [pc, #448]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800592e:	4313      	orrs	r3, r2
 8005930:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800593e:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f023 0210 	bic.w	r2, r3, #16
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	4969      	ldr	r1, [pc, #420]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800595c:	4b64      	ldr	r3, [pc, #400]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	4961      	ldr	r1, [pc, #388]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800596a:	4313      	orrs	r3, r2
 800596c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800597a:	4b5d      	ldr	r3, [pc, #372]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f023 0220 	bic.w	r2, r3, #32
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	495a      	ldr	r1, [pc, #360]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005988:	4313      	orrs	r3, r2
 800598a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005998:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	4952      	ldr	r1, [pc, #328]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059b6:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	494b      	ldr	r1, [pc, #300]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059d4:	4b46      	ldr	r3, [pc, #280]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	4943      	ldr	r1, [pc, #268]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059f2:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	493c      	ldr	r1, [pc, #240]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a10:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	4934      	ldr	r1, [pc, #208]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a2e:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	492d      	ldr	r1, [pc, #180]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a58:	4925      	ldr	r1, [pc, #148]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	491e      	ldr	r1, [pc, #120]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	4916      	ldr	r1, [pc, #88]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	490f      	ldr	r1, [pc, #60]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	4907      	ldr	r1, [pc, #28]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00c      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	e002      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af6:	4913      	ldr	r1, [pc, #76]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b14:	490b      	ldr	r1, [pc, #44]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b32:	4904      	ldr	r1, [pc, #16]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3748      	adds	r7, #72	; 0x48
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000

08005b48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e073      	b.n	8005c46 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	7f5b      	ldrb	r3, [r3, #29]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fc f96a 	bl	8001e48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d055      	beq.n	8005c34 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	22ca      	movs	r2, #202	; 0xca
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2253      	movs	r2, #83	; 0x53
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f87f 	bl	8005c9c <RTC_EnterInitMode>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d12c      	bne.n	8005c02 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6899      	ldr	r1, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68d2      	ldr	r2, [r2, #12]
 8005be2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6919      	ldr	r1, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	041a      	lsls	r2, r3, #16
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f886 	bl	8005d0a <RTC_ExitInitMode>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d110      	bne.n	8005c2a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	22ff      	movs	r2, #255	; 0xff
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
 8005c32:	e001      	b.n	8005c38 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0d      	ldr	r2, [pc, #52]	; (8005c98 <HAL_RTC_WaitForSynchro+0x48>)
 8005c62:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c64:	f7fc fb3e 	bl	80022e4 <HAL_GetTick>
 8005c68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c6a:	e009      	b.n	8005c80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c6c:	f7fc fb3a 	bl	80022e4 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c7a:	d901      	bls.n	8005c80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e007      	b.n	8005c90 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0ee      	beq.n	8005c6c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	0001ff5f 	.word	0x0001ff5f

08005c9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d122      	bne.n	8005d00 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cca:	f7fc fb0b 	bl	80022e4 <HAL_GetTick>
 8005cce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cd0:	e00c      	b.n	8005cec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd2:	f7fc fb07 	bl	80022e4 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce0:	d904      	bls.n	8005cec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <RTC_EnterInitMode+0x64>
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d1e8      	bne.n	8005cd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff ff8b 	bl	8005c50 <HAL_RTC_WaitForSynchro>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2204      	movs	r2, #4
 8005d44:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e049      	b.n	8005dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc f88a 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f000 fca2 	bl	80066dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d001      	beq.n	8005e1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e047      	b.n	8005eac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a23      	ldr	r2, [pc, #140]	; (8005eb8 <HAL_TIM_Base_Start+0xb4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01d      	beq.n	8005e6a <HAL_TIM_Base_Start+0x66>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e36:	d018      	beq.n	8005e6a <HAL_TIM_Base_Start+0x66>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <HAL_TIM_Base_Start+0xb8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <HAL_TIM_Base_Start+0x66>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1e      	ldr	r2, [pc, #120]	; (8005ec0 <HAL_TIM_Base_Start+0xbc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_TIM_Base_Start+0x66>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <HAL_TIM_Base_Start+0xc0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d009      	beq.n	8005e6a <HAL_TIM_Base_Start+0x66>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <HAL_TIM_Base_Start+0xc4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIM_Base_Start+0x66>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <HAL_TIM_Base_Start+0xc8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d115      	bne.n	8005e96 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <HAL_TIM_Base_Start+0xcc>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b06      	cmp	r3, #6
 8005e7a:	d015      	beq.n	8005ea8 <HAL_TIM_Base_Start+0xa4>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e82:	d011      	beq.n	8005ea8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e94:	e008      	b.n	8005ea8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0201 	orr.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e000      	b.n	8005eaa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40000800 	.word	0x40000800
 8005ec4:	40013400 	.word	0x40013400
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	40015000 	.word	0x40015000
 8005ed0:	00010007 	.word	0x00010007

08005ed4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10f      	bne.n	8005f0c <HAL_TIM_Base_Stop+0x38>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a1a      	ldr	r2, [r3, #32]
 8005ef2:	f240 4344 	movw	r3, #1092	; 0x444
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d107      	bne.n	8005f0c <HAL_TIM_Base_Stop+0x38>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e049      	b.n	8005fc8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7fb ffd7 	bl	8001efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2202      	movs	r2, #2
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f000 fbbb 	bl	80066dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <HAL_TIM_PWM_Start+0x24>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e03c      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d109      	bne.n	800600e <HAL_TIM_PWM_Start+0x3e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	bf14      	ite	ne
 8006006:	2301      	movne	r3, #1
 8006008:	2300      	moveq	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e02f      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d109      	bne.n	8006028 <HAL_TIM_PWM_Start+0x58>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	e022      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b0c      	cmp	r3, #12
 800602c:	d109      	bne.n	8006042 <HAL_TIM_PWM_Start+0x72>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b01      	cmp	r3, #1
 8006038:	bf14      	ite	ne
 800603a:	2301      	movne	r3, #1
 800603c:	2300      	moveq	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	e015      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b10      	cmp	r3, #16
 8006046:	d109      	bne.n	800605c <HAL_TIM_PWM_Start+0x8c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	e008      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	bf14      	ite	ne
 8006068:	2301      	movne	r3, #1
 800606a:	2300      	moveq	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e0a1      	b.n	80061ba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xb6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006084:	e023      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xc6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006094:	e01b      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Start+0xd6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a4:	e013      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b0c      	cmp	r3, #12
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start+0xe6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060b4:	e00b      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_PWM_Start+0xf6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c4:	e003      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2201      	movs	r2, #1
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 ff4a 	bl	8006f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a38      	ldr	r2, [pc, #224]	; (80061c4 <HAL_TIM_PWM_Start+0x1f4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d018      	beq.n	8006118 <HAL_TIM_PWM_Start+0x148>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a37      	ldr	r2, [pc, #220]	; (80061c8 <HAL_TIM_PWM_Start+0x1f8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <HAL_TIM_PWM_Start+0x148>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a35      	ldr	r2, [pc, #212]	; (80061cc <HAL_TIM_PWM_Start+0x1fc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <HAL_TIM_PWM_Start+0x148>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a34      	ldr	r2, [pc, #208]	; (80061d0 <HAL_TIM_PWM_Start+0x200>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <HAL_TIM_PWM_Start+0x148>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a32      	ldr	r2, [pc, #200]	; (80061d4 <HAL_TIM_PWM_Start+0x204>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_TIM_PWM_Start+0x148>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a31      	ldr	r2, [pc, #196]	; (80061d8 <HAL_TIM_PWM_Start+0x208>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d101      	bne.n	800611c <HAL_TIM_PWM_Start+0x14c>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <HAL_TIM_PWM_Start+0x14e>
 800611c:	2300      	movs	r3, #0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006130:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_TIM_PWM_Start+0x1f4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d01d      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1a8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d018      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1a8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a24      	ldr	r2, [pc, #144]	; (80061dc <HAL_TIM_PWM_Start+0x20c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1a8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <HAL_TIM_PWM_Start+0x210>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1a8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1a      	ldr	r2, [pc, #104]	; (80061c8 <HAL_TIM_PWM_Start+0x1f8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1a8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a18      	ldr	r2, [pc, #96]	; (80061cc <HAL_TIM_PWM_Start+0x1fc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1a8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <HAL_TIM_PWM_Start+0x208>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d115      	bne.n	80061a4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <HAL_TIM_PWM_Start+0x214>)
 8006180:	4013      	ands	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b06      	cmp	r3, #6
 8006188:	d015      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x1e6>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006190:	d011      	beq.n	80061b6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	e008      	b.n	80061b6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40013400 	.word	0x40013400
 80061cc:	40014000 	.word	0x40014000
 80061d0:	40014400 	.word	0x40014400
 80061d4:	40014800 	.word	0x40014800
 80061d8:	40015000 	.word	0x40015000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	00010007 	.word	0x00010007

080061e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 feb8 	bl	8006f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a40      	ldr	r2, [pc, #256]	; (8006308 <HAL_TIM_PWM_Stop+0x120>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_TIM_PWM_Stop+0x54>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a3f      	ldr	r2, [pc, #252]	; (800630c <HAL_TIM_PWM_Stop+0x124>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_TIM_PWM_Stop+0x54>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a3d      	ldr	r2, [pc, #244]	; (8006310 <HAL_TIM_PWM_Stop+0x128>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIM_PWM_Stop+0x54>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a3c      	ldr	r2, [pc, #240]	; (8006314 <HAL_TIM_PWM_Stop+0x12c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_TIM_PWM_Stop+0x54>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a3a      	ldr	r2, [pc, #232]	; (8006318 <HAL_TIM_PWM_Stop+0x130>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_PWM_Stop+0x54>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a39      	ldr	r2, [pc, #228]	; (800631c <HAL_TIM_PWM_Stop+0x134>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d101      	bne.n	8006240 <HAL_TIM_PWM_Stop+0x58>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_TIM_PWM_Stop+0x5a>
 8006240:	2300      	movs	r3, #0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d017      	beq.n	8006276 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a1a      	ldr	r2, [r3, #32]
 800624c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006250:	4013      	ands	r3, r2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10f      	bne.n	8006276 <HAL_TIM_PWM_Stop+0x8e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	f240 4344 	movw	r3, #1092	; 0x444
 8006260:	4013      	ands	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_TIM_PWM_Stop+0x8e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <HAL_TIM_PWM_Stop+0xbe>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	f240 4344 	movw	r3, #1092	; 0x444
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_TIM_PWM_Stop+0xbe>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Stop+0xce>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b4:	e023      	b.n	80062fe <HAL_TIM_PWM_Stop+0x116>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Stop+0xde>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c4:	e01b      	b.n	80062fe <HAL_TIM_PWM_Stop+0x116>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d104      	bne.n	80062d6 <HAL_TIM_PWM_Stop+0xee>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d4:	e013      	b.n	80062fe <HAL_TIM_PWM_Stop+0x116>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b0c      	cmp	r3, #12
 80062da:	d104      	bne.n	80062e6 <HAL_TIM_PWM_Stop+0xfe>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062e4:	e00b      	b.n	80062fe <HAL_TIM_PWM_Stop+0x116>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b10      	cmp	r3, #16
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_PWM_Stop+0x10e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f4:	e003      	b.n	80062fe <HAL_TIM_PWM_Stop+0x116>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40013400 	.word	0x40013400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800
 800631c:	40015000 	.word	0x40015000

08006320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800633a:	2302      	movs	r3, #2
 800633c:	e0ff      	b.n	800653e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b14      	cmp	r3, #20
 800634a:	f200 80f0 	bhi.w	800652e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800634e:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	080063a9 	.word	0x080063a9
 8006358:	0800652f 	.word	0x0800652f
 800635c:	0800652f 	.word	0x0800652f
 8006360:	0800652f 	.word	0x0800652f
 8006364:	080063e9 	.word	0x080063e9
 8006368:	0800652f 	.word	0x0800652f
 800636c:	0800652f 	.word	0x0800652f
 8006370:	0800652f 	.word	0x0800652f
 8006374:	0800642b 	.word	0x0800642b
 8006378:	0800652f 	.word	0x0800652f
 800637c:	0800652f 	.word	0x0800652f
 8006380:	0800652f 	.word	0x0800652f
 8006384:	0800646b 	.word	0x0800646b
 8006388:	0800652f 	.word	0x0800652f
 800638c:	0800652f 	.word	0x0800652f
 8006390:	0800652f 	.word	0x0800652f
 8006394:	080064ad 	.word	0x080064ad
 8006398:	0800652f 	.word	0x0800652f
 800639c:	0800652f 	.word	0x0800652f
 80063a0:	0800652f 	.word	0x0800652f
 80063a4:	080064ed 	.word	0x080064ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fa3e 	bl	8006830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0208 	orr.w	r2, r2, #8
 80063c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0204 	bic.w	r2, r2, #4
 80063d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6999      	ldr	r1, [r3, #24]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	619a      	str	r2, [r3, #24]
      break;
 80063e6:	e0a5      	b.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68b9      	ldr	r1, [r7, #8]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fab8 	bl	8006964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6999      	ldr	r1, [r3, #24]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	021a      	lsls	r2, r3, #8
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	619a      	str	r2, [r3, #24]
      break;
 8006428:	e084      	b.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fb2b 	bl	8006a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0208 	orr.w	r2, r2, #8
 8006444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0204 	bic.w	r2, r2, #4
 8006454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69d9      	ldr	r1, [r3, #28]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	61da      	str	r2, [r3, #28]
      break;
 8006468:	e064      	b.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fb9d 	bl	8006bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69d9      	ldr	r1, [r3, #28]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	021a      	lsls	r2, r3, #8
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	61da      	str	r2, [r3, #28]
      break;
 80064aa:	e043      	b.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fbec 	bl	8006c90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0208 	orr.w	r2, r2, #8
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0204 	bic.w	r2, r2, #4
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064ea:	e023      	b.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fc36 	bl	8006d64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006506:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	021a      	lsls	r2, r3, #8
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800652c:	e002      	b.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
      break;
 8006532:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIM_ConfigClockSource+0x1c>
 8006560:	2302      	movs	r3, #2
 8006562:	e0b6      	b.n	80066d2 <HAL_TIM_ConfigClockSource+0x18a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800658e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a0:	d03e      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0xd8>
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a6:	f200 8087 	bhi.w	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	f000 8086 	beq.w	80066be <HAL_TIM_ConfigClockSource+0x176>
 80065b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b6:	d87f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065b8:	2b70      	cmp	r3, #112	; 0x70
 80065ba:	d01a      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0xaa>
 80065bc:	2b70      	cmp	r3, #112	; 0x70
 80065be:	d87b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065c0:	2b60      	cmp	r3, #96	; 0x60
 80065c2:	d050      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x11e>
 80065c4:	2b60      	cmp	r3, #96	; 0x60
 80065c6:	d877      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065c8:	2b50      	cmp	r3, #80	; 0x50
 80065ca:	d03c      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0xfe>
 80065cc:	2b50      	cmp	r3, #80	; 0x50
 80065ce:	d873      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d058      	beq.n	8006686 <HAL_TIM_ConfigClockSource+0x13e>
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d86f      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065d8:	2b30      	cmp	r3, #48	; 0x30
 80065da:	d064      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15e>
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d86b      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d060      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15e>
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d867      	bhi.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d05c      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15e>
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d05a      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0x15e>
 80065f0:	e062      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6899      	ldr	r1, [r3, #8]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f000 fc95 	bl	8006f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	609a      	str	r2, [r3, #8]
      break;
 800661e:	e04f      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	6899      	ldr	r1, [r3, #8]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f000 fc7e 	bl	8006f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006642:	609a      	str	r2, [r3, #8]
      break;
 8006644:	e03c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6859      	ldr	r1, [r3, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	461a      	mov	r2, r3
 8006654:	f000 fbf2 	bl	8006e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2150      	movs	r1, #80	; 0x50
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fc4b 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 8006664:	e02c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6859      	ldr	r1, [r3, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	461a      	mov	r2, r3
 8006674:	f000 fc11 	bl	8006e9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2160      	movs	r1, #96	; 0x60
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fc3b 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 8006684:	e01c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6859      	ldr	r1, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	461a      	mov	r2, r3
 8006694:	f000 fbd2 	bl	8006e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2140      	movs	r1, #64	; 0x40
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fc2b 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 80066a4:	e00c      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 fc22 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 80066b6:	e003      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
      break;
 80066bc:	e000      	b.n	80066c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a48      	ldr	r2, [pc, #288]	; (8006810 <TIM_Base_SetConfig+0x134>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d013      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fa:	d00f      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a45      	ldr	r2, [pc, #276]	; (8006814 <TIM_Base_SetConfig+0x138>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00b      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a44      	ldr	r2, [pc, #272]	; (8006818 <TIM_Base_SetConfig+0x13c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d007      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a43      	ldr	r2, [pc, #268]	; (800681c <TIM_Base_SetConfig+0x140>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a42      	ldr	r2, [pc, #264]	; (8006820 <TIM_Base_SetConfig+0x144>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d108      	bne.n	800672e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a37      	ldr	r2, [pc, #220]	; (8006810 <TIM_Base_SetConfig+0x134>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01f      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673c:	d01b      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a34      	ldr	r2, [pc, #208]	; (8006814 <TIM_Base_SetConfig+0x138>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d017      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a33      	ldr	r2, [pc, #204]	; (8006818 <TIM_Base_SetConfig+0x13c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d013      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a32      	ldr	r2, [pc, #200]	; (800681c <TIM_Base_SetConfig+0x140>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00f      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a32      	ldr	r2, [pc, #200]	; (8006824 <TIM_Base_SetConfig+0x148>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00b      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a31      	ldr	r2, [pc, #196]	; (8006828 <TIM_Base_SetConfig+0x14c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d007      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a30      	ldr	r2, [pc, #192]	; (800682c <TIM_Base_SetConfig+0x150>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_Base_SetConfig+0x9a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <TIM_Base_SetConfig+0x144>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d108      	bne.n	8006788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a18      	ldr	r2, [pc, #96]	; (8006810 <TIM_Base_SetConfig+0x134>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <TIM_Base_SetConfig+0x100>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a19      	ldr	r2, [pc, #100]	; (800681c <TIM_Base_SetConfig+0x140>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0x100>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a19      	ldr	r2, [pc, #100]	; (8006824 <TIM_Base_SetConfig+0x148>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0x100>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TIM_Base_SetConfig+0x14c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0x100>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a17      	ldr	r2, [pc, #92]	; (800682c <TIM_Base_SetConfig+0x150>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0x100>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a12      	ldr	r2, [pc, #72]	; (8006820 <TIM_Base_SetConfig+0x144>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d103      	bne.n	80067e4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d105      	bne.n	8006802 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f023 0201 	bic.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	611a      	str	r2, [r3, #16]
  }
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40013400 	.word	0x40013400
 8006820:	40015000 	.word	0x40015000
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f023 0201 	bic.w	r2, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 0302 	bic.w	r3, r3, #2
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a30      	ldr	r2, [pc, #192]	; (800694c <TIM_OC1_SetConfig+0x11c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a2f      	ldr	r2, [pc, #188]	; (8006950 <TIM_OC1_SetConfig+0x120>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2e      	ldr	r2, [pc, #184]	; (8006954 <TIM_OC1_SetConfig+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2d      	ldr	r2, [pc, #180]	; (8006958 <TIM_OC1_SetConfig+0x128>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2c      	ldr	r2, [pc, #176]	; (800695c <TIM_OC1_SetConfig+0x12c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <TIM_OC1_SetConfig+0x130>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d10c      	bne.n	80068d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0308 	bic.w	r3, r3, #8
 80068be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f023 0304 	bic.w	r3, r3, #4
 80068d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1d      	ldr	r2, [pc, #116]	; (800694c <TIM_OC1_SetConfig+0x11c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1c      	ldr	r2, [pc, #112]	; (8006950 <TIM_OC1_SetConfig+0x120>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <TIM_OC1_SetConfig+0x124>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <TIM_OC1_SetConfig+0x128>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a19      	ldr	r2, [pc, #100]	; (800695c <TIM_OC1_SetConfig+0x12c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a18      	ldr	r2, [pc, #96]	; (8006960 <TIM_OC1_SetConfig+0x130>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d111      	bne.n	8006926 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40013400 	.word	0x40013400
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800
 8006960:	40015000 	.word	0x40015000

08006964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f023 0210 	bic.w	r2, r3, #16
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0320 	bic.w	r3, r3, #32
 80069b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a2c      	ldr	r2, [pc, #176]	; (8006a74 <TIM_OC2_SetConfig+0x110>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d007      	beq.n	80069d8 <TIM_OC2_SetConfig+0x74>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a2b      	ldr	r2, [pc, #172]	; (8006a78 <TIM_OC2_SetConfig+0x114>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_OC2_SetConfig+0x74>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <TIM_OC2_SetConfig+0x118>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d10d      	bne.n	80069f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <TIM_OC2_SetConfig+0x110>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1e      	ldr	r2, [pc, #120]	; (8006a78 <TIM_OC2_SetConfig+0x114>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00f      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <TIM_OC2_SetConfig+0x11c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00b      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <TIM_OC2_SetConfig+0x120>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d007      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <TIM_OC2_SetConfig+0x124>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <TIM_OC2_SetConfig+0x118>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d113      	bne.n	8006a4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a2a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a32:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40015000 	.word	0x40015000
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2b      	ldr	r2, [pc, #172]	; (8006b98 <TIM_OC3_SetConfig+0x10c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_OC3_SetConfig+0x72>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <TIM_OC3_SetConfig+0x110>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC3_SetConfig+0x72>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a29      	ldr	r2, [pc, #164]	; (8006ba0 <TIM_OC3_SetConfig+0x114>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10d      	bne.n	8006b1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b18:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <TIM_OC3_SetConfig+0x10c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <TIM_OC3_SetConfig+0x110>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <TIM_OC3_SetConfig+0x118>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1c      	ldr	r2, [pc, #112]	; (8006ba8 <TIM_OC3_SetConfig+0x11c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <TIM_OC3_SetConfig+0x120>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC3_SetConfig+0x114>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d113      	bne.n	8006b72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40015000 	.word	0x40015000
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800

08006bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	031b      	lsls	r3, r3, #12
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a1a      	ldr	r2, [pc, #104]	; (8006c78 <TIM_OC4_SetConfig+0xc8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <TIM_OC4_SetConfig+0x8c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <TIM_OC4_SetConfig+0xcc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00f      	beq.n	8006c3c <TIM_OC4_SetConfig+0x8c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <TIM_OC4_SetConfig+0xd0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00b      	beq.n	8006c3c <TIM_OC4_SetConfig+0x8c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <TIM_OC4_SetConfig+0xd4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d007      	beq.n	8006c3c <TIM_OC4_SetConfig+0x8c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <TIM_OC4_SetConfig+0xd8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC4_SetConfig+0x8c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <TIM_OC4_SetConfig+0xdc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d109      	bne.n	8006c50 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	019b      	lsls	r3, r3, #6
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800
 8006c8c:	40015000 	.word	0x40015000

08006c90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <TIM_OC5_SetConfig+0xbc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <TIM_OC5_SetConfig+0x82>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <TIM_OC5_SetConfig+0xc0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00f      	beq.n	8006d12 <TIM_OC5_SetConfig+0x82>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a17      	ldr	r2, [pc, #92]	; (8006d54 <TIM_OC5_SetConfig+0xc4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_OC5_SetConfig+0x82>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <TIM_OC5_SetConfig+0xc8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_OC5_SetConfig+0x82>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <TIM_OC5_SetConfig+0xcc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_OC5_SetConfig+0x82>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a14      	ldr	r2, [pc, #80]	; (8006d60 <TIM_OC5_SetConfig+0xd0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d109      	bne.n	8006d26 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	621a      	str	r2, [r3, #32]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	40012c00 	.word	0x40012c00
 8006d50:	40013400 	.word	0x40013400
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40014400 	.word	0x40014400
 8006d5c:	40014800 	.word	0x40014800
 8006d60:	40015000 	.word	0x40015000

08006d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	051b      	lsls	r3, r3, #20
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <TIM_OC6_SetConfig+0xc0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <TIM_OC6_SetConfig+0x84>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <TIM_OC6_SetConfig+0xc4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00f      	beq.n	8006de8 <TIM_OC6_SetConfig+0x84>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <TIM_OC6_SetConfig+0xc8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <TIM_OC6_SetConfig+0x84>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <TIM_OC6_SetConfig+0xcc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d007      	beq.n	8006de8 <TIM_OC6_SetConfig+0x84>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <TIM_OC6_SetConfig+0xd0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_OC6_SetConfig+0x84>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <TIM_OC6_SetConfig+0xd4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d109      	bne.n	8006dfc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	029b      	lsls	r3, r3, #10
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	621a      	str	r2, [r3, #32]
}
 8006e16:	bf00      	nop
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40012c00 	.word	0x40012c00
 8006e28:	40013400 	.word	0x40013400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40014400 	.word	0x40014400
 8006e34:	40014800 	.word	0x40014800
 8006e38:	40015000 	.word	0x40015000

08006e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 030a 	bic.w	r3, r3, #10
 8006e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f023 0210 	bic.w	r2, r3, #16
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f043 0307 	orr.w	r3, r3, #7
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	021a      	lsls	r2, r3, #8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2201      	movs	r2, #1
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1a      	ldr	r2, [r3, #32]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	401a      	ands	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1a      	ldr	r2, [r3, #32]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f003 031f 	and.w	r3, r3, #31
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e06d      	b.n	80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a30      	ldr	r2, [pc, #192]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a2f      	ldr	r2, [pc, #188]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d108      	bne.n	8007024 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007018:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d01d      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007050:	d018      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1c      	ldr	r2, [pc, #112]	; (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d013      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1a      	ldr	r2, [pc, #104]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00e      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d009      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d004      	beq.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d10c      	bne.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800708a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	4313      	orrs	r3, r2
 8007094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40013400 	.word	0x40013400
 80070c4:	40015000 	.word	0x40015000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40014000 	.word	0x40014000

080070d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e06a      	b.n	80071c6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4313      	orrs	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a19      	ldr	r2, [pc, #100]	; (80071d4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d009      	beq.n	8007188 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a16      	ldr	r2, [pc, #88]	; (80071dc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d115      	bne.n	80071b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	051b      	lsls	r3, r3, #20
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40013400 	.word	0x40013400
 80071dc:	40015000 	.word	0x40015000

080071e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e040      	b.n	8007274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fa fed2 	bl	8001fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2224      	movs	r2, #36	; 0x24
 800720c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fdcc 	bl	8007dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fbf5 	bl	8007a1c <UART_SetConfig>
 8007232:	4603      	mov	r3, r0
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e01b      	b.n	8007274 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800724a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800725a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0201 	orr.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fe4b 	bl	8007f08 <UART_CheckIdleState>
 8007272:	4603      	mov	r3, r0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08a      	sub	sp, #40	; 0x28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800728e:	2b20      	cmp	r3, #32
 8007290:	d165      	bne.n	800735e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_UART_Transmit_DMA+0x22>
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e05e      	b.n	8007360 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2221      	movs	r2, #33	; 0x21
 80072c4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d027      	beq.n	800731e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	4a25      	ldr	r2, [pc, #148]	; (8007368 <HAL_UART_Transmit_DMA+0xec>)
 80072d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	4a24      	ldr	r2, [pc, #144]	; (800736c <HAL_UART_Transmit_DMA+0xf0>)
 80072dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	4a23      	ldr	r2, [pc, #140]	; (8007370 <HAL_UART_Transmit_DMA+0xf4>)
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	2200      	movs	r2, #0
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f6:	4619      	mov	r1, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3328      	adds	r3, #40	; 0x28
 80072fe:	461a      	mov	r2, r3
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	f7fc fbf4 	bl	8003aee <HAL_DMA_Start_IT>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2210      	movs	r2, #16
 8007310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e020      	b.n	8007360 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2240      	movs	r2, #64	; 0x40
 8007324:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	613b      	str	r3, [r7, #16]
   return(result);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3308      	adds	r3, #8
 8007344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007346:	623a      	str	r2, [r7, #32]
 8007348:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	69f9      	ldr	r1, [r7, #28]
 800734c:	6a3a      	ldr	r2, [r7, #32]
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	61bb      	str	r3, [r7, #24]
   return(result);
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e5      	bne.n	8007326 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	e000      	b.n	8007360 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800735e:	2302      	movs	r3, #2
  }
}
 8007360:	4618      	mov	r0, r3
 8007362:	3728      	adds	r7, #40	; 0x28
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	08008389 	.word	0x08008389
 800736c:	0800841d 	.word	0x0800841d
 8007370:	0800859d 	.word	0x0800859d

08007374 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08a      	sub	sp, #40	; 0x28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007388:	2b20      	cmp	r3, #32
 800738a:	d132      	bne.n	80073f2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <HAL_UART_Receive_DMA+0x24>
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e02b      	b.n	80073f4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d018      	beq.n	80073e2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	613b      	str	r3, [r7, #16]
   return(result);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	623b      	str	r3, [r7, #32]
 80073d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	69f9      	ldr	r1, [r7, #28]
 80073d4:	6a3a      	ldr	r2, [r7, #32]
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	61bb      	str	r3, [r7, #24]
   return(result);
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e6      	bne.n	80073b0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	461a      	mov	r2, r3
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fea3 	bl	8008134 <UART_Start_Receive_DMA>
 80073ee:	4603      	mov	r3, r0
 80073f0:	e000      	b.n	80073f4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
  }
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3728      	adds	r7, #40	; 0x28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b0ba      	sub	sp, #232	; 0xe8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007422:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007426:	f640 030f 	movw	r3, #2063	; 0x80f
 800742a:	4013      	ands	r3, r2
 800742c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007434:	2b00      	cmp	r3, #0
 8007436:	d115      	bne.n	8007464 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00f      	beq.n	8007464 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 82ab 	beq.w	80079b0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
      }
      return;
 8007462:	e2a5      	b.n	80079b0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8117 	beq.w	800769c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800746e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d106      	bne.n	8007488 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800747a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800747e:	4b85      	ldr	r3, [pc, #532]	; (8007694 <HAL_UART_IRQHandler+0x298>)
 8007480:	4013      	ands	r3, r2
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 810a 	beq.w	800769c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d011      	beq.n	80074b8 <HAL_UART_IRQHandler+0xbc>
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2201      	movs	r2, #1
 80074a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ae:	f043 0201 	orr.w	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d011      	beq.n	80074e8 <HAL_UART_IRQHandler+0xec>
 80074c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2202      	movs	r2, #2
 80074d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074de:	f043 0204 	orr.w	r2, r3, #4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d011      	beq.n	8007518 <HAL_UART_IRQHandler+0x11c>
 80074f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2204      	movs	r2, #4
 8007506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800750e:	f043 0202 	orr.w	r2, r3, #2
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d017      	beq.n	8007554 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d105      	bne.n	800753c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007534:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2208      	movs	r2, #8
 8007542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754a:	f043 0208 	orr.w	r2, r3, #8
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800755c:	2b00      	cmp	r3, #0
 800755e:	d012      	beq.n	8007586 <HAL_UART_IRQHandler+0x18a>
 8007560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757c:	f043 0220 	orr.w	r2, r3, #32
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8211 	beq.w	80079b4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00d      	beq.n	80075ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800759e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d005      	beq.n	80075de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d04f      	beq.n	800767e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fe6e 	bl	80082c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d141      	bne.n	8007676 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800760c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800761e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800762a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1d9      	bne.n	80075f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007642:	2b00      	cmp	r3, #0
 8007644:	d013      	beq.n	800766e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764a:	4a13      	ldr	r2, [pc, #76]	; (8007698 <HAL_UART_IRQHandler+0x29c>)
 800764c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007652:	4618      	mov	r0, r3
 8007654:	f7fc fae8 	bl	8003c28 <HAL_DMA_Abort_IT>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d017      	beq.n	800768e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766c:	e00f      	b.n	800768e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f9be 	bl	80079f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007674:	e00b      	b.n	800768e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9ba 	bl	80079f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	e007      	b.n	800768e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f9b6 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800768c:	e192      	b.n	80079b4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768e:	bf00      	nop
    return;
 8007690:	e190      	b.n	80079b4 <HAL_UART_IRQHandler+0x5b8>
 8007692:	bf00      	nop
 8007694:	04000120 	.word	0x04000120
 8007698:	0800861b 	.word	0x0800861b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 814b 	bne.w	800793c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8144 	beq.w	800793c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 813d 	beq.w	800793c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2210      	movs	r2, #16
 80076c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	f040 80b5 	bne.w	8007844 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8164 	beq.w	80079b8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076fa:	429a      	cmp	r2, r3
 80076fc:	f080 815c 	bcs.w	80079b8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	2b20      	cmp	r3, #32
 8007712:	f000 8086 	beq.w	8007822 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800772a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800772e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007740:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007744:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800774c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1da      	bne.n	8007716 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007784:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007788:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800778c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e1      	bne.n	8007760 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3308      	adds	r3, #8
 80077a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3308      	adds	r3, #8
 80077bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e3      	bne.n	800779c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f2:	f023 0310 	bic.w	r3, r3, #16
 80077f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007804:	65bb      	str	r3, [r7, #88]	; 0x58
 8007806:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800780a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e4      	bne.n	80077e2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781c:	4618      	mov	r0, r3
 800781e:	f7fc f9c5 	bl	8003bac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007834:	b29b      	uxth	r3, r3
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	b29b      	uxth	r3, r3
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f8e1 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007842:	e0b9      	b.n	80079b8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007850:	b29b      	uxth	r3, r3
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 80ab 	beq.w	80079bc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80a6 	beq.w	80079bc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800787e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007884:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007892:	647b      	str	r3, [r7, #68]	; 0x44
 8007894:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e4      	bne.n	8007870 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3308      	adds	r3, #8
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	623b      	str	r3, [r7, #32]
   return(result);
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	f023 0301 	bic.w	r3, r3, #1
 80078bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078ca:	633a      	str	r2, [r7, #48]	; 0x30
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e3      	bne.n	80078a6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0310 	bic.w	r3, r3, #16
 8007906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	69b9      	ldr	r1, [r7, #24]
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	617b      	str	r3, [r7, #20]
   return(result);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e4      	bne.n	80078f2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800792e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f865 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800793a:	e03f      	b.n	80079bc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <HAL_UART_IRQHandler+0x56a>
 8007948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d008      	beq.n	8007966 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800795c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fe9b 	bl	800869a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007964:	e02d      	b.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01c      	beq.n	80079c0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	4798      	blx	r3
    }
    return;
 800798e:	e017      	b.n	80079c0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d012      	beq.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00c      	beq.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fe4c 	bl	8008646 <UART_EndTransmit_IT>
    return;
 80079ae:	e008      	b.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80079b0:	bf00      	nop
 80079b2:	e006      	b.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80079b4:	bf00      	nop
 80079b6:	e004      	b.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80079b8:	bf00      	nop
 80079ba:	e002      	b.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80079bc:	bf00      	nop
 80079be:	e000      	b.n	80079c2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80079c0:	bf00      	nop
  }

}
 80079c2:	37e8      	adds	r7, #232	; 0xe8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	4b92      	ldr	r3, [pc, #584]	; (8007c90 <UART_SetConfig+0x274>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	6979      	ldr	r1, [r7, #20]
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a80      	ldr	r2, [pc, #512]	; (8007c94 <UART_SetConfig+0x278>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d120      	bne.n	8007ada <UART_SetConfig+0xbe>
 8007a98:	4b7f      	ldr	r3, [pc, #508]	; (8007c98 <UART_SetConfig+0x27c>)
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d817      	bhi.n	8007ad4 <UART_SetConfig+0xb8>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <UART_SetConfig+0x90>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007ac9 	.word	0x08007ac9
 8007ab4:	08007acf 	.word	0x08007acf
 8007ab8:	08007ac3 	.word	0x08007ac3
 8007abc:	2301      	movs	r3, #1
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e0b5      	b.n	8007c2e <UART_SetConfig+0x212>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e0b2      	b.n	8007c2e <UART_SetConfig+0x212>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	77fb      	strb	r3, [r7, #31]
 8007acc:	e0af      	b.n	8007c2e <UART_SetConfig+0x212>
 8007ace:	2308      	movs	r3, #8
 8007ad0:	77fb      	strb	r3, [r7, #31]
 8007ad2:	e0ac      	b.n	8007c2e <UART_SetConfig+0x212>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	e0a9      	b.n	8007c2e <UART_SetConfig+0x212>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a6f      	ldr	r2, [pc, #444]	; (8007c9c <UART_SetConfig+0x280>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d124      	bne.n	8007b2e <UART_SetConfig+0x112>
 8007ae4:	4b6c      	ldr	r3, [pc, #432]	; (8007c98 <UART_SetConfig+0x27c>)
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007af0:	d011      	beq.n	8007b16 <UART_SetConfig+0xfa>
 8007af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007af6:	d817      	bhi.n	8007b28 <UART_SetConfig+0x10c>
 8007af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007afc:	d011      	beq.n	8007b22 <UART_SetConfig+0x106>
 8007afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b02:	d811      	bhi.n	8007b28 <UART_SetConfig+0x10c>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <UART_SetConfig+0xf4>
 8007b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0c:	d006      	beq.n	8007b1c <UART_SetConfig+0x100>
 8007b0e:	e00b      	b.n	8007b28 <UART_SetConfig+0x10c>
 8007b10:	2300      	movs	r3, #0
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e08b      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b16:	2302      	movs	r3, #2
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e088      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e085      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b22:	2308      	movs	r3, #8
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e082      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e07f      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a5b      	ldr	r2, [pc, #364]	; (8007ca0 <UART_SetConfig+0x284>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d124      	bne.n	8007b82 <UART_SetConfig+0x166>
 8007b38:	4b57      	ldr	r3, [pc, #348]	; (8007c98 <UART_SetConfig+0x27c>)
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007b40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b44:	d011      	beq.n	8007b6a <UART_SetConfig+0x14e>
 8007b46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b4a:	d817      	bhi.n	8007b7c <UART_SetConfig+0x160>
 8007b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b50:	d011      	beq.n	8007b76 <UART_SetConfig+0x15a>
 8007b52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b56:	d811      	bhi.n	8007b7c <UART_SetConfig+0x160>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <UART_SetConfig+0x148>
 8007b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b60:	d006      	beq.n	8007b70 <UART_SetConfig+0x154>
 8007b62:	e00b      	b.n	8007b7c <UART_SetConfig+0x160>
 8007b64:	2300      	movs	r3, #0
 8007b66:	77fb      	strb	r3, [r7, #31]
 8007b68:	e061      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	77fb      	strb	r3, [r7, #31]
 8007b6e:	e05e      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b70:	2304      	movs	r3, #4
 8007b72:	77fb      	strb	r3, [r7, #31]
 8007b74:	e05b      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b76:	2308      	movs	r3, #8
 8007b78:	77fb      	strb	r3, [r7, #31]
 8007b7a:	e058      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	77fb      	strb	r3, [r7, #31]
 8007b80:	e055      	b.n	8007c2e <UART_SetConfig+0x212>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a47      	ldr	r2, [pc, #284]	; (8007ca4 <UART_SetConfig+0x288>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d124      	bne.n	8007bd6 <UART_SetConfig+0x1ba>
 8007b8c:	4b42      	ldr	r3, [pc, #264]	; (8007c98 <UART_SetConfig+0x27c>)
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b98:	d011      	beq.n	8007bbe <UART_SetConfig+0x1a2>
 8007b9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b9e:	d817      	bhi.n	8007bd0 <UART_SetConfig+0x1b4>
 8007ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ba4:	d011      	beq.n	8007bca <UART_SetConfig+0x1ae>
 8007ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007baa:	d811      	bhi.n	8007bd0 <UART_SetConfig+0x1b4>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <UART_SetConfig+0x19c>
 8007bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb4:	d006      	beq.n	8007bc4 <UART_SetConfig+0x1a8>
 8007bb6:	e00b      	b.n	8007bd0 <UART_SetConfig+0x1b4>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e037      	b.n	8007c2e <UART_SetConfig+0x212>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e034      	b.n	8007c2e <UART_SetConfig+0x212>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e031      	b.n	8007c2e <UART_SetConfig+0x212>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	77fb      	strb	r3, [r7, #31]
 8007bce:	e02e      	b.n	8007c2e <UART_SetConfig+0x212>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e02b      	b.n	8007c2e <UART_SetConfig+0x212>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a33      	ldr	r2, [pc, #204]	; (8007ca8 <UART_SetConfig+0x28c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d124      	bne.n	8007c2a <UART_SetConfig+0x20e>
 8007be0:	4b2d      	ldr	r3, [pc, #180]	; (8007c98 <UART_SetConfig+0x27c>)
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007be8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bec:	d011      	beq.n	8007c12 <UART_SetConfig+0x1f6>
 8007bee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007bf2:	d817      	bhi.n	8007c24 <UART_SetConfig+0x208>
 8007bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bf8:	d011      	beq.n	8007c1e <UART_SetConfig+0x202>
 8007bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bfe:	d811      	bhi.n	8007c24 <UART_SetConfig+0x208>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <UART_SetConfig+0x1f0>
 8007c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c08:	d006      	beq.n	8007c18 <UART_SetConfig+0x1fc>
 8007c0a:	e00b      	b.n	8007c24 <UART_SetConfig+0x208>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e00d      	b.n	8007c2e <UART_SetConfig+0x212>
 8007c12:	2302      	movs	r3, #2
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e00a      	b.n	8007c2e <UART_SetConfig+0x212>
 8007c18:	2304      	movs	r3, #4
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e007      	b.n	8007c2e <UART_SetConfig+0x212>
 8007c1e:	2308      	movs	r3, #8
 8007c20:	77fb      	strb	r3, [r7, #31]
 8007c22:	e004      	b.n	8007c2e <UART_SetConfig+0x212>
 8007c24:	2310      	movs	r3, #16
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e001      	b.n	8007c2e <UART_SetConfig+0x212>
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c36:	d16b      	bne.n	8007d10 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007c38:	7ffb      	ldrb	r3, [r7, #31]
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d838      	bhi.n	8007cb0 <UART_SetConfig+0x294>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <UART_SetConfig+0x228>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c71 	.word	0x08007c71
 8007c4c:	08007c79 	.word	0x08007c79
 8007c50:	08007cb1 	.word	0x08007cb1
 8007c54:	08007c7f 	.word	0x08007c7f
 8007c58:	08007cb1 	.word	0x08007cb1
 8007c5c:	08007cb1 	.word	0x08007cb1
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007c87 	.word	0x08007c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c68:	f7fd fd0c 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 8007c6c:	61b8      	str	r0, [r7, #24]
        break;
 8007c6e:	e024      	b.n	8007cba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c70:	f7fd fd2a 	bl	80056c8 <HAL_RCC_GetPCLK2Freq>
 8007c74:	61b8      	str	r0, [r7, #24]
        break;
 8007c76:	e020      	b.n	8007cba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c78:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <UART_SetConfig+0x290>)
 8007c7a:	61bb      	str	r3, [r7, #24]
        break;
 8007c7c:	e01d      	b.n	8007cba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c7e:	f7fd fca1 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8007c82:	61b8      	str	r0, [r7, #24]
        break;
 8007c84:	e019      	b.n	8007cba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c8a:	61bb      	str	r3, [r7, #24]
        break;
 8007c8c:	e015      	b.n	8007cba <UART_SetConfig+0x29e>
 8007c8e:	bf00      	nop
 8007c90:	efff69f3 	.word	0xefff69f3
 8007c94:	40013800 	.word	0x40013800
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40004400 	.word	0x40004400
 8007ca0:	40004800 	.word	0x40004800
 8007ca4:	40004c00 	.word	0x40004c00
 8007ca8:	40005000 	.word	0x40005000
 8007cac:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	77bb      	strb	r3, [r7, #30]
        break;
 8007cb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d073      	beq.n	8007da8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	005a      	lsls	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	441a      	add	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b0f      	cmp	r3, #15
 8007cda:	d916      	bls.n	8007d0a <UART_SetConfig+0x2ee>
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d212      	bcs.n	8007d0a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f023 030f 	bic.w	r3, r3, #15
 8007cec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	89fb      	ldrh	r3, [r7, #14]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	89fa      	ldrh	r2, [r7, #14]
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	e04e      	b.n	8007da8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	77bb      	strb	r3, [r7, #30]
 8007d0e:	e04b      	b.n	8007da8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d10:	7ffb      	ldrb	r3, [r7, #31]
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d827      	bhi.n	8007d66 <UART_SetConfig+0x34a>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <UART_SetConfig+0x300>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d41 	.word	0x08007d41
 8007d20:	08007d49 	.word	0x08007d49
 8007d24:	08007d51 	.word	0x08007d51
 8007d28:	08007d67 	.word	0x08007d67
 8007d2c:	08007d57 	.word	0x08007d57
 8007d30:	08007d67 	.word	0x08007d67
 8007d34:	08007d67 	.word	0x08007d67
 8007d38:	08007d67 	.word	0x08007d67
 8007d3c:	08007d5f 	.word	0x08007d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d40:	f7fd fca0 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 8007d44:	61b8      	str	r0, [r7, #24]
        break;
 8007d46:	e013      	b.n	8007d70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d48:	f7fd fcbe 	bl	80056c8 <HAL_RCC_GetPCLK2Freq>
 8007d4c:	61b8      	str	r0, [r7, #24]
        break;
 8007d4e:	e00f      	b.n	8007d70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d50:	4b1b      	ldr	r3, [pc, #108]	; (8007dc0 <UART_SetConfig+0x3a4>)
 8007d52:	61bb      	str	r3, [r7, #24]
        break;
 8007d54:	e00c      	b.n	8007d70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d56:	f7fd fc35 	bl	80055c4 <HAL_RCC_GetSysClockFreq>
 8007d5a:	61b8      	str	r0, [r7, #24]
        break;
 8007d5c:	e008      	b.n	8007d70 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d62:	61bb      	str	r3, [r7, #24]
        break;
 8007d64:	e004      	b.n	8007d70 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8007d6e:	bf00      	nop
    }

    if (pclk != 0U)
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d018      	beq.n	8007da8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	085a      	lsrs	r2, r3, #1
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	441a      	add	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2b0f      	cmp	r3, #15
 8007d8e:	d909      	bls.n	8007da4 <UART_SetConfig+0x388>
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d96:	d205      	bcs.n	8007da4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60da      	str	r2, [r3, #12]
 8007da2:	e001      	b.n	8007da8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007db4:	7fbb      	ldrb	r3, [r7, #30]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	007a1200 	.word	0x007a1200

08007dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	f003 0310 	and.w	r3, r3, #16
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00a      	beq.n	8007e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01a      	beq.n	8007eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ec2:	d10a      	bne.n	8007eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b098      	sub	sp, #96	; 0x60
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f18:	f7fa f9e4 	bl	80022e4 <HAL_GetTick>
 8007f1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d12e      	bne.n	8007f8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f34:	2200      	movs	r2, #0
 8007f36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f88c 	bl	8008058 <UART_WaitOnFlagUntilTimeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d021      	beq.n	8007f8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f64:	647b      	str	r3, [r7, #68]	; 0x44
 8007f66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e6      	bne.n	8007f46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e062      	b.n	8008050 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d149      	bne.n	800802c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f856 	bl	8008058 <UART_WaitOnFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d03c      	beq.n	800802c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8007fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e6      	bne.n	8007fb2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008004:	61fa      	str	r2, [r7, #28]
 8008006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	617b      	str	r3, [r7, #20]
   return(result);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e5      	bne.n	8007fe4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e011      	b.n	8008050 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2220      	movs	r2, #32
 8008030:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3758      	adds	r7, #88	; 0x58
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	4613      	mov	r3, r2
 8008066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008068:	e04f      	b.n	800810a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008070:	d04b      	beq.n	800810a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008072:	f7fa f937 	bl	80022e4 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	429a      	cmp	r2, r3
 8008080:	d302      	bcc.n	8008088 <UART_WaitOnFlagUntilTimeout+0x30>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e04e      	b.n	800812a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	d037      	beq.n	800810a <UART_WaitOnFlagUntilTimeout+0xb2>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b80      	cmp	r3, #128	; 0x80
 800809e:	d034      	beq.n	800810a <UART_WaitOnFlagUntilTimeout+0xb2>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d031      	beq.n	800810a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d110      	bne.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2208      	movs	r2, #8
 80080ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f8ff 	bl	80082c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2208      	movs	r2, #8
 80080c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e029      	b.n	800812a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e4:	d111      	bne.n	800810a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f8e5 	bl	80082c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e00f      	b.n	800812a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4013      	ands	r3, r2
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	bf0c      	ite	eq
 800811a:	2301      	moveq	r3, #1
 800811c:	2300      	movne	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	429a      	cmp	r2, r3
 8008126:	d0a0      	beq.n	800806a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b096      	sub	sp, #88	; 0x58
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	88fa      	ldrh	r2, [r7, #6]
 800814c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2222      	movs	r2, #34	; 0x22
 800815c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008164:	2b00      	cmp	r3, #0
 8008166:	d028      	beq.n	80081ba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816c:	4a3e      	ldr	r2, [pc, #248]	; (8008268 <UART_Start_Receive_DMA+0x134>)
 800816e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008174:	4a3d      	ldr	r2, [pc, #244]	; (800826c <UART_Start_Receive_DMA+0x138>)
 8008176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800817c:	4a3c      	ldr	r2, [pc, #240]	; (8008270 <UART_Start_Receive_DMA+0x13c>)
 800817e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008184:	2200      	movs	r2, #0
 8008186:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3324      	adds	r3, #36	; 0x24
 8008192:	4619      	mov	r1, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	461a      	mov	r2, r3
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	f7fb fca7 	bl	8003aee <HAL_DMA_Start_IT>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2210      	movs	r2, #16
 80081aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e051      	b.n	800825e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d018      	beq.n	80081f4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d6:	657b      	str	r3, [r7, #84]	; 0x54
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e6      	bne.n	80081c2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	653b      	str	r3, [r7, #80]	; 0x50
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3308      	adds	r3, #8
 8008212:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008214:	637a      	str	r2, [r7, #52]	; 0x34
 8008216:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800821a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e5      	bne.n	80081f4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3308      	adds	r3, #8
 800822e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	613b      	str	r3, [r7, #16]
   return(result);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3308      	adds	r3, #8
 8008246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008248:	623a      	str	r2, [r7, #32]
 800824a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	69f9      	ldr	r1, [r7, #28]
 800824e:	6a3a      	ldr	r2, [r7, #32]
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	61bb      	str	r3, [r7, #24]
   return(result);
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e5      	bne.n	8008228 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3758      	adds	r7, #88	; 0x58
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	08008439 	.word	0x08008439
 800826c:	0800855f 	.word	0x0800855f
 8008270:	0800859d 	.word	0x0800859d

08008274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008274:	b480      	push	{r7}
 8008276:	b089      	sub	sp, #36	; 0x24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	60bb      	str	r3, [r7, #8]
   return(result);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008290:	61fb      	str	r3, [r7, #28]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	61bb      	str	r3, [r7, #24]
 800829c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6979      	ldr	r1, [r7, #20]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	613b      	str	r3, [r7, #16]
   return(result);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e6      	bne.n	800827c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80082b4:	bf00      	nop
 80082b6:	3724      	adds	r7, #36	; 0x24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b095      	sub	sp, #84	; 0x54
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e6:	643b      	str	r3, [r7, #64]	; 0x40
 80082e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e6      	bne.n	80082c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3308      	adds	r3, #8
 8008300:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	61fb      	str	r3, [r7, #28]
   return(result);
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f023 0301 	bic.w	r3, r3, #1
 8008310:	64bb      	str	r3, [r7, #72]	; 0x48
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3308      	adds	r3, #8
 8008318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e5      	bne.n	80082fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008332:	2b01      	cmp	r3, #1
 8008334:	d118      	bne.n	8008368 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	60bb      	str	r3, [r7, #8]
   return(result);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f023 0310 	bic.w	r3, r3, #16
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2220      	movs	r2, #32
 800836c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800837c:	bf00      	nop
 800837e:	3754      	adds	r7, #84	; 0x54
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b090      	sub	sp, #64	; 0x40
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	2b20      	cmp	r3, #32
 800839c:	d037      	beq.n	800840e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	623b      	str	r3, [r7, #32]
   return(result);
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80083be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083c6:	633a      	str	r2, [r7, #48]	; 0x30
 80083c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e5      	bne.n	80083a6 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	69b9      	ldr	r1, [r7, #24]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	617b      	str	r3, [r7, #20]
   return(result);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e6      	bne.n	80083da <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800840c:	e002      	b.n	8008414 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800840e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008410:	f7f9 fb2c 	bl	8001a6c <HAL_UART_TxCpltCallback>
}
 8008414:	bf00      	nop
 8008416:	3740      	adds	r7, #64	; 0x40
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff facc 	bl	80079c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b09c      	sub	sp, #112	; 0x70
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	2b20      	cmp	r3, #32
 800844c:	d071      	beq.n	8008532 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800844e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008450:	2200      	movs	r2, #0
 8008452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800846a:	66bb      	str	r3, [r7, #104]	; 0x68
 800846c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008474:	65bb      	str	r3, [r7, #88]	; 0x58
 8008476:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800847a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e6      	bne.n	8008456 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	667b      	str	r3, [r7, #100]	; 0x64
 80084a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084a8:	647a      	str	r2, [r7, #68]	; 0x44
 80084aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e5      	bne.n	8008488 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	623b      	str	r3, [r7, #32]
   return(result);
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d2:	663b      	str	r3, [r7, #96]	; 0x60
 80084d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3308      	adds	r3, #8
 80084da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084dc:	633a      	str	r2, [r7, #48]	; 0x30
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e5      	bne.n	80084bc <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f2:	2220      	movs	r2, #32
 80084f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d118      	bne.n	8008532 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	60fb      	str	r3, [r7, #12]
   return(result);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f023 0310 	bic.w	r3, r3, #16
 8008514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	69b9      	ldr	r1, [r7, #24]
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	617b      	str	r3, [r7, #20]
   return(result);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e6      	bne.n	8008500 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008534:	2200      	movs	r2, #0
 8008536:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853c:	2b01      	cmp	r3, #1
 800853e:	d107      	bne.n	8008550 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008542:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008546:	4619      	mov	r1, r3
 8008548:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800854a:	f7ff fa5b 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800854e:	e002      	b.n	8008556 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008550:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008552:	f7f9 fa7b 	bl	8001a4c <HAL_UART_RxCpltCallback>
}
 8008556:	bf00      	nop
 8008558:	3770      	adds	r7, #112	; 0x70
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008576:	2b01      	cmp	r3, #1
 8008578:	d109      	bne.n	800858e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	b29b      	uxth	r3, r3
 8008584:	4619      	mov	r1, r3
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff fa3c 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800858c:	e002      	b.n	8008594 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff fa24 	bl	80079dc <HAL_UART_RxHalfCpltCallback>
}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b80      	cmp	r3, #128	; 0x80
 80085c4:	d109      	bne.n	80085da <UART_DMAError+0x3e>
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b21      	cmp	r3, #33	; 0x21
 80085ca:	d106      	bne.n	80085da <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80085d4:	6978      	ldr	r0, [r7, #20]
 80085d6:	f7ff fe4d 	bl	8008274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b40      	cmp	r3, #64	; 0x40
 80085e6:	d109      	bne.n	80085fc <UART_DMAError+0x60>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b22      	cmp	r3, #34	; 0x22
 80085ec:	d106      	bne.n	80085fc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80085f6:	6978      	ldr	r0, [r7, #20]
 80085f8:	f7ff fe62 	bl	80082c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008602:	f043 0210 	orr.w	r2, r3, #16
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800860c:	6978      	ldr	r0, [r7, #20]
 800860e:	f7ff f9ef 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008612:	bf00      	nop
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff f9d9 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b088      	sub	sp, #32
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	60bb      	str	r3, [r7, #8]
   return(result);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6979      	ldr	r1, [r7, #20]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	613b      	str	r3, [r7, #16]
   return(result);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e6      	bne.n	800864e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7f9 f9ed 	bl	8001a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008692:	bf00      	nop
 8008694:	3720      	adds	r7, #32
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <arm_rfft_fast_init_f32>:
 80086b0:	084b      	lsrs	r3, r1, #1
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	b410      	push	{r4}
 80086b6:	8201      	strh	r1, [r0, #16]
 80086b8:	8003      	strh	r3, [r0, #0]
 80086ba:	d046      	beq.n	800874a <arm_rfft_fast_init_f32+0x9a>
 80086bc:	d916      	bls.n	80086ec <arm_rfft_fast_init_f32+0x3c>
 80086be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c2:	d03c      	beq.n	800873e <arm_rfft_fast_init_f32+0x8e>
 80086c4:	d928      	bls.n	8008718 <arm_rfft_fast_init_f32+0x68>
 80086c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ca:	d01f      	beq.n	800870c <arm_rfft_fast_init_f32+0x5c>
 80086cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d0:	d112      	bne.n	80086f8 <arm_rfft_fast_init_f32+0x48>
 80086d2:	4920      	ldr	r1, [pc, #128]	; (8008754 <arm_rfft_fast_init_f32+0xa4>)
 80086d4:	4a20      	ldr	r2, [pc, #128]	; (8008758 <arm_rfft_fast_init_f32+0xa8>)
 80086d6:	4b21      	ldr	r3, [pc, #132]	; (800875c <arm_rfft_fast_init_f32+0xac>)
 80086d8:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80086dc:	8184      	strh	r4, [r0, #12]
 80086de:	6081      	str	r1, [r0, #8]
 80086e0:	6042      	str	r2, [r0, #4]
 80086e2:	6143      	str	r3, [r0, #20]
 80086e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e8:	2000      	movs	r0, #0
 80086ea:	4770      	bx	lr
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d01c      	beq.n	800872a <arm_rfft_fast_init_f32+0x7a>
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	d006      	beq.n	8008702 <arm_rfft_fast_init_f32+0x52>
 80086f4:	2b10      	cmp	r3, #16
 80086f6:	d01d      	beq.n	8008734 <arm_rfft_fast_init_f32+0x84>
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	2438      	movs	r4, #56	; 0x38
 8008704:	4916      	ldr	r1, [pc, #88]	; (8008760 <arm_rfft_fast_init_f32+0xb0>)
 8008706:	4a17      	ldr	r2, [pc, #92]	; (8008764 <arm_rfft_fast_init_f32+0xb4>)
 8008708:	4b17      	ldr	r3, [pc, #92]	; (8008768 <arm_rfft_fast_init_f32+0xb8>)
 800870a:	e7e7      	b.n	80086dc <arm_rfft_fast_init_f32+0x2c>
 800870c:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008710:	4916      	ldr	r1, [pc, #88]	; (800876c <arm_rfft_fast_init_f32+0xbc>)
 8008712:	4a17      	ldr	r2, [pc, #92]	; (8008770 <arm_rfft_fast_init_f32+0xc0>)
 8008714:	4b17      	ldr	r3, [pc, #92]	; (8008774 <arm_rfft_fast_init_f32+0xc4>)
 8008716:	e7e1      	b.n	80086dc <arm_rfft_fast_init_f32+0x2c>
 8008718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871c:	d1ec      	bne.n	80086f8 <arm_rfft_fast_init_f32+0x48>
 800871e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8008722:	4915      	ldr	r1, [pc, #84]	; (8008778 <arm_rfft_fast_init_f32+0xc8>)
 8008724:	4a15      	ldr	r2, [pc, #84]	; (800877c <arm_rfft_fast_init_f32+0xcc>)
 8008726:	4b16      	ldr	r3, [pc, #88]	; (8008780 <arm_rfft_fast_init_f32+0xd0>)
 8008728:	e7d8      	b.n	80086dc <arm_rfft_fast_init_f32+0x2c>
 800872a:	2430      	movs	r4, #48	; 0x30
 800872c:	4915      	ldr	r1, [pc, #84]	; (8008784 <arm_rfft_fast_init_f32+0xd4>)
 800872e:	4a16      	ldr	r2, [pc, #88]	; (8008788 <arm_rfft_fast_init_f32+0xd8>)
 8008730:	4b16      	ldr	r3, [pc, #88]	; (800878c <arm_rfft_fast_init_f32+0xdc>)
 8008732:	e7d3      	b.n	80086dc <arm_rfft_fast_init_f32+0x2c>
 8008734:	2414      	movs	r4, #20
 8008736:	4916      	ldr	r1, [pc, #88]	; (8008790 <arm_rfft_fast_init_f32+0xe0>)
 8008738:	4a16      	ldr	r2, [pc, #88]	; (8008794 <arm_rfft_fast_init_f32+0xe4>)
 800873a:	4b17      	ldr	r3, [pc, #92]	; (8008798 <arm_rfft_fast_init_f32+0xe8>)
 800873c:	e7ce      	b.n	80086dc <arm_rfft_fast_init_f32+0x2c>
 800873e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8008742:	4916      	ldr	r1, [pc, #88]	; (800879c <arm_rfft_fast_init_f32+0xec>)
 8008744:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <arm_rfft_fast_init_f32+0xf0>)
 8008746:	4b17      	ldr	r3, [pc, #92]	; (80087a4 <arm_rfft_fast_init_f32+0xf4>)
 8008748:	e7c8      	b.n	80086dc <arm_rfft_fast_init_f32+0x2c>
 800874a:	24d0      	movs	r4, #208	; 0xd0
 800874c:	4916      	ldr	r1, [pc, #88]	; (80087a8 <arm_rfft_fast_init_f32+0xf8>)
 800874e:	4a17      	ldr	r2, [pc, #92]	; (80087ac <arm_rfft_fast_init_f32+0xfc>)
 8008750:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <arm_rfft_fast_init_f32+0x100>)
 8008752:	e7c3      	b.n	80086dc <arm_rfft_fast_init_f32+0x2c>
 8008754:	0801967c 	.word	0x0801967c
 8008758:	0800a874 	.word	0x0800a874
 800875c:	080109e4 	.word	0x080109e4
 8008760:	0800e974 	.word	0x0800e974
 8008764:	0801b43c 	.word	0x0801b43c
 8008768:	0801d92c 	.word	0x0801d92c
 800876c:	08017364 	.word	0x08017364
 8008770:	08015264 	.word	0x08015264
 8008774:	0800e9e4 	.word	0x0800e9e4
 8008778:	0801d5bc 	.word	0x0801d5bc
 800877c:	080149e4 	.word	0x080149e4
 8008780:	0801b63c 	.word	0x0801b63c
 8008784:	0801821c 	.word	0x0801821c
 8008788:	08017264 	.word	0x08017264
 800878c:	0800e874 	.word	0x0800e874
 8008790:	08018174 	.word	0x08018174
 8008794:	080151e4 	.word	0x080151e4
 8008798:	0801819c 	.word	0x0801819c
 800879c:	0801be3c 	.word	0x0801be3c
 80087a0:	0801867c 	.word	0x0801867c
 80087a4:	0801c1bc 	.word	0x0801c1bc
 80087a8:	0801db2c 	.word	0x0801db2c
 80087ac:	0801827c 	.word	0x0801827c
 80087b0:	0801d1bc 	.word	0x0801d1bc

080087b4 <arm_rfft_fast_f32>:
 80087b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b8:	8a06      	ldrh	r6, [r0, #16]
 80087ba:	0876      	lsrs	r6, r6, #1
 80087bc:	4607      	mov	r7, r0
 80087be:	4615      	mov	r5, r2
 80087c0:	8006      	strh	r6, [r0, #0]
 80087c2:	460c      	mov	r4, r1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d15c      	bne.n	8008882 <arm_rfft_fast_f32+0xce>
 80087c8:	461a      	mov	r2, r3
 80087ca:	2301      	movs	r3, #1
 80087cc:	f000 fbe4 	bl	8008f98 <arm_cfft_f32>
 80087d0:	edd4 7a00 	vldr	s15, [r4]
 80087d4:	ed94 7a01 	vldr	s14, [r4, #4]
 80087d8:	883e      	ldrh	r6, [r7, #0]
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	ee37 7a07 	vadd.f32	s14, s14, s14
 80087e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80087e4:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 80087e8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80087ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80087f0:	3e01      	subs	r6, #1
 80087f2:	ee26 7a83 	vmul.f32	s14, s13, s6
 80087f6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80087fa:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80087fe:	ed85 7a00 	vstr	s14, [r5]
 8008802:	edc5 7a01 	vstr	s15, [r5, #4]
 8008806:	3010      	adds	r0, #16
 8008808:	f105 0210 	add.w	r2, r5, #16
 800880c:	3b08      	subs	r3, #8
 800880e:	f104 0110 	add.w	r1, r4, #16
 8008812:	ed93 7a02 	vldr	s14, [r3, #8]
 8008816:	ed51 6a02 	vldr	s13, [r1, #-8]
 800881a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800881e:	edd3 3a03 	vldr	s7, [r3, #12]
 8008822:	ed11 5a01 	vldr	s10, [r1, #-4]
 8008826:	ed50 5a01 	vldr	s11, [r0, #-4]
 800882a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800882e:	ee77 4a26 	vadd.f32	s9, s14, s13
 8008832:	ee33 4a85 	vadd.f32	s8, s7, s10
 8008836:	ee66 6a27 	vmul.f32	s13, s12, s15
 800883a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800883e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008842:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008846:	ee77 7a05 	vadd.f32	s15, s14, s10
 800884a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800884e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008852:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008856:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800885a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800885e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8008862:	3e01      	subs	r6, #1
 8008864:	ed02 7a02 	vstr	s14, [r2, #-8]
 8008868:	ed42 7a01 	vstr	s15, [r2, #-4]
 800886c:	f1a3 0308 	sub.w	r3, r3, #8
 8008870:	f101 0108 	add.w	r1, r1, #8
 8008874:	f100 0008 	add.w	r0, r0, #8
 8008878:	f102 0208 	add.w	r2, r2, #8
 800887c:	d1c9      	bne.n	8008812 <arm_rfft_fast_f32+0x5e>
 800887e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008882:	edd1 7a00 	vldr	s15, [r1]
 8008886:	edd1 6a01 	vldr	s13, [r1, #4]
 800888a:	6941      	ldr	r1, [r0, #20]
 800888c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008890:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008894:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008898:	ee27 7a23 	vmul.f32	s14, s14, s7
 800889c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80088a0:	3e01      	subs	r6, #1
 80088a2:	ed82 7a00 	vstr	s14, [r2]
 80088a6:	edc2 7a01 	vstr	s15, [r2, #4]
 80088aa:	00f0      	lsls	r0, r6, #3
 80088ac:	b3ee      	cbz	r6, 800892a <arm_rfft_fast_f32+0x176>
 80088ae:	3808      	subs	r0, #8
 80088b0:	f101 0e10 	add.w	lr, r1, #16
 80088b4:	4420      	add	r0, r4
 80088b6:	f104 0110 	add.w	r1, r4, #16
 80088ba:	f102 0c10 	add.w	ip, r2, #16
 80088be:	ed90 7a02 	vldr	s14, [r0, #8]
 80088c2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80088c6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80088ca:	ed90 4a03 	vldr	s8, [r0, #12]
 80088ce:	ed11 5a01 	vldr	s10, [r1, #-4]
 80088d2:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80088d6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80088da:	ee74 4a05 	vadd.f32	s9, s8, s10
 80088de:	ee26 3a27 	vmul.f32	s6, s12, s15
 80088e2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80088e6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80088ea:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80088ee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80088f2:	ee77 7a05 	vadd.f32	s15, s14, s10
 80088f6:	ee26 6a24 	vmul.f32	s12, s12, s9
 80088fa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80088fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008902:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8008906:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800890a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800890e:	3e01      	subs	r6, #1
 8008910:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8008914:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8008918:	f1a0 0008 	sub.w	r0, r0, #8
 800891c:	f101 0108 	add.w	r1, r1, #8
 8008920:	f10e 0e08 	add.w	lr, lr, #8
 8008924:	f10c 0c08 	add.w	ip, ip, #8
 8008928:	d1c9      	bne.n	80088be <arm_rfft_fast_f32+0x10a>
 800892a:	461a      	mov	r2, r3
 800892c:	4629      	mov	r1, r5
 800892e:	4638      	mov	r0, r7
 8008930:	2301      	movs	r3, #1
 8008932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	f000 bb2f 	b.w	8008f98 <arm_cfft_f32>
 800893a:	bf00      	nop

0800893c <arm_cfft_radix8by2_f32>:
 800893c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008940:	ed2d 8b08 	vpush	{d8-d11}
 8008944:	4607      	mov	r7, r0
 8008946:	4608      	mov	r0, r1
 8008948:	f8b7 e000 	ldrh.w	lr, [r7]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8008952:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8008956:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800895a:	f000 80b0 	beq.w	8008abe <arm_cfft_radix8by2_f32+0x182>
 800895e:	008b      	lsls	r3, r1, #2
 8008960:	3310      	adds	r3, #16
 8008962:	18c6      	adds	r6, r0, r3
 8008964:	3210      	adds	r2, #16
 8008966:	4443      	add	r3, r8
 8008968:	f100 0510 	add.w	r5, r0, #16
 800896c:	f108 0410 	add.w	r4, r8, #16
 8008970:	ed54 1a04 	vldr	s3, [r4, #-16]
 8008974:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008978:	ed13 4a04 	vldr	s8, [r3, #-16]
 800897c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008980:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008984:	ed13 5a01 	vldr	s10, [r3, #-4]
 8008988:	ed14 0a02 	vldr	s0, [r4, #-8]
 800898c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008990:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008994:	ed56 2a03 	vldr	s5, [r6, #-12]
 8008998:	ed15 6a03 	vldr	s12, [r5, #-12]
 800899c:	ed15 7a01 	vldr	s14, [r5, #-4]
 80089a0:	ed15 3a04 	vldr	s6, [r5, #-16]
 80089a4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80089a8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80089ac:	ed55 4a02 	vldr	s9, [r5, #-8]
 80089b0:	ee73 ba21 	vadd.f32	s23, s6, s3
 80089b4:	ee36 ba26 	vadd.f32	s22, s12, s13
 80089b8:	ee37 aa27 	vadd.f32	s20, s14, s15
 80089bc:	ee72 9a04 	vadd.f32	s19, s4, s8
 80089c0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80089c4:	ee31 8a05 	vadd.f32	s16, s2, s10
 80089c8:	ee74 aa80 	vadd.f32	s21, s9, s0
 80089cc:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80089d0:	ed45 ba04 	vstr	s23, [r5, #-16]
 80089d4:	ed05 ba03 	vstr	s22, [r5, #-12]
 80089d8:	ed45 aa02 	vstr	s21, [r5, #-8]
 80089dc:	ed05 aa01 	vstr	s20, [r5, #-4]
 80089e0:	ed06 8a01 	vstr	s16, [r6, #-4]
 80089e4:	ed46 9a04 	vstr	s19, [r6, #-16]
 80089e8:	ed06 9a03 	vstr	s18, [r6, #-12]
 80089ec:	ed46 8a02 	vstr	s17, [r6, #-8]
 80089f0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80089f4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80089f8:	ed12 6a03 	vldr	s12, [r2, #-12]
 80089fc:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008a00:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008a04:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008a08:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008a0c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008a10:	ee63 1a22 	vmul.f32	s3, s6, s5
 8008a14:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008a18:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008a1c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008a20:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008a24:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008a28:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008a2c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008a30:	ee72 3a63 	vsub.f32	s7, s4, s7
 8008a34:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008a38:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008a3c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008a40:	ed43 3a04 	vstr	s7, [r3, #-16]
 8008a44:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a4c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008a50:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008a54:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008a58:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008a5c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008a60:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008a64:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008a68:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8008a6c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008a70:	ee64 4a87 	vmul.f32	s9, s9, s14
 8008a74:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008a78:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008a7c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008a80:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008a84:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008a88:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008a8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008a90:	f1be 0e01 	subs.w	lr, lr, #1
 8008a94:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008a98:	f105 0510 	add.w	r5, r5, #16
 8008a9c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008aa0:	f106 0610 	add.w	r6, r6, #16
 8008aa4:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008aa8:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008aac:	f102 0210 	add.w	r2, r2, #16
 8008ab0:	f104 0410 	add.w	r4, r4, #16
 8008ab4:	f103 0310 	add.w	r3, r3, #16
 8008ab8:	f47f af5a 	bne.w	8008970 <arm_cfft_radix8by2_f32+0x34>
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	b28c      	uxth	r4, r1
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	f000 fae2 	bl	800908c <arm_radix8_butterfly_f32>
 8008ac8:	ecbd 8b08 	vpop	{d8-d11}
 8008acc:	4621      	mov	r1, r4
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad8:	f000 bad8 	b.w	800908c <arm_radix8_butterfly_f32>

08008adc <arm_cfft_radix8by4_f32>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	ed2d 8b0a 	vpush	{d8-d12}
 8008ae4:	8802      	ldrh	r2, [r0, #0]
 8008ae6:	ed91 6a00 	vldr	s12, [r1]
 8008aea:	b08f      	sub	sp, #60	; 0x3c
 8008aec:	460f      	mov	r7, r1
 8008aee:	0852      	lsrs	r2, r2, #1
 8008af0:	6841      	ldr	r1, [r0, #4]
 8008af2:	900c      	str	r0, [sp, #48]	; 0x30
 8008af4:	0093      	lsls	r3, r2, #2
 8008af6:	4638      	mov	r0, r7
 8008af8:	4418      	add	r0, r3
 8008afa:	4606      	mov	r6, r0
 8008afc:	9009      	str	r0, [sp, #36]	; 0x24
 8008afe:	4418      	add	r0, r3
 8008b00:	edd0 6a00 	vldr	s13, [r0]
 8008b04:	ed96 4a00 	vldr	s8, [r6]
 8008b08:	edd6 2a01 	vldr	s5, [r6, #4]
 8008b0c:	edd0 7a01 	vldr	s15, [r0, #4]
 8008b10:	900a      	str	r0, [sp, #40]	; 0x28
 8008b12:	ee76 5a26 	vadd.f32	s11, s12, s13
 8008b16:	4604      	mov	r4, r0
 8008b18:	4625      	mov	r5, r4
 8008b1a:	441c      	add	r4, r3
 8008b1c:	edd4 4a00 	vldr	s9, [r4]
 8008b20:	ed97 7a01 	vldr	s14, [r7, #4]
 8008b24:	ed94 3a01 	vldr	s6, [r4, #4]
 8008b28:	9401      	str	r4, [sp, #4]
 8008b2a:	ee35 5a84 	vadd.f32	s10, s11, s8
 8008b2e:	4630      	mov	r0, r6
 8008b30:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008b34:	463e      	mov	r6, r7
 8008b36:	ee15 ea10 	vmov	lr, s10
 8008b3a:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008b3e:	f846 eb08 	str.w	lr, [r6], #8
 8008b42:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008b46:	ed90 5a01 	vldr	s10, [r0, #4]
 8008b4a:	9605      	str	r6, [sp, #20]
 8008b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b50:	9e01      	ldr	r6, [sp, #4]
 8008b52:	9707      	str	r7, [sp, #28]
 8008b54:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8008b58:	ed96 2a01 	vldr	s4, [r6, #4]
 8008b5c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8008b60:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008b64:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8008b68:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008b6c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8008b70:	4604      	mov	r4, r0
 8008b72:	46a3      	mov	fp, r4
 8008b74:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008b78:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008b7c:	ee14 8a10 	vmov	r8, s8
 8008b80:	46a4      	mov	ip, r4
 8008b82:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8008b86:	ed87 7a01 	vstr	s14, [r7, #4]
 8008b8a:	f84b 8b08 	str.w	r8, [fp], #8
 8008b8e:	f1ac 0704 	sub.w	r7, ip, #4
 8008b92:	ed8c 5a01 	vstr	s10, [ip, #4]
 8008b96:	f101 0c08 	add.w	ip, r1, #8
 8008b9a:	462c      	mov	r4, r5
 8008b9c:	f8cd c010 	str.w	ip, [sp, #16]
 8008ba0:	ee15 ca90 	vmov	ip, s11
 8008ba4:	ee36 6a62 	vsub.f32	s12, s12, s5
 8008ba8:	f844 cb08 	str.w	ip, [r4], #8
 8008bac:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008bb0:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008bb4:	9406      	str	r4, [sp, #24]
 8008bb6:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008bba:	f101 0410 	add.w	r4, r1, #16
 8008bbe:	0852      	lsrs	r2, r2, #1
 8008bc0:	9402      	str	r4, [sp, #8]
 8008bc2:	ed85 6a01 	vstr	s12, [r5, #4]
 8008bc6:	462c      	mov	r4, r5
 8008bc8:	f101 0518 	add.w	r5, r1, #24
 8008bcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8008bce:	46b2      	mov	sl, r6
 8008bd0:	9503      	str	r5, [sp, #12]
 8008bd2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008bd6:	3a02      	subs	r2, #2
 8008bd8:	ee16 5a90 	vmov	r5, s13
 8008bdc:	46b6      	mov	lr, r6
 8008bde:	4630      	mov	r0, r6
 8008be0:	0852      	lsrs	r2, r2, #1
 8008be2:	f84a 5b08 	str.w	r5, [sl], #8
 8008be6:	f1a0 0604 	sub.w	r6, r0, #4
 8008bea:	edce 7a01 	vstr	s15, [lr, #4]
 8008bee:	9208      	str	r2, [sp, #32]
 8008bf0:	f000 8130 	beq.w	8008e54 <arm_cfft_radix8by4_f32+0x378>
 8008bf4:	4691      	mov	r9, r2
 8008bf6:	9a07      	ldr	r2, [sp, #28]
 8008bf8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008bfc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c00:	3b08      	subs	r3, #8
 8008c02:	f102 0510 	add.w	r5, r2, #16
 8008c06:	f101 0c20 	add.w	ip, r1, #32
 8008c0a:	f1a4 020c 	sub.w	r2, r4, #12
 8008c0e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8008c12:	4433      	add	r3, r6
 8008c14:	3410      	adds	r4, #16
 8008c16:	4650      	mov	r0, sl
 8008c18:	4659      	mov	r1, fp
 8008c1a:	ed55 3a02 	vldr	s7, [r5, #-8]
 8008c1e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8008c22:	ed91 7a00 	vldr	s14, [r1]
 8008c26:	edd0 7a00 	vldr	s15, [r0]
 8008c2a:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008c2e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8008c32:	edd0 6a01 	vldr	s13, [r0, #4]
 8008c36:	ed91 6a01 	vldr	s12, [r1, #4]
 8008c3a:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008c3e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8008c42:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008c46:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008c4a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8008c4e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008c52:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008c56:	edd1 4a01 	vldr	s9, [r1, #4]
 8008c5a:	ed90 4a01 	vldr	s8, [r0, #4]
 8008c5e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8008c62:	ee75 aa06 	vadd.f32	s21, s10, s12
 8008c66:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008c6a:	ee35 aac7 	vsub.f32	s20, s11, s14
 8008c6e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8008c72:	edd6 1a00 	vldr	s3, [r6]
 8008c76:	edd7 0a00 	vldr	s1, [r7]
 8008c7a:	ed92 4a02 	vldr	s8, [r2, #8]
 8008c7e:	edd3 3a02 	vldr	s7, [r3, #8]
 8008c82:	ed93 2a01 	vldr	s4, [r3, #4]
 8008c86:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008c8a:	edd2 2a01 	vldr	s5, [r2, #4]
 8008c8e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008c92:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008c96:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008c9a:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008c9e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008ca2:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8008ca6:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008caa:	ee18 aa90 	vmov	sl, s17
 8008cae:	f847 a908 	str.w	sl, [r7], #-8
 8008cb2:	edd2 8a01 	vldr	s17, [r2, #4]
 8008cb6:	ed93 9a01 	vldr	s18, [r3, #4]
 8008cba:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008cbe:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008cc2:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008cc6:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008cca:	edc7 8a01 	vstr	s17, [r7, #4]
 8008cce:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008cd2:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008cd6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008cda:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008cde:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008ce2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008ce6:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008cea:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008cee:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008cf2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008cf6:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008cfa:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008cfe:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008d02:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008d06:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008d0a:	ee1c aa10 	vmov	sl, s24
 8008d0e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008d12:	f841 ab08 	str.w	sl, [r1], #8
 8008d16:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008d1a:	ee3b bacb 	vsub.f32	s22, s23, s22
 8008d1e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8008d22:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008d26:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008d2a:	edc2 8a01 	vstr	s17, [r2, #4]
 8008d2e:	ed82 ba02 	vstr	s22, [r2, #8]
 8008d32:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008d36:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008d3a:	ee38 8a47 	vsub.f32	s16, s16, s14
 8008d3e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8008d42:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008d46:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008d4a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008d4e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008d52:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8008d56:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008d5a:	ee28 aa24 	vmul.f32	s20, s16, s9
 8008d5e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8008d62:	ee28 8a04 	vmul.f32	s16, s16, s8
 8008d66:	ee20 0a24 	vmul.f32	s0, s0, s9
 8008d6a:	ee63 3a84 	vmul.f32	s7, s7, s8
 8008d6e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8008d72:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008d76:	ee14 aa10 	vmov	sl, s8
 8008d7a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008d7e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008d82:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008d86:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008d8a:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008d8e:	f846 a908 	str.w	sl, [r6], #-8
 8008d92:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008d96:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008d9a:	edc6 3a01 	vstr	s7, [r6, #4]
 8008d9e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8008da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008da6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008daa:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008dae:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008db2:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008db6:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008dba:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008dbe:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008dc2:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008dc6:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008dca:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dd2:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008dd6:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008dda:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008dde:	ee15 aa90 	vmov	sl, s11
 8008de2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008de6:	f840 ab08 	str.w	sl, [r0], #8
 8008dea:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008dee:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008df2:	f1b9 0901 	subs.w	r9, r9, #1
 8008df6:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008dfa:	f105 0508 	add.w	r5, r5, #8
 8008dfe:	ed83 1a02 	vstr	s2, [r3, #8]
 8008e02:	edc3 2a01 	vstr	s5, [r3, #4]
 8008e06:	f108 0808 	add.w	r8, r8, #8
 8008e0a:	f1a2 0208 	sub.w	r2, r2, #8
 8008e0e:	f10c 0c10 	add.w	ip, ip, #16
 8008e12:	f104 0408 	add.w	r4, r4, #8
 8008e16:	f10e 0e18 	add.w	lr, lr, #24
 8008e1a:	f1a3 0308 	sub.w	r3, r3, #8
 8008e1e:	f47f aefc 	bne.w	8008c1a <arm_cfft_radix8by4_f32+0x13e>
 8008e22:	9908      	ldr	r1, [sp, #32]
 8008e24:	9802      	ldr	r0, [sp, #8]
 8008e26:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008e2a:	00cb      	lsls	r3, r1, #3
 8008e2c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008e30:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008e34:	9102      	str	r1, [sp, #8]
 8008e36:	9905      	ldr	r1, [sp, #20]
 8008e38:	4419      	add	r1, r3
 8008e3a:	9105      	str	r1, [sp, #20]
 8008e3c:	9904      	ldr	r1, [sp, #16]
 8008e3e:	4419      	add	r1, r3
 8008e40:	9104      	str	r1, [sp, #16]
 8008e42:	9906      	ldr	r1, [sp, #24]
 8008e44:	449b      	add	fp, r3
 8008e46:	4419      	add	r1, r3
 8008e48:	449a      	add	sl, r3
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	9106      	str	r1, [sp, #24]
 8008e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e52:	9303      	str	r3, [sp, #12]
 8008e54:	9a05      	ldr	r2, [sp, #20]
 8008e56:	9806      	ldr	r0, [sp, #24]
 8008e58:	ed92 4a00 	vldr	s8, [r2]
 8008e5c:	ed90 7a00 	vldr	s14, [r0]
 8008e60:	ed9b 3a00 	vldr	s6, [fp]
 8008e64:	edda 3a00 	vldr	s7, [sl]
 8008e68:	edd2 4a01 	vldr	s9, [r2, #4]
 8008e6c:	edd0 6a01 	vldr	s13, [r0, #4]
 8008e70:	ed9a 2a01 	vldr	s4, [sl, #4]
 8008e74:	eddb 7a01 	vldr	s15, [fp, #4]
 8008e78:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008e7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008e7e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8008e82:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8008e86:	ee36 5a03 	vadd.f32	s10, s12, s6
 8008e8a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008e8e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008e92:	ee34 7a47 	vsub.f32	s14, s8, s14
 8008e96:	ed82 5a00 	vstr	s10, [r2]
 8008e9a:	ed9b 5a01 	vldr	s10, [fp, #4]
 8008e9e:	edda 4a01 	vldr	s9, [sl, #4]
 8008ea2:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008ea6:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008eaa:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008eae:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8008eb2:	ed82 5a01 	vstr	s10, [r2, #4]
 8008eb6:	9a04      	ldr	r2, [sp, #16]
 8008eb8:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008ebc:	edd2 1a00 	vldr	s3, [r2]
 8008ec0:	edd2 2a01 	vldr	s5, [r2, #4]
 8008ec4:	9a02      	ldr	r2, [sp, #8]
 8008ec6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008eca:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008ece:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008ed2:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008ed6:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008eda:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008ede:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008ee2:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008ee6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008eea:	edcb 2a00 	vstr	s5, [fp]
 8008eee:	ed8b 5a01 	vstr	s10, [fp, #4]
 8008ef2:	ed92 4a01 	vldr	s8, [r2, #4]
 8008ef6:	ed92 5a00 	vldr	s10, [r2]
 8008efa:	9a03      	ldr	r2, [sp, #12]
 8008efc:	ee36 6a63 	vsub.f32	s12, s12, s7
 8008f00:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008f04:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008f08:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008f0c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008f10:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008f14:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008f18:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8008f1c:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f24:	ed80 6a01 	vstr	s12, [r0, #4]
 8008f28:	edc0 5a00 	vstr	s11, [r0]
 8008f2c:	edd2 5a01 	vldr	s11, [r2, #4]
 8008f30:	9807      	ldr	r0, [sp, #28]
 8008f32:	ee77 7a02 	vadd.f32	s15, s14, s4
 8008f36:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8008f3a:	edd2 6a00 	vldr	s13, [r2]
 8008f3e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8008f42:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008f46:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008f4a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008f4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008f52:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008f56:	edca 7a01 	vstr	s15, [sl, #4]
 8008f5a:	ed8a 7a00 	vstr	s14, [sl]
 8008f5e:	6872      	ldr	r2, [r6, #4]
 8008f60:	4621      	mov	r1, r4
 8008f62:	2304      	movs	r3, #4
 8008f64:	f000 f892 	bl	800908c <arm_radix8_butterfly_f32>
 8008f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f6a:	6872      	ldr	r2, [r6, #4]
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	2304      	movs	r3, #4
 8008f70:	f000 f88c 	bl	800908c <arm_radix8_butterfly_f32>
 8008f74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f76:	6872      	ldr	r2, [r6, #4]
 8008f78:	4621      	mov	r1, r4
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	f000 f886 	bl	800908c <arm_radix8_butterfly_f32>
 8008f80:	6872      	ldr	r2, [r6, #4]
 8008f82:	9801      	ldr	r0, [sp, #4]
 8008f84:	4621      	mov	r1, r4
 8008f86:	2304      	movs	r3, #4
 8008f88:	b00f      	add	sp, #60	; 0x3c
 8008f8a:	ecbd 8b0a 	vpop	{d8-d12}
 8008f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f92:	f000 b87b 	b.w	800908c <arm_radix8_butterfly_f32>
 8008f96:	bf00      	nop

08008f98 <arm_cfft_f32>:
 8008f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	2a01      	cmp	r2, #1
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	4617      	mov	r7, r2
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	4698      	mov	r8, r3
 8008fa6:	8805      	ldrh	r5, [r0, #0]
 8008fa8:	d054      	beq.n	8009054 <arm_cfft_f32+0xbc>
 8008faa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008fae:	d04c      	beq.n	800904a <arm_cfft_f32+0xb2>
 8008fb0:	d916      	bls.n	8008fe0 <arm_cfft_f32+0x48>
 8008fb2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008fb6:	d01a      	beq.n	8008fee <arm_cfft_f32+0x56>
 8008fb8:	d95c      	bls.n	8009074 <arm_cfft_f32+0xdc>
 8008fba:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008fbe:	d044      	beq.n	800904a <arm_cfft_f32+0xb2>
 8008fc0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008fc4:	d105      	bne.n	8008fd2 <arm_cfft_f32+0x3a>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	6872      	ldr	r2, [r6, #4]
 8008fca:	4629      	mov	r1, r5
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 f85d 	bl	800908c <arm_radix8_butterfly_f32>
 8008fd2:	f1b8 0f00 	cmp.w	r8, #0
 8008fd6:	d111      	bne.n	8008ffc <arm_cfft_f32+0x64>
 8008fd8:	2f01      	cmp	r7, #1
 8008fda:	d016      	beq.n	800900a <arm_cfft_f32+0x72>
 8008fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe0:	2d20      	cmp	r5, #32
 8008fe2:	d032      	beq.n	800904a <arm_cfft_f32+0xb2>
 8008fe4:	d94a      	bls.n	800907c <arm_cfft_f32+0xe4>
 8008fe6:	2d40      	cmp	r5, #64	; 0x40
 8008fe8:	d0ed      	beq.n	8008fc6 <arm_cfft_f32+0x2e>
 8008fea:	2d80      	cmp	r5, #128	; 0x80
 8008fec:	d1f1      	bne.n	8008fd2 <arm_cfft_f32+0x3a>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7ff fca3 	bl	800893c <arm_cfft_radix8by2_f32>
 8008ff6:	f1b8 0f00 	cmp.w	r8, #0
 8008ffa:	d0ed      	beq.n	8008fd8 <arm_cfft_f32+0x40>
 8008ffc:	68b2      	ldr	r2, [r6, #8]
 8008ffe:	89b1      	ldrh	r1, [r6, #12]
 8009000:	4620      	mov	r0, r4
 8009002:	f7f7 f8e9 	bl	80001d8 <arm_bitreversal_32>
 8009006:	2f01      	cmp	r7, #1
 8009008:	d1e8      	bne.n	8008fdc <arm_cfft_f32+0x44>
 800900a:	ee07 5a90 	vmov	s15, r5
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009016:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800901a:	2d00      	cmp	r5, #0
 800901c:	d0de      	beq.n	8008fdc <arm_cfft_f32+0x44>
 800901e:	f104 0108 	add.w	r1, r4, #8
 8009022:	2300      	movs	r3, #0
 8009024:	3301      	adds	r3, #1
 8009026:	429d      	cmp	r5, r3
 8009028:	f101 0108 	add.w	r1, r1, #8
 800902c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009030:	ed51 7a03 	vldr	s15, [r1, #-12]
 8009034:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009038:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800903c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009040:	ed41 7a03 	vstr	s15, [r1, #-12]
 8009044:	d1ee      	bne.n	8009024 <arm_cfft_f32+0x8c>
 8009046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904a:	4621      	mov	r1, r4
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff fd45 	bl	8008adc <arm_cfft_radix8by4_f32>
 8009052:	e7be      	b.n	8008fd2 <arm_cfft_f32+0x3a>
 8009054:	b1ad      	cbz	r5, 8009082 <arm_cfft_f32+0xea>
 8009056:	f101 030c 	add.w	r3, r1, #12
 800905a:	2200      	movs	r2, #0
 800905c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009060:	3201      	adds	r2, #1
 8009062:	eef1 7a67 	vneg.f32	s15, s15
 8009066:	4295      	cmp	r5, r2
 8009068:	ed43 7a02 	vstr	s15, [r3, #-8]
 800906c:	f103 0308 	add.w	r3, r3, #8
 8009070:	d1f4      	bne.n	800905c <arm_cfft_f32+0xc4>
 8009072:	e79a      	b.n	8008faa <arm_cfft_f32+0x12>
 8009074:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009078:	d0a5      	beq.n	8008fc6 <arm_cfft_f32+0x2e>
 800907a:	e7aa      	b.n	8008fd2 <arm_cfft_f32+0x3a>
 800907c:	2d10      	cmp	r5, #16
 800907e:	d0b6      	beq.n	8008fee <arm_cfft_f32+0x56>
 8009080:	e7a7      	b.n	8008fd2 <arm_cfft_f32+0x3a>
 8009082:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009086:	d894      	bhi.n	8008fb2 <arm_cfft_f32+0x1a>
 8009088:	e7aa      	b.n	8008fe0 <arm_cfft_f32+0x48>
 800908a:	bf00      	nop

0800908c <arm_radix8_butterfly_f32>:
 800908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009090:	ed2d 8b10 	vpush	{d8-d15}
 8009094:	461c      	mov	r4, r3
 8009096:	b09d      	sub	sp, #116	; 0x74
 8009098:	4603      	mov	r3, r0
 800909a:	3304      	adds	r3, #4
 800909c:	ed9f bac4 	vldr	s22, [pc, #784]	; 80093b0 <arm_radix8_butterfly_f32+0x324>
 80090a0:	9019      	str	r0, [sp, #100]	; 0x64
 80090a2:	921a      	str	r2, [sp, #104]	; 0x68
 80090a4:	468b      	mov	fp, r1
 80090a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80090a8:	468a      	mov	sl, r1
 80090aa:	46a1      	mov	r9, r4
 80090ac:	4607      	mov	r7, r0
 80090ae:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80090b2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80090b6:	eb03 0508 	add.w	r5, r3, r8
 80090ba:	195c      	adds	r4, r3, r5
 80090bc:	00de      	lsls	r6, r3, #3
 80090be:	191a      	adds	r2, r3, r4
 80090c0:	9600      	str	r6, [sp, #0]
 80090c2:	1898      	adds	r0, r3, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	9e00      	ldr	r6, [sp, #0]
 80090c8:	9311      	str	r3, [sp, #68]	; 0x44
 80090ca:	4401      	add	r1, r0
 80090cc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80090d0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80090d4:	19be      	adds	r6, r7, r6
 80090d6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80090da:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80090de:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80090e2:	9f00      	ldr	r7, [sp, #0]
 80090e4:	011b      	lsls	r3, r3, #4
 80090e6:	eb06 0e07 	add.w	lr, r6, r7
 80090ea:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80090ec:	9302      	str	r3, [sp, #8]
 80090ee:	3204      	adds	r2, #4
 80090f0:	3104      	adds	r1, #4
 80090f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090f6:	f04f 0c00 	mov.w	ip, #0
 80090fa:	edde 7a00 	vldr	s15, [lr]
 80090fe:	edd6 6a00 	vldr	s13, [r6]
 8009102:	ed95 2a00 	vldr	s4, [r5]
 8009106:	ed17 aa01 	vldr	s20, [r7, #-4]
 800910a:	edd4 4a00 	vldr	s9, [r4]
 800910e:	ed90 5a00 	vldr	s10, [r0]
 8009112:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009116:	ed51 0a01 	vldr	s1, [r1, #-4]
 800911a:	ee77 8a85 	vadd.f32	s17, s15, s10
 800911e:	ee76 3a87 	vadd.f32	s7, s13, s14
 8009122:	ee32 4a20 	vadd.f32	s8, s4, s1
 8009126:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800912a:	ee33 6a84 	vadd.f32	s12, s7, s8
 800912e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8009132:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009136:	ee75 6a86 	vadd.f32	s13, s11, s12
 800913a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800913e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8009142:	edc4 5a00 	vstr	s11, [r4]
 8009146:	ed92 9a00 	vldr	s18, [r2]
 800914a:	ed95 1a01 	vldr	s2, [r5, #4]
 800914e:	edd6 5a01 	vldr	s11, [r6, #4]
 8009152:	ed91 6a00 	vldr	s12, [r1]
 8009156:	edd7 2a00 	vldr	s5, [r7]
 800915a:	edd4 1a01 	vldr	s3, [r4, #4]
 800915e:	edde 6a01 	vldr	s13, [lr, #4]
 8009162:	edd0 9a01 	vldr	s19, [r0, #4]
 8009166:	ee72 0a60 	vsub.f32	s1, s4, s1
 800916a:	ee71 aa46 	vsub.f32	s21, s2, s12
 800916e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8009172:	ee37 0a60 	vsub.f32	s0, s14, s1
 8009176:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800917a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800917e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8009182:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8009186:	ee75 5a89 	vadd.f32	s11, s11, s18
 800918a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800918e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8009192:	ee31 6a06 	vadd.f32	s12, s2, s12
 8009196:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800919a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800919e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80091a2:	ee72 1ae1 	vsub.f32	s3, s5, s3
 80091a6:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80091aa:	ee62 2a0b 	vmul.f32	s5, s4, s22
 80091ae:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80091b2:	ee33 3a68 	vsub.f32	s6, s6, s17
 80091b6:	ee36 0a88 	vadd.f32	s0, s13, s16
 80091ba:	ee75 8a86 	vadd.f32	s17, s11, s12
 80091be:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80091c2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80091c6:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80091ca:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80091ce:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80091d2:	ee75 4a27 	vadd.f32	s9, s10, s15
 80091d6:	ee71 5a49 	vsub.f32	s11, s2, s18
 80091da:	ee31 2a09 	vadd.f32	s4, s2, s18
 80091de:	ee75 7a67 	vsub.f32	s15, s10, s15
 80091e2:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80091e6:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80091ea:	ee73 0a06 	vadd.f32	s1, s6, s12
 80091ee:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80091f2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80091f6:	ee32 8a28 	vadd.f32	s16, s4, s17
 80091fa:	ee33 6a46 	vsub.f32	s12, s6, s12
 80091fe:	ee34 4a25 	vadd.f32	s8, s8, s11
 8009202:	ee33 3a80 	vadd.f32	s6, s7, s0
 8009206:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800920a:	ee71 5a64 	vsub.f32	s11, s2, s9
 800920e:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8009212:	ee32 2a68 	vsub.f32	s4, s4, s17
 8009216:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800921a:	ee74 4a81 	vadd.f32	s9, s9, s2
 800921e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8009222:	44dc      	add	ip, fp
 8009224:	45e2      	cmp	sl, ip
 8009226:	ed87 8a00 	vstr	s16, [r7]
 800922a:	ed84 2a01 	vstr	s4, [r4, #4]
 800922e:	441f      	add	r7, r3
 8009230:	edce 0a00 	vstr	s1, [lr]
 8009234:	441c      	add	r4, r3
 8009236:	ed80 6a00 	vstr	s12, [r0]
 800923a:	edce 1a01 	vstr	s3, [lr, #4]
 800923e:	ed80 4a01 	vstr	s8, [r0, #4]
 8009242:	449e      	add	lr, r3
 8009244:	ed86 3a00 	vstr	s6, [r6]
 8009248:	4418      	add	r0, r3
 800924a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800924e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8009252:	ed85 7a00 	vstr	s14, [r5]
 8009256:	edc6 5a01 	vstr	s11, [r6, #4]
 800925a:	edc1 4a00 	vstr	s9, [r1]
 800925e:	441e      	add	r6, r3
 8009260:	edc2 6a00 	vstr	s13, [r2]
 8009264:	4419      	add	r1, r3
 8009266:	edc5 7a01 	vstr	s15, [r5, #4]
 800926a:	441a      	add	r2, r3
 800926c:	441d      	add	r5, r3
 800926e:	f63f af44 	bhi.w	80090fa <arm_radix8_butterfly_f32+0x6e>
 8009272:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009274:	2a07      	cmp	r2, #7
 8009276:	f240 81f5 	bls.w	8009664 <arm_radix8_butterfly_f32+0x5d8>
 800927a:	f108 0101 	add.w	r1, r8, #1
 800927e:	188f      	adds	r7, r1, r2
 8009280:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8009284:	19d6      	adds	r6, r2, r7
 8009286:	eb08 0c09 	add.w	ip, r8, r9
 800928a:	1994      	adds	r4, r2, r6
 800928c:	eb0c 0e09 	add.w	lr, ip, r9
 8009290:	4610      	mov	r0, r2
 8009292:	9701      	str	r7, [sp, #4]
 8009294:	4420      	add	r0, r4
 8009296:	eb0e 0709 	add.w	r7, lr, r9
 800929a:	1815      	adds	r5, r2, r0
 800929c:	eb07 0209 	add.w	r2, r7, r9
 80092a0:	9203      	str	r2, [sp, #12]
 80092a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80092a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80092aa:	440a      	add	r2, r1
 80092ac:	9900      	ldr	r1, [sp, #0]
 80092ae:	3108      	adds	r1, #8
 80092b0:	9100      	str	r1, [sp, #0]
 80092b2:	9902      	ldr	r1, [sp, #8]
 80092b4:	3108      	adds	r1, #8
 80092b6:	9102      	str	r1, [sp, #8]
 80092b8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80092ba:	00ff      	lsls	r7, r7, #3
 80092bc:	9715      	str	r7, [sp, #84]	; 0x54
 80092be:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80092c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80092c6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80092ca:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80092cc:	9903      	ldr	r1, [sp, #12]
 80092ce:	19d7      	adds	r7, r2, r7
 80092d0:	00c9      	lsls	r1, r1, #3
 80092d2:	9114      	str	r1, [sp, #80]	; 0x50
 80092d4:	9710      	str	r7, [sp, #64]	; 0x40
 80092d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80092d8:	9f00      	ldr	r7, [sp, #0]
 80092da:	19cf      	adds	r7, r1, r7
 80092dc:	970d      	str	r7, [sp, #52]	; 0x34
 80092de:	9f02      	ldr	r7, [sp, #8]
 80092e0:	19cf      	adds	r7, r1, r7
 80092e2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80092e6:	970c      	str	r7, [sp, #48]	; 0x30
 80092e8:	9f01      	ldr	r7, [sp, #4]
 80092ea:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80092ee:	3504      	adds	r5, #4
 80092f0:	3004      	adds	r0, #4
 80092f2:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80092f6:	9508      	str	r5, [sp, #32]
 80092f8:	9009      	str	r0, [sp, #36]	; 0x24
 80092fa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80092fc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80092fe:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8009302:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8009306:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800930a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800930c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009310:	1945      	adds	r5, r0, r5
 8009312:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009316:	460f      	mov	r7, r1
 8009318:	3404      	adds	r4, #4
 800931a:	4641      	mov	r1, r8
 800931c:	1841      	adds	r1, r0, r1
 800931e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8009322:	940a      	str	r4, [sp, #40]	; 0x28
 8009324:	eb00 0c06 	add.w	ip, r0, r6
 8009328:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800932c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800932e:	9506      	str	r5, [sp, #24]
 8009330:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009332:	9105      	str	r1, [sp, #20]
 8009334:	4639      	mov	r1, r7
 8009336:	1905      	adds	r5, r0, r4
 8009338:	3108      	adds	r1, #8
 800933a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800933c:	9507      	str	r5, [sp, #28]
 800933e:	910f      	str	r1, [sp, #60]	; 0x3c
 8009340:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8009344:	2101      	movs	r1, #1
 8009346:	eb00 0e06 	add.w	lr, r0, r6
 800934a:	9518      	str	r5, [sp, #96]	; 0x60
 800934c:	9404      	str	r4, [sp, #16]
 800934e:	9103      	str	r1, [sp, #12]
 8009350:	4620      	mov	r0, r4
 8009352:	4689      	mov	r9, r1
 8009354:	9e06      	ldr	r6, [sp, #24]
 8009356:	ed90 fa00 	vldr	s30, [r0]
 800935a:	edd6 7a01 	vldr	s15, [r6, #4]
 800935e:	edd0 ba01 	vldr	s23, [r0, #4]
 8009362:	edcd 7a00 	vstr	s15, [sp]
 8009366:	a80d      	add	r0, sp, #52	; 0x34
 8009368:	edde 7a01 	vldr	s15, [lr, #4]
 800936c:	9c05      	ldr	r4, [sp, #20]
 800936e:	9d07      	ldr	r5, [sp, #28]
 8009370:	edd2 fa00 	vldr	s31, [r2]
 8009374:	ed92 ca01 	vldr	s24, [r2, #4]
 8009378:	edcd 7a01 	vstr	s15, [sp, #4]
 800937c:	c807      	ldmia	r0, {r0, r1, r2}
 800937e:	eddc 7a01 	vldr	s15, [ip, #4]
 8009382:	edd4 ea00 	vldr	s29, [r4]
 8009386:	ed95 ea00 	vldr	s28, [r5]
 800938a:	edd6 da00 	vldr	s27, [r6]
 800938e:	edd4 aa01 	vldr	s21, [r4, #4]
 8009392:	ed95 aa01 	vldr	s20, [r5, #4]
 8009396:	ed9e da00 	vldr	s26, [lr]
 800939a:	eddc ca00 	vldr	s25, [ip]
 800939e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80093a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80093a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80093a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80093aa:	edcd 7a02 	vstr	s15, [sp, #8]
 80093ae:	e001      	b.n	80093b4 <arm_radix8_butterfly_f32+0x328>
 80093b0:	3f3504f3 	.word	0x3f3504f3
 80093b4:	ed16 6a01 	vldr	s12, [r6, #-4]
 80093b8:	ed91 5a00 	vldr	s10, [r1]
 80093bc:	ed57 9a01 	vldr	s19, [r7, #-4]
 80093c0:	edd5 7a00 	vldr	s15, [r5]
 80093c4:	ed18 7a01 	vldr	s14, [r8, #-4]
 80093c8:	edd2 3a00 	vldr	s7, [r2]
 80093cc:	ed94 3a00 	vldr	s6, [r4]
 80093d0:	ed90 2a00 	vldr	s4, [r0]
 80093d4:	ed92 0a01 	vldr	s0, [r2, #4]
 80093d8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80093dc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80093e0:	ee33 4a29 	vadd.f32	s8, s6, s19
 80093e4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80093e8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80093ec:	ee71 6a24 	vadd.f32	s13, s2, s9
 80093f0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80093f4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80093f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093fc:	ed82 6a00 	vstr	s12, [r2]
 8009400:	edd5 8a01 	vldr	s17, [r5, #4]
 8009404:	ed90 9a01 	vldr	s18, [r0, #4]
 8009408:	edd6 2a00 	vldr	s5, [r6]
 800940c:	ed98 7a00 	vldr	s14, [r8]
 8009410:	edd4 0a01 	vldr	s1, [r4, #4]
 8009414:	ed91 6a01 	vldr	s12, [r1, #4]
 8009418:	edd7 5a00 	vldr	s11, [r7]
 800941c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009420:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009424:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009428:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800942c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009430:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009434:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009438:	ee79 2a22 	vadd.f32	s5, s18, s5
 800943c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8009440:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009444:	ee35 5a29 	vadd.f32	s10, s10, s19
 8009448:	ee72 7a67 	vsub.f32	s15, s4, s15
 800944c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009450:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8009454:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009458:	ee32 9a08 	vadd.f32	s18, s4, s16
 800945c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009460:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009464:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009468:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800946c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8009470:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009474:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009478:	ee30 6a46 	vsub.f32	s12, s0, s12
 800947c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8009480:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009484:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009488:	ee32 7a64 	vsub.f32	s14, s4, s9
 800948c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8009490:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009494:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009498:	ee75 8a85 	vadd.f32	s17, s11, s10
 800949c:	ee74 3a22 	vadd.f32	s7, s8, s5
 80094a0:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80094a4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80094a8:	ee79 1a41 	vsub.f32	s3, s18, s2
 80094ac:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80094b0:	ee76 5a43 	vsub.f32	s11, s12, s6
 80094b4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80094b8:	ee74 4a82 	vadd.f32	s9, s9, s4
 80094bc:	ee30 4a60 	vsub.f32	s8, s0, s1
 80094c0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80094c4:	ee30 0a80 	vadd.f32	s0, s1, s0
 80094c8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80094cc:	ee33 6a06 	vadd.f32	s12, s6, s12
 80094d0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80094d4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80094d8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80094dc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80094e0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80094e4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80094e8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80094ec:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80094f0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80094f4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80094f8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80094fc:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009500:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009504:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8009508:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800950c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8009510:	ed82 1a01 	vstr	s2, [r2, #4]
 8009514:	ee77 3a63 	vsub.f32	s7, s14, s7
 8009518:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800951c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009520:	ed81 3a00 	vstr	s6, [r1]
 8009524:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009528:	ee32 2a05 	vadd.f32	s4, s4, s10
 800952c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009530:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8009534:	ee67 2a22 	vmul.f32	s5, s14, s5
 8009538:	ee64 1a00 	vmul.f32	s3, s8, s0
 800953c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009540:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8009544:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8009548:	ee64 8a28 	vmul.f32	s17, s8, s17
 800954c:	ed9d 4a00 	vldr	s8, [sp]
 8009550:	edc1 6a01 	vstr	s13, [r1, #4]
 8009554:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009558:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800955c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8009560:	ee24 4a25 	vmul.f32	s8, s8, s11
 8009564:	ee30 7a87 	vadd.f32	s14, s1, s14
 8009568:	ee74 4a84 	vadd.f32	s9, s9, s8
 800956c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8009570:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8009574:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8009578:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800957c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009580:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8009584:	ee75 1a21 	vadd.f32	s3, s10, s3
 8009588:	ee30 0a68 	vsub.f32	s0, s0, s17
 800958c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009590:	ee70 0a84 	vadd.f32	s1, s1, s8
 8009594:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009598:	44d9      	add	r9, fp
 800959a:	45ca      	cmp	sl, r9
 800959c:	ed84 9a00 	vstr	s18, [r4]
 80095a0:	edc4 3a01 	vstr	s7, [r4, #4]
 80095a4:	441a      	add	r2, r3
 80095a6:	ed07 7a01 	vstr	s14, [r7, #-4]
 80095aa:	edc7 2a00 	vstr	s5, [r7]
 80095ae:	4419      	add	r1, r3
 80095b0:	ed80 2a00 	vstr	s4, [r0]
 80095b4:	ed80 8a01 	vstr	s16, [r0, #4]
 80095b8:	441c      	add	r4, r3
 80095ba:	ed48 1a01 	vstr	s3, [r8, #-4]
 80095be:	ed88 0a00 	vstr	s0, [r8]
 80095c2:	441f      	add	r7, r3
 80095c4:	ed46 4a01 	vstr	s9, [r6, #-4]
 80095c8:	4418      	add	r0, r3
 80095ca:	edc6 9a00 	vstr	s19, [r6]
 80095ce:	4498      	add	r8, r3
 80095d0:	edc5 0a00 	vstr	s1, [r5]
 80095d4:	ed85 6a01 	vstr	s12, [r5, #4]
 80095d8:	441e      	add	r6, r3
 80095da:	441d      	add	r5, r3
 80095dc:	f63f aeea 	bhi.w	80093b4 <arm_radix8_butterfly_f32+0x328>
 80095e0:	9a03      	ldr	r2, [sp, #12]
 80095e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80095e4:	3201      	adds	r2, #1
 80095e6:	4611      	mov	r1, r2
 80095e8:	9203      	str	r2, [sp, #12]
 80095ea:	9a04      	ldr	r2, [sp, #16]
 80095ec:	4402      	add	r2, r0
 80095ee:	9204      	str	r2, [sp, #16]
 80095f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80095f2:	9a05      	ldr	r2, [sp, #20]
 80095f4:	4402      	add	r2, r0
 80095f6:	9205      	str	r2, [sp, #20]
 80095f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80095fa:	9a07      	ldr	r2, [sp, #28]
 80095fc:	4402      	add	r2, r0
 80095fe:	9207      	str	r2, [sp, #28]
 8009600:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009602:	9a06      	ldr	r2, [sp, #24]
 8009604:	4402      	add	r2, r0
 8009606:	9206      	str	r2, [sp, #24]
 8009608:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800960a:	4496      	add	lr, r2
 800960c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800960e:	4494      	add	ip, r2
 8009610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009612:	3208      	adds	r2, #8
 8009614:	920f      	str	r2, [sp, #60]	; 0x3c
 8009616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009618:	3208      	adds	r2, #8
 800961a:	920e      	str	r2, [sp, #56]	; 0x38
 800961c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800961e:	3208      	adds	r2, #8
 8009620:	920d      	str	r2, [sp, #52]	; 0x34
 8009622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009624:	3208      	adds	r2, #8
 8009626:	920c      	str	r2, [sp, #48]	; 0x30
 8009628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800962a:	3208      	adds	r2, #8
 800962c:	920b      	str	r2, [sp, #44]	; 0x2c
 800962e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009630:	3208      	adds	r2, #8
 8009632:	920a      	str	r2, [sp, #40]	; 0x28
 8009634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009636:	3208      	adds	r2, #8
 8009638:	9209      	str	r2, [sp, #36]	; 0x24
 800963a:	9a08      	ldr	r2, [sp, #32]
 800963c:	3208      	adds	r2, #8
 800963e:	9208      	str	r2, [sp, #32]
 8009640:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009642:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009644:	4288      	cmp	r0, r1
 8009646:	4622      	mov	r2, r4
 8009648:	d007      	beq.n	800965a <arm_radix8_butterfly_f32+0x5ce>
 800964a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800964c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009650:	4621      	mov	r1, r4
 8009652:	4401      	add	r1, r0
 8009654:	9110      	str	r1, [sp, #64]	; 0x40
 8009656:	9804      	ldr	r0, [sp, #16]
 8009658:	e67c      	b.n	8009354 <arm_radix8_butterfly_f32+0x2c8>
 800965a:	4683      	mov	fp, r0
 800965c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8009660:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009662:	e524      	b.n	80090ae <arm_radix8_butterfly_f32+0x22>
 8009664:	b01d      	add	sp, #116	; 0x74
 8009666:	ecbd 8b10 	vpop	{d8-d15}
 800966a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800966e:	bf00      	nop

08009670 <__libc_init_array>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	4d0d      	ldr	r5, [pc, #52]	; (80096a8 <__libc_init_array+0x38>)
 8009674:	4c0d      	ldr	r4, [pc, #52]	; (80096ac <__libc_init_array+0x3c>)
 8009676:	1b64      	subs	r4, r4, r5
 8009678:	10a4      	asrs	r4, r4, #2
 800967a:	2600      	movs	r6, #0
 800967c:	42a6      	cmp	r6, r4
 800967e:	d109      	bne.n	8009694 <__libc_init_array+0x24>
 8009680:	4d0b      	ldr	r5, [pc, #44]	; (80096b0 <__libc_init_array+0x40>)
 8009682:	4c0c      	ldr	r4, [pc, #48]	; (80096b4 <__libc_init_array+0x44>)
 8009684:	f001 f8a0 	bl	800a7c8 <_init>
 8009688:	1b64      	subs	r4, r4, r5
 800968a:	10a4      	asrs	r4, r4, #2
 800968c:	2600      	movs	r6, #0
 800968e:	42a6      	cmp	r6, r4
 8009690:	d105      	bne.n	800969e <__libc_init_array+0x2e>
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	f855 3b04 	ldr.w	r3, [r5], #4
 8009698:	4798      	blx	r3
 800969a:	3601      	adds	r6, #1
 800969c:	e7ee      	b.n	800967c <__libc_init_array+0xc>
 800969e:	f855 3b04 	ldr.w	r3, [r5], #4
 80096a2:	4798      	blx	r3
 80096a4:	3601      	adds	r6, #1
 80096a6:	e7f2      	b.n	800968e <__libc_init_array+0x1e>
 80096a8:	0801dea8 	.word	0x0801dea8
 80096ac:	0801dea8 	.word	0x0801dea8
 80096b0:	0801dea8 	.word	0x0801dea8
 80096b4:	0801deac 	.word	0x0801deac

080096b8 <memcpy>:
 80096b8:	440a      	add	r2, r1
 80096ba:	4291      	cmp	r1, r2
 80096bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80096c0:	d100      	bne.n	80096c4 <memcpy+0xc>
 80096c2:	4770      	bx	lr
 80096c4:	b510      	push	{r4, lr}
 80096c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ce:	4291      	cmp	r1, r2
 80096d0:	d1f9      	bne.n	80096c6 <memcpy+0xe>
 80096d2:	bd10      	pop	{r4, pc}

080096d4 <memset>:
 80096d4:	4402      	add	r2, r0
 80096d6:	4603      	mov	r3, r0
 80096d8:	4293      	cmp	r3, r2
 80096da:	d100      	bne.n	80096de <memset+0xa>
 80096dc:	4770      	bx	lr
 80096de:	f803 1b01 	strb.w	r1, [r3], #1
 80096e2:	e7f9      	b.n	80096d8 <memset+0x4>
 80096e4:	0000      	movs	r0, r0
	...

080096e8 <cos>:
 80096e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096ea:	ec53 2b10 	vmov	r2, r3, d0
 80096ee:	4826      	ldr	r0, [pc, #152]	; (8009788 <cos+0xa0>)
 80096f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096f4:	4281      	cmp	r1, r0
 80096f6:	dc06      	bgt.n	8009706 <cos+0x1e>
 80096f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009780 <cos+0x98>
 80096fc:	b005      	add	sp, #20
 80096fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8009702:	f000 ba75 	b.w	8009bf0 <__kernel_cos>
 8009706:	4821      	ldr	r0, [pc, #132]	; (800978c <cos+0xa4>)
 8009708:	4281      	cmp	r1, r0
 800970a:	dd09      	ble.n	8009720 <cos+0x38>
 800970c:	ee10 0a10 	vmov	r0, s0
 8009710:	4619      	mov	r1, r3
 8009712:	f7f6 feef 	bl	80004f4 <__aeabi_dsub>
 8009716:	ec41 0b10 	vmov	d0, r0, r1
 800971a:	b005      	add	sp, #20
 800971c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009720:	4668      	mov	r0, sp
 8009722:	f000 f855 	bl	80097d0 <__ieee754_rem_pio2>
 8009726:	f000 0003 	and.w	r0, r0, #3
 800972a:	2801      	cmp	r0, #1
 800972c:	d00b      	beq.n	8009746 <cos+0x5e>
 800972e:	2802      	cmp	r0, #2
 8009730:	d016      	beq.n	8009760 <cos+0x78>
 8009732:	b9e0      	cbnz	r0, 800976e <cos+0x86>
 8009734:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009738:	ed9d 0b00 	vldr	d0, [sp]
 800973c:	f000 fa58 	bl	8009bf0 <__kernel_cos>
 8009740:	ec51 0b10 	vmov	r0, r1, d0
 8009744:	e7e7      	b.n	8009716 <cos+0x2e>
 8009746:	ed9d 1b02 	vldr	d1, [sp, #8]
 800974a:	ed9d 0b00 	vldr	d0, [sp]
 800974e:	f000 fe67 	bl	800a420 <__kernel_sin>
 8009752:	ec53 2b10 	vmov	r2, r3, d0
 8009756:	ee10 0a10 	vmov	r0, s0
 800975a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800975e:	e7da      	b.n	8009716 <cos+0x2e>
 8009760:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009764:	ed9d 0b00 	vldr	d0, [sp]
 8009768:	f000 fa42 	bl	8009bf0 <__kernel_cos>
 800976c:	e7f1      	b.n	8009752 <cos+0x6a>
 800976e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009772:	ed9d 0b00 	vldr	d0, [sp]
 8009776:	2001      	movs	r0, #1
 8009778:	f000 fe52 	bl	800a420 <__kernel_sin>
 800977c:	e7e0      	b.n	8009740 <cos+0x58>
 800977e:	bf00      	nop
	...
 8009788:	3fe921fb 	.word	0x3fe921fb
 800978c:	7fefffff 	.word	0x7fefffff

08009790 <sqrtf>:
 8009790:	b508      	push	{r3, lr}
 8009792:	ed2d 8b02 	vpush	{d8}
 8009796:	eeb0 8a40 	vmov.f32	s16, s0
 800979a:	f000 fa25 	bl	8009be8 <__ieee754_sqrtf>
 800979e:	eeb4 8a48 	vcmp.f32	s16, s16
 80097a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a6:	d60c      	bvs.n	80097c2 <sqrtf+0x32>
 80097a8:	eddf 8a07 	vldr	s17, [pc, #28]	; 80097c8 <sqrtf+0x38>
 80097ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80097b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b4:	d505      	bpl.n	80097c2 <sqrtf+0x32>
 80097b6:	f001 f801 	bl	800a7bc <__errno>
 80097ba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80097be:	2321      	movs	r3, #33	; 0x21
 80097c0:	6003      	str	r3, [r0, #0]
 80097c2:	ecbd 8b02 	vpop	{d8}
 80097c6:	bd08      	pop	{r3, pc}
	...

080097d0 <__ieee754_rem_pio2>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	ed2d 8b02 	vpush	{d8}
 80097d8:	ec55 4b10 	vmov	r4, r5, d0
 80097dc:	4bca      	ldr	r3, [pc, #808]	; (8009b08 <__ieee754_rem_pio2+0x338>)
 80097de:	b08b      	sub	sp, #44	; 0x2c
 80097e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80097e4:	4598      	cmp	r8, r3
 80097e6:	4682      	mov	sl, r0
 80097e8:	9502      	str	r5, [sp, #8]
 80097ea:	dc08      	bgt.n	80097fe <__ieee754_rem_pio2+0x2e>
 80097ec:	2200      	movs	r2, #0
 80097ee:	2300      	movs	r3, #0
 80097f0:	ed80 0b00 	vstr	d0, [r0]
 80097f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80097f8:	f04f 0b00 	mov.w	fp, #0
 80097fc:	e028      	b.n	8009850 <__ieee754_rem_pio2+0x80>
 80097fe:	4bc3      	ldr	r3, [pc, #780]	; (8009b0c <__ieee754_rem_pio2+0x33c>)
 8009800:	4598      	cmp	r8, r3
 8009802:	dc78      	bgt.n	80098f6 <__ieee754_rem_pio2+0x126>
 8009804:	9b02      	ldr	r3, [sp, #8]
 8009806:	4ec2      	ldr	r6, [pc, #776]	; (8009b10 <__ieee754_rem_pio2+0x340>)
 8009808:	2b00      	cmp	r3, #0
 800980a:	ee10 0a10 	vmov	r0, s0
 800980e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009ad0 <__ieee754_rem_pio2+0x300>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	4629      	mov	r1, r5
 8009816:	dd39      	ble.n	800988c <__ieee754_rem_pio2+0xbc>
 8009818:	f7f6 fe6c 	bl	80004f4 <__aeabi_dsub>
 800981c:	45b0      	cmp	r8, r6
 800981e:	4604      	mov	r4, r0
 8009820:	460d      	mov	r5, r1
 8009822:	d01b      	beq.n	800985c <__ieee754_rem_pio2+0x8c>
 8009824:	a3ac      	add	r3, pc, #688	; (adr r3, 8009ad8 <__ieee754_rem_pio2+0x308>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7f6 fe63 	bl	80004f4 <__aeabi_dsub>
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	e9ca 2300 	strd	r2, r3, [sl]
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f6 fe5b 	bl	80004f4 <__aeabi_dsub>
 800983e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009ad8 <__ieee754_rem_pio2+0x308>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f6 fe56 	bl	80004f4 <__aeabi_dsub>
 8009848:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800984c:	f04f 0b01 	mov.w	fp, #1
 8009850:	4658      	mov	r0, fp
 8009852:	b00b      	add	sp, #44	; 0x2c
 8009854:	ecbd 8b02 	vpop	{d8}
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	a3a0      	add	r3, pc, #640	; (adr r3, 8009ae0 <__ieee754_rem_pio2+0x310>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fe47 	bl	80004f4 <__aeabi_dsub>
 8009866:	a3a0      	add	r3, pc, #640	; (adr r3, 8009ae8 <__ieee754_rem_pio2+0x318>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	f7f6 fe40 	bl	80004f4 <__aeabi_dsub>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	e9ca 2300 	strd	r2, r3, [sl]
 800987c:	4620      	mov	r0, r4
 800987e:	4629      	mov	r1, r5
 8009880:	f7f6 fe38 	bl	80004f4 <__aeabi_dsub>
 8009884:	a398      	add	r3, pc, #608	; (adr r3, 8009ae8 <__ieee754_rem_pio2+0x318>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	e7db      	b.n	8009844 <__ieee754_rem_pio2+0x74>
 800988c:	f7f6 fe34 	bl	80004f8 <__adddf3>
 8009890:	45b0      	cmp	r8, r6
 8009892:	4604      	mov	r4, r0
 8009894:	460d      	mov	r5, r1
 8009896:	d016      	beq.n	80098c6 <__ieee754_rem_pio2+0xf6>
 8009898:	a38f      	add	r3, pc, #572	; (adr r3, 8009ad8 <__ieee754_rem_pio2+0x308>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fe2b 	bl	80004f8 <__adddf3>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	e9ca 2300 	strd	r2, r3, [sl]
 80098aa:	4620      	mov	r0, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	f7f6 fe21 	bl	80004f4 <__aeabi_dsub>
 80098b2:	a389      	add	r3, pc, #548	; (adr r3, 8009ad8 <__ieee754_rem_pio2+0x308>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fe1e 	bl	80004f8 <__adddf3>
 80098bc:	f04f 3bff 	mov.w	fp, #4294967295
 80098c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80098c4:	e7c4      	b.n	8009850 <__ieee754_rem_pio2+0x80>
 80098c6:	a386      	add	r3, pc, #536	; (adr r3, 8009ae0 <__ieee754_rem_pio2+0x310>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f7f6 fe14 	bl	80004f8 <__adddf3>
 80098d0:	a385      	add	r3, pc, #532	; (adr r3, 8009ae8 <__ieee754_rem_pio2+0x318>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	4604      	mov	r4, r0
 80098d8:	460d      	mov	r5, r1
 80098da:	f7f6 fe0d 	bl	80004f8 <__adddf3>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	e9ca 2300 	strd	r2, r3, [sl]
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f6 fe03 	bl	80004f4 <__aeabi_dsub>
 80098ee:	a37e      	add	r3, pc, #504	; (adr r3, 8009ae8 <__ieee754_rem_pio2+0x318>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	e7e0      	b.n	80098b8 <__ieee754_rem_pio2+0xe8>
 80098f6:	4b87      	ldr	r3, [pc, #540]	; (8009b14 <__ieee754_rem_pio2+0x344>)
 80098f8:	4598      	cmp	r8, r3
 80098fa:	f300 80d9 	bgt.w	8009ab0 <__ieee754_rem_pio2+0x2e0>
 80098fe:	f000 fe4d 	bl	800a59c <fabs>
 8009902:	ec55 4b10 	vmov	r4, r5, d0
 8009906:	ee10 0a10 	vmov	r0, s0
 800990a:	a379      	add	r3, pc, #484	; (adr r3, 8009af0 <__ieee754_rem_pio2+0x320>)
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	4629      	mov	r1, r5
 8009912:	f7f6 fcc1 	bl	8000298 <__aeabi_dmul>
 8009916:	4b80      	ldr	r3, [pc, #512]	; (8009b18 <__ieee754_rem_pio2+0x348>)
 8009918:	2200      	movs	r2, #0
 800991a:	f7f6 fded 	bl	80004f8 <__adddf3>
 800991e:	f7f7 f829 	bl	8000974 <__aeabi_d2iz>
 8009922:	4683      	mov	fp, r0
 8009924:	f7f6 ff34 	bl	8000790 <__aeabi_i2d>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	ec43 2b18 	vmov	d8, r2, r3
 8009930:	a367      	add	r3, pc, #412	; (adr r3, 8009ad0 <__ieee754_rem_pio2+0x300>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	f7f6 fcaf 	bl	8000298 <__aeabi_dmul>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	f7f6 fdd7 	bl	80004f4 <__aeabi_dsub>
 8009946:	a364      	add	r3, pc, #400	; (adr r3, 8009ad8 <__ieee754_rem_pio2+0x308>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	ec51 0b18 	vmov	r0, r1, d8
 8009954:	f7f6 fca0 	bl	8000298 <__aeabi_dmul>
 8009958:	f1bb 0f1f 	cmp.w	fp, #31
 800995c:	4604      	mov	r4, r0
 800995e:	460d      	mov	r5, r1
 8009960:	dc0d      	bgt.n	800997e <__ieee754_rem_pio2+0x1ae>
 8009962:	4b6e      	ldr	r3, [pc, #440]	; (8009b1c <__ieee754_rem_pio2+0x34c>)
 8009964:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	4543      	cmp	r3, r8
 800996e:	d006      	beq.n	800997e <__ieee754_rem_pio2+0x1ae>
 8009970:	4622      	mov	r2, r4
 8009972:	462b      	mov	r3, r5
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f7f6 fdbc 	bl	80004f4 <__aeabi_dsub>
 800997c:	e00f      	b.n	800999e <__ieee754_rem_pio2+0x1ce>
 800997e:	462b      	mov	r3, r5
 8009980:	4622      	mov	r2, r4
 8009982:	4630      	mov	r0, r6
 8009984:	4639      	mov	r1, r7
 8009986:	f7f6 fdb5 	bl	80004f4 <__aeabi_dsub>
 800998a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800998e:	9303      	str	r3, [sp, #12]
 8009990:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009994:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009998:	f1b8 0f10 	cmp.w	r8, #16
 800999c:	dc02      	bgt.n	80099a4 <__ieee754_rem_pio2+0x1d4>
 800999e:	e9ca 0100 	strd	r0, r1, [sl]
 80099a2:	e039      	b.n	8009a18 <__ieee754_rem_pio2+0x248>
 80099a4:	a34e      	add	r3, pc, #312	; (adr r3, 8009ae0 <__ieee754_rem_pio2+0x310>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	ec51 0b18 	vmov	r0, r1, d8
 80099ae:	f7f6 fc73 	bl	8000298 <__aeabi_dmul>
 80099b2:	4604      	mov	r4, r0
 80099b4:	460d      	mov	r5, r1
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	f7f6 fd99 	bl	80004f4 <__aeabi_dsub>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4680      	mov	r8, r0
 80099c8:	4689      	mov	r9, r1
 80099ca:	4630      	mov	r0, r6
 80099cc:	4639      	mov	r1, r7
 80099ce:	f7f6 fd91 	bl	80004f4 <__aeabi_dsub>
 80099d2:	4622      	mov	r2, r4
 80099d4:	462b      	mov	r3, r5
 80099d6:	f7f6 fd8d 	bl	80004f4 <__aeabi_dsub>
 80099da:	a343      	add	r3, pc, #268	; (adr r3, 8009ae8 <__ieee754_rem_pio2+0x318>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	4604      	mov	r4, r0
 80099e2:	460d      	mov	r5, r1
 80099e4:	ec51 0b18 	vmov	r0, r1, d8
 80099e8:	f7f6 fc56 	bl	8000298 <__aeabi_dmul>
 80099ec:	4622      	mov	r2, r4
 80099ee:	462b      	mov	r3, r5
 80099f0:	f7f6 fd80 	bl	80004f4 <__aeabi_dsub>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4604      	mov	r4, r0
 80099fa:	460d      	mov	r5, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fd78 	bl	80004f4 <__aeabi_dsub>
 8009a04:	9a03      	ldr	r2, [sp, #12]
 8009a06:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b31      	cmp	r3, #49	; 0x31
 8009a0e:	dc24      	bgt.n	8009a5a <__ieee754_rem_pio2+0x28a>
 8009a10:	e9ca 0100 	strd	r0, r1, [sl]
 8009a14:	4646      	mov	r6, r8
 8009a16:	464f      	mov	r7, r9
 8009a18:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	4639      	mov	r1, r7
 8009a24:	f7f6 fd66 	bl	80004f4 <__aeabi_dsub>
 8009a28:	462b      	mov	r3, r5
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	f7f6 fd62 	bl	80004f4 <__aeabi_dsub>
 8009a30:	9b02      	ldr	r3, [sp, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a38:	f6bf af0a 	bge.w	8009850 <__ieee754_rem_pio2+0x80>
 8009a3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a40:	f8ca 3004 	str.w	r3, [sl, #4]
 8009a44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a48:	f8ca 8000 	str.w	r8, [sl]
 8009a4c:	f8ca 0008 	str.w	r0, [sl, #8]
 8009a50:	f8ca 300c 	str.w	r3, [sl, #12]
 8009a54:	f1cb 0b00 	rsb	fp, fp, #0
 8009a58:	e6fa      	b.n	8009850 <__ieee754_rem_pio2+0x80>
 8009a5a:	a327      	add	r3, pc, #156	; (adr r3, 8009af8 <__ieee754_rem_pio2+0x328>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	ec51 0b18 	vmov	r0, r1, d8
 8009a64:	f7f6 fc18 	bl	8000298 <__aeabi_dmul>
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4640      	mov	r0, r8
 8009a72:	4649      	mov	r1, r9
 8009a74:	f7f6 fd3e 	bl	80004f4 <__aeabi_dsub>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	f7f6 fd36 	bl	80004f4 <__aeabi_dsub>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f7f6 fd32 	bl	80004f4 <__aeabi_dsub>
 8009a90:	a31b      	add	r3, pc, #108	; (adr r3, 8009b00 <__ieee754_rem_pio2+0x330>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	4604      	mov	r4, r0
 8009a98:	460d      	mov	r5, r1
 8009a9a:	ec51 0b18 	vmov	r0, r1, d8
 8009a9e:	f7f6 fbfb 	bl	8000298 <__aeabi_dmul>
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	f7f6 fd25 	bl	80004f4 <__aeabi_dsub>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	460d      	mov	r5, r1
 8009aae:	e75f      	b.n	8009970 <__ieee754_rem_pio2+0x1a0>
 8009ab0:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <__ieee754_rem_pio2+0x350>)
 8009ab2:	4598      	cmp	r8, r3
 8009ab4:	dd36      	ble.n	8009b24 <__ieee754_rem_pio2+0x354>
 8009ab6:	ee10 2a10 	vmov	r2, s0
 8009aba:	462b      	mov	r3, r5
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f6 fd18 	bl	80004f4 <__aeabi_dsub>
 8009ac4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ac8:	e9ca 0100 	strd	r0, r1, [sl]
 8009acc:	e694      	b.n	80097f8 <__ieee754_rem_pio2+0x28>
 8009ace:	bf00      	nop
 8009ad0:	54400000 	.word	0x54400000
 8009ad4:	3ff921fb 	.word	0x3ff921fb
 8009ad8:	1a626331 	.word	0x1a626331
 8009adc:	3dd0b461 	.word	0x3dd0b461
 8009ae0:	1a600000 	.word	0x1a600000
 8009ae4:	3dd0b461 	.word	0x3dd0b461
 8009ae8:	2e037073 	.word	0x2e037073
 8009aec:	3ba3198a 	.word	0x3ba3198a
 8009af0:	6dc9c883 	.word	0x6dc9c883
 8009af4:	3fe45f30 	.word	0x3fe45f30
 8009af8:	2e000000 	.word	0x2e000000
 8009afc:	3ba3198a 	.word	0x3ba3198a
 8009b00:	252049c1 	.word	0x252049c1
 8009b04:	397b839a 	.word	0x397b839a
 8009b08:	3fe921fb 	.word	0x3fe921fb
 8009b0c:	4002d97b 	.word	0x4002d97b
 8009b10:	3ff921fb 	.word	0x3ff921fb
 8009b14:	413921fb 	.word	0x413921fb
 8009b18:	3fe00000 	.word	0x3fe00000
 8009b1c:	0801dccc 	.word	0x0801dccc
 8009b20:	7fefffff 	.word	0x7fefffff
 8009b24:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009b28:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009b2c:	ee10 0a10 	vmov	r0, s0
 8009b30:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009b34:	ee10 6a10 	vmov	r6, s0
 8009b38:	460f      	mov	r7, r1
 8009b3a:	f7f6 ff1b 	bl	8000974 <__aeabi_d2iz>
 8009b3e:	f7f6 fe27 	bl	8000790 <__aeabi_i2d>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4630      	mov	r0, r6
 8009b48:	4639      	mov	r1, r7
 8009b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b4e:	f7f6 fcd1 	bl	80004f4 <__aeabi_dsub>
 8009b52:	4b23      	ldr	r3, [pc, #140]	; (8009be0 <__ieee754_rem_pio2+0x410>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	f7f6 fb9f 	bl	8000298 <__aeabi_dmul>
 8009b5a:	460f      	mov	r7, r1
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	f7f6 ff09 	bl	8000974 <__aeabi_d2iz>
 8009b62:	f7f6 fe15 	bl	8000790 <__aeabi_i2d>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b72:	f7f6 fcbf 	bl	80004f4 <__aeabi_dsub>
 8009b76:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <__ieee754_rem_pio2+0x410>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f7f6 fb8d 	bl	8000298 <__aeabi_dmul>
 8009b7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b82:	ad04      	add	r5, sp, #16
 8009b84:	f04f 0803 	mov.w	r8, #3
 8009b88:	46a9      	mov	r9, r5
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	2700      	movs	r7, #0
 8009b8e:	4632      	mov	r2, r6
 8009b90:	463b      	mov	r3, r7
 8009b92:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009b96:	46c3      	mov	fp, r8
 8009b98:	3d08      	subs	r5, #8
 8009b9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b9e:	f7f6 feb7 	bl	8000910 <__aeabi_dcmpeq>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d1f3      	bne.n	8009b8e <__ieee754_rem_pio2+0x3be>
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <__ieee754_rem_pio2+0x414>)
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	2302      	movs	r3, #2
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	4622      	mov	r2, r4
 8009bb0:	465b      	mov	r3, fp
 8009bb2:	4651      	mov	r1, sl
 8009bb4:	4648      	mov	r0, r9
 8009bb6:	f000 f8e3 	bl	8009d80 <__kernel_rem_pio2>
 8009bba:	9b02      	ldr	r3, [sp, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	4683      	mov	fp, r0
 8009bc0:	f6bf ae46 	bge.w	8009850 <__ieee754_rem_pio2+0x80>
 8009bc4:	e9da 2100 	ldrd	r2, r1, [sl]
 8009bc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bcc:	e9ca 2300 	strd	r2, r3, [sl]
 8009bd0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009bd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bd8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009bdc:	e73a      	b.n	8009a54 <__ieee754_rem_pio2+0x284>
 8009bde:	bf00      	nop
 8009be0:	41700000 	.word	0x41700000
 8009be4:	0801dd4c 	.word	0x0801dd4c

08009be8 <__ieee754_sqrtf>:
 8009be8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009bec:	4770      	bx	lr
	...

08009bf0 <__kernel_cos>:
 8009bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	ec57 6b10 	vmov	r6, r7, d0
 8009bf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009bfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009c00:	ed8d 1b00 	vstr	d1, [sp]
 8009c04:	da07      	bge.n	8009c16 <__kernel_cos+0x26>
 8009c06:	ee10 0a10 	vmov	r0, s0
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 feb2 	bl	8000974 <__aeabi_d2iz>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f000 8088 	beq.w	8009d26 <__kernel_cos+0x136>
 8009c16:	4632      	mov	r2, r6
 8009c18:	463b      	mov	r3, r7
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f6 fb3b 	bl	8000298 <__aeabi_dmul>
 8009c22:	4b51      	ldr	r3, [pc, #324]	; (8009d68 <__kernel_cos+0x178>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	4604      	mov	r4, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	f7f6 fb35 	bl	8000298 <__aeabi_dmul>
 8009c2e:	a340      	add	r3, pc, #256	; (adr r3, 8009d30 <__kernel_cos+0x140>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	4682      	mov	sl, r0
 8009c36:	468b      	mov	fp, r1
 8009c38:	4620      	mov	r0, r4
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	f7f6 fb2c 	bl	8000298 <__aeabi_dmul>
 8009c40:	a33d      	add	r3, pc, #244	; (adr r3, 8009d38 <__kernel_cos+0x148>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fc57 	bl	80004f8 <__adddf3>
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f7f6 fb23 	bl	8000298 <__aeabi_dmul>
 8009c52:	a33b      	add	r3, pc, #236	; (adr r3, 8009d40 <__kernel_cos+0x150>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fc4c 	bl	80004f4 <__aeabi_dsub>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	462b      	mov	r3, r5
 8009c60:	f7f6 fb1a 	bl	8000298 <__aeabi_dmul>
 8009c64:	a338      	add	r3, pc, #224	; (adr r3, 8009d48 <__kernel_cos+0x158>)
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	f7f6 fc45 	bl	80004f8 <__adddf3>
 8009c6e:	4622      	mov	r2, r4
 8009c70:	462b      	mov	r3, r5
 8009c72:	f7f6 fb11 	bl	8000298 <__aeabi_dmul>
 8009c76:	a336      	add	r3, pc, #216	; (adr r3, 8009d50 <__kernel_cos+0x160>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f7f6 fc3a 	bl	80004f4 <__aeabi_dsub>
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	f7f6 fb08 	bl	8000298 <__aeabi_dmul>
 8009c88:	a333      	add	r3, pc, #204	; (adr r3, 8009d58 <__kernel_cos+0x168>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	f7f6 fc33 	bl	80004f8 <__adddf3>
 8009c92:	4622      	mov	r2, r4
 8009c94:	462b      	mov	r3, r5
 8009c96:	f7f6 faff 	bl	8000298 <__aeabi_dmul>
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	f7f6 fafb 	bl	8000298 <__aeabi_dmul>
 8009ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	4630      	mov	r0, r6
 8009cac:	4639      	mov	r1, r7
 8009cae:	f7f6 faf3 	bl	8000298 <__aeabi_dmul>
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f7f6 fc1b 	bl	80004f4 <__aeabi_dsub>
 8009cbe:	4b2b      	ldr	r3, [pc, #172]	; (8009d6c <__kernel_cos+0x17c>)
 8009cc0:	4598      	cmp	r8, r3
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460f      	mov	r7, r1
 8009cc6:	dc10      	bgt.n	8009cea <__kernel_cos+0xfa>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4650      	mov	r0, sl
 8009cce:	4659      	mov	r1, fp
 8009cd0:	f7f6 fc10 	bl	80004f4 <__aeabi_dsub>
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4926      	ldr	r1, [pc, #152]	; (8009d70 <__kernel_cos+0x180>)
 8009cd8:	4602      	mov	r2, r0
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f7f6 fc0a 	bl	80004f4 <__aeabi_dsub>
 8009ce0:	ec41 0b10 	vmov	d0, r0, r1
 8009ce4:	b003      	add	sp, #12
 8009ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cea:	4b22      	ldr	r3, [pc, #136]	; (8009d74 <__kernel_cos+0x184>)
 8009cec:	4920      	ldr	r1, [pc, #128]	; (8009d70 <__kernel_cos+0x180>)
 8009cee:	4598      	cmp	r8, r3
 8009cf0:	bfcc      	ite	gt
 8009cf2:	4d21      	ldrgt	r5, [pc, #132]	; (8009d78 <__kernel_cos+0x188>)
 8009cf4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009cf8:	2400      	movs	r4, #0
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	2000      	movs	r0, #0
 8009d00:	f7f6 fbf8 	bl	80004f4 <__aeabi_dsub>
 8009d04:	4622      	mov	r2, r4
 8009d06:	4680      	mov	r8, r0
 8009d08:	4689      	mov	r9, r1
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	4650      	mov	r0, sl
 8009d0e:	4659      	mov	r1, fp
 8009d10:	f7f6 fbf0 	bl	80004f4 <__aeabi_dsub>
 8009d14:	4632      	mov	r2, r6
 8009d16:	463b      	mov	r3, r7
 8009d18:	f7f6 fbec 	bl	80004f4 <__aeabi_dsub>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	e7da      	b.n	8009cdc <__kernel_cos+0xec>
 8009d26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009d60 <__kernel_cos+0x170>
 8009d2a:	e7db      	b.n	8009ce4 <__kernel_cos+0xf4>
 8009d2c:	f3af 8000 	nop.w
 8009d30:	be8838d4 	.word	0xbe8838d4
 8009d34:	bda8fae9 	.word	0xbda8fae9
 8009d38:	bdb4b1c4 	.word	0xbdb4b1c4
 8009d3c:	3e21ee9e 	.word	0x3e21ee9e
 8009d40:	809c52ad 	.word	0x809c52ad
 8009d44:	3e927e4f 	.word	0x3e927e4f
 8009d48:	19cb1590 	.word	0x19cb1590
 8009d4c:	3efa01a0 	.word	0x3efa01a0
 8009d50:	16c15177 	.word	0x16c15177
 8009d54:	3f56c16c 	.word	0x3f56c16c
 8009d58:	5555554c 	.word	0x5555554c
 8009d5c:	3fa55555 	.word	0x3fa55555
 8009d60:	00000000 	.word	0x00000000
 8009d64:	3ff00000 	.word	0x3ff00000
 8009d68:	3fe00000 	.word	0x3fe00000
 8009d6c:	3fd33332 	.word	0x3fd33332
 8009d70:	3ff00000 	.word	0x3ff00000
 8009d74:	3fe90000 	.word	0x3fe90000
 8009d78:	3fd20000 	.word	0x3fd20000
 8009d7c:	00000000 	.word	0x00000000

08009d80 <__kernel_rem_pio2>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	ed2d 8b02 	vpush	{d8}
 8009d88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009d8c:	f112 0f14 	cmn.w	r2, #20
 8009d90:	9308      	str	r3, [sp, #32]
 8009d92:	9101      	str	r1, [sp, #4]
 8009d94:	4bc4      	ldr	r3, [pc, #784]	; (800a0a8 <__kernel_rem_pio2+0x328>)
 8009d96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009d98:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d9e:	9302      	str	r3, [sp, #8]
 8009da0:	9b08      	ldr	r3, [sp, #32]
 8009da2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009da6:	bfa8      	it	ge
 8009da8:	1ed4      	subge	r4, r2, #3
 8009daa:	9306      	str	r3, [sp, #24]
 8009dac:	bfb2      	itee	lt
 8009dae:	2400      	movlt	r4, #0
 8009db0:	2318      	movge	r3, #24
 8009db2:	fb94 f4f3 	sdivge	r4, r4, r3
 8009db6:	f06f 0317 	mvn.w	r3, #23
 8009dba:	fb04 3303 	mla	r3, r4, r3, r3
 8009dbe:	eb03 0a02 	add.w	sl, r3, r2
 8009dc2:	9b02      	ldr	r3, [sp, #8]
 8009dc4:	9a06      	ldr	r2, [sp, #24]
 8009dc6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a098 <__kernel_rem_pio2+0x318>
 8009dca:	eb03 0802 	add.w	r8, r3, r2
 8009dce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009dd0:	1aa7      	subs	r7, r4, r2
 8009dd2:	ae22      	add	r6, sp, #136	; 0x88
 8009dd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009dd8:	2500      	movs	r5, #0
 8009dda:	4545      	cmp	r5, r8
 8009ddc:	dd13      	ble.n	8009e06 <__kernel_rem_pio2+0x86>
 8009dde:	9b08      	ldr	r3, [sp, #32]
 8009de0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a098 <__kernel_rem_pio2+0x318>
 8009de4:	aa22      	add	r2, sp, #136	; 0x88
 8009de6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009dea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009dee:	f04f 0800 	mov.w	r8, #0
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	4598      	cmp	r8, r3
 8009df6:	dc2f      	bgt.n	8009e58 <__kernel_rem_pio2+0xd8>
 8009df8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009dfc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009e00:	462f      	mov	r7, r5
 8009e02:	2600      	movs	r6, #0
 8009e04:	e01b      	b.n	8009e3e <__kernel_rem_pio2+0xbe>
 8009e06:	42ef      	cmn	r7, r5
 8009e08:	d407      	bmi.n	8009e1a <__kernel_rem_pio2+0x9a>
 8009e0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009e0e:	f7f6 fcbf 	bl	8000790 <__aeabi_i2d>
 8009e12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009e16:	3501      	adds	r5, #1
 8009e18:	e7df      	b.n	8009dda <__kernel_rem_pio2+0x5a>
 8009e1a:	ec51 0b18 	vmov	r0, r1, d8
 8009e1e:	e7f8      	b.n	8009e12 <__kernel_rem_pio2+0x92>
 8009e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009e28:	f7f6 fa36 	bl	8000298 <__aeabi_dmul>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e34:	f7f6 fb60 	bl	80004f8 <__adddf3>
 8009e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e3c:	3601      	adds	r6, #1
 8009e3e:	9b06      	ldr	r3, [sp, #24]
 8009e40:	429e      	cmp	r6, r3
 8009e42:	f1a7 0708 	sub.w	r7, r7, #8
 8009e46:	ddeb      	ble.n	8009e20 <__kernel_rem_pio2+0xa0>
 8009e48:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009e4c:	f108 0801 	add.w	r8, r8, #1
 8009e50:	ecab 7b02 	vstmia	fp!, {d7}
 8009e54:	3508      	adds	r5, #8
 8009e56:	e7cc      	b.n	8009df2 <__kernel_rem_pio2+0x72>
 8009e58:	9b02      	ldr	r3, [sp, #8]
 8009e5a:	aa0e      	add	r2, sp, #56	; 0x38
 8009e5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e60:	930d      	str	r3, [sp, #52]	; 0x34
 8009e62:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009e64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009e68:	9c02      	ldr	r4, [sp, #8]
 8009e6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e6c:	00e3      	lsls	r3, r4, #3
 8009e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e70:	ab9a      	add	r3, sp, #616	; 0x268
 8009e72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009e7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009e7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009e80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009e84:	46c3      	mov	fp, r8
 8009e86:	46a1      	mov	r9, r4
 8009e88:	f1b9 0f00 	cmp.w	r9, #0
 8009e8c:	f1a5 0508 	sub.w	r5, r5, #8
 8009e90:	dc77      	bgt.n	8009f82 <__kernel_rem_pio2+0x202>
 8009e92:	ec47 6b10 	vmov	d0, r6, r7
 8009e96:	4650      	mov	r0, sl
 8009e98:	f000 fc0a 	bl	800a6b0 <scalbn>
 8009e9c:	ec57 6b10 	vmov	r6, r7, d0
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009ea6:	ee10 0a10 	vmov	r0, s0
 8009eaa:	4639      	mov	r1, r7
 8009eac:	f7f6 f9f4 	bl	8000298 <__aeabi_dmul>
 8009eb0:	ec41 0b10 	vmov	d0, r0, r1
 8009eb4:	f000 fb7c 	bl	800a5b0 <floor>
 8009eb8:	4b7c      	ldr	r3, [pc, #496]	; (800a0ac <__kernel_rem_pio2+0x32c>)
 8009eba:	ec51 0b10 	vmov	r0, r1, d0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f7f6 f9ea 	bl	8000298 <__aeabi_dmul>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 fb12 	bl	80004f4 <__aeabi_dsub>
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	f7f6 fd4e 	bl	8000974 <__aeabi_d2iz>
 8009ed8:	9004      	str	r0, [sp, #16]
 8009eda:	f7f6 fc59 	bl	8000790 <__aeabi_i2d>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	f7f6 fb05 	bl	80004f4 <__aeabi_dsub>
 8009eea:	f1ba 0f00 	cmp.w	sl, #0
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	dd6d      	ble.n	8009fd0 <__kernel_rem_pio2+0x250>
 8009ef4:	1e62      	subs	r2, r4, #1
 8009ef6:	ab0e      	add	r3, sp, #56	; 0x38
 8009ef8:	9d04      	ldr	r5, [sp, #16]
 8009efa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009efe:	f1ca 0118 	rsb	r1, sl, #24
 8009f02:	fa40 f301 	asr.w	r3, r0, r1
 8009f06:	441d      	add	r5, r3
 8009f08:	408b      	lsls	r3, r1
 8009f0a:	1ac0      	subs	r0, r0, r3
 8009f0c:	ab0e      	add	r3, sp, #56	; 0x38
 8009f0e:	9504      	str	r5, [sp, #16]
 8009f10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009f14:	f1ca 0317 	rsb	r3, sl, #23
 8009f18:	fa40 fb03 	asr.w	fp, r0, r3
 8009f1c:	f1bb 0f00 	cmp.w	fp, #0
 8009f20:	dd65      	ble.n	8009fee <__kernel_rem_pio2+0x26e>
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	2200      	movs	r2, #0
 8009f26:	3301      	adds	r3, #1
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	4615      	mov	r5, r2
 8009f2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009f30:	4294      	cmp	r4, r2
 8009f32:	f300 809c 	bgt.w	800a06e <__kernel_rem_pio2+0x2ee>
 8009f36:	f1ba 0f00 	cmp.w	sl, #0
 8009f3a:	dd07      	ble.n	8009f4c <__kernel_rem_pio2+0x1cc>
 8009f3c:	f1ba 0f01 	cmp.w	sl, #1
 8009f40:	f000 80c0 	beq.w	800a0c4 <__kernel_rem_pio2+0x344>
 8009f44:	f1ba 0f02 	cmp.w	sl, #2
 8009f48:	f000 80c6 	beq.w	800a0d8 <__kernel_rem_pio2+0x358>
 8009f4c:	f1bb 0f02 	cmp.w	fp, #2
 8009f50:	d14d      	bne.n	8009fee <__kernel_rem_pio2+0x26e>
 8009f52:	4632      	mov	r2, r6
 8009f54:	463b      	mov	r3, r7
 8009f56:	4956      	ldr	r1, [pc, #344]	; (800a0b0 <__kernel_rem_pio2+0x330>)
 8009f58:	2000      	movs	r0, #0
 8009f5a:	f7f6 facb 	bl	80004f4 <__aeabi_dsub>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	2d00      	cmp	r5, #0
 8009f64:	d043      	beq.n	8009fee <__kernel_rem_pio2+0x26e>
 8009f66:	4650      	mov	r0, sl
 8009f68:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a0a0 <__kernel_rem_pio2+0x320>
 8009f6c:	f000 fba0 	bl	800a6b0 <scalbn>
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	ec53 2b10 	vmov	r2, r3, d0
 8009f78:	f7f6 fabc 	bl	80004f4 <__aeabi_dsub>
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	e035      	b.n	8009fee <__kernel_rem_pio2+0x26e>
 8009f82:	4b4c      	ldr	r3, [pc, #304]	; (800a0b4 <__kernel_rem_pio2+0x334>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	4630      	mov	r0, r6
 8009f88:	4639      	mov	r1, r7
 8009f8a:	f7f6 f985 	bl	8000298 <__aeabi_dmul>
 8009f8e:	f7f6 fcf1 	bl	8000974 <__aeabi_d2iz>
 8009f92:	f7f6 fbfd 	bl	8000790 <__aeabi_i2d>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	ec43 2b18 	vmov	d8, r2, r3
 8009f9e:	4b46      	ldr	r3, [pc, #280]	; (800a0b8 <__kernel_rem_pio2+0x338>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f7f6 f979 	bl	8000298 <__aeabi_dmul>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4630      	mov	r0, r6
 8009fac:	4639      	mov	r1, r7
 8009fae:	f7f6 faa1 	bl	80004f4 <__aeabi_dsub>
 8009fb2:	f7f6 fcdf 	bl	8000974 <__aeabi_d2iz>
 8009fb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fba:	f84b 0b04 	str.w	r0, [fp], #4
 8009fbe:	ec51 0b18 	vmov	r0, r1, d8
 8009fc2:	f7f6 fa99 	bl	80004f8 <__adddf3>
 8009fc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460f      	mov	r7, r1
 8009fce:	e75b      	b.n	8009e88 <__kernel_rem_pio2+0x108>
 8009fd0:	d106      	bne.n	8009fe0 <__kernel_rem_pio2+0x260>
 8009fd2:	1e63      	subs	r3, r4, #1
 8009fd4:	aa0e      	add	r2, sp, #56	; 0x38
 8009fd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009fda:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009fde:	e79d      	b.n	8009f1c <__kernel_rem_pio2+0x19c>
 8009fe0:	4b36      	ldr	r3, [pc, #216]	; (800a0bc <__kernel_rem_pio2+0x33c>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f7f6 fcb2 	bl	800094c <__aeabi_dcmpge>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d13d      	bne.n	800a068 <__kernel_rem_pio2+0x2e8>
 8009fec:	4683      	mov	fp, r0
 8009fee:	2200      	movs	r2, #0
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 fc8b 	bl	8000910 <__aeabi_dcmpeq>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	f000 80c0 	beq.w	800a180 <__kernel_rem_pio2+0x400>
 800a000:	1e65      	subs	r5, r4, #1
 800a002:	462b      	mov	r3, r5
 800a004:	2200      	movs	r2, #0
 800a006:	9902      	ldr	r1, [sp, #8]
 800a008:	428b      	cmp	r3, r1
 800a00a:	da6c      	bge.n	800a0e6 <__kernel_rem_pio2+0x366>
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	f000 8089 	beq.w	800a124 <__kernel_rem_pio2+0x3a4>
 800a012:	ab0e      	add	r3, sp, #56	; 0x38
 800a014:	f1aa 0a18 	sub.w	sl, sl, #24
 800a018:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 80ad 	beq.w	800a17c <__kernel_rem_pio2+0x3fc>
 800a022:	4650      	mov	r0, sl
 800a024:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a0a0 <__kernel_rem_pio2+0x320>
 800a028:	f000 fb42 	bl	800a6b0 <scalbn>
 800a02c:	ab9a      	add	r3, sp, #616	; 0x268
 800a02e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a032:	ec57 6b10 	vmov	r6, r7, d0
 800a036:	00ec      	lsls	r4, r5, #3
 800a038:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a03c:	46aa      	mov	sl, r5
 800a03e:	f1ba 0f00 	cmp.w	sl, #0
 800a042:	f280 80d6 	bge.w	800a1f2 <__kernel_rem_pio2+0x472>
 800a046:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a098 <__kernel_rem_pio2+0x318>
 800a04a:	462e      	mov	r6, r5
 800a04c:	2e00      	cmp	r6, #0
 800a04e:	f2c0 8104 	blt.w	800a25a <__kernel_rem_pio2+0x4da>
 800a052:	ab72      	add	r3, sp, #456	; 0x1c8
 800a054:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a058:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a0c0 <__kernel_rem_pio2+0x340>
 800a05c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a060:	f04f 0800 	mov.w	r8, #0
 800a064:	1baf      	subs	r7, r5, r6
 800a066:	e0ea      	b.n	800a23e <__kernel_rem_pio2+0x4be>
 800a068:	f04f 0b02 	mov.w	fp, #2
 800a06c:	e759      	b.n	8009f22 <__kernel_rem_pio2+0x1a2>
 800a06e:	f8d8 3000 	ldr.w	r3, [r8]
 800a072:	b955      	cbnz	r5, 800a08a <__kernel_rem_pio2+0x30a>
 800a074:	b123      	cbz	r3, 800a080 <__kernel_rem_pio2+0x300>
 800a076:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a07a:	f8c8 3000 	str.w	r3, [r8]
 800a07e:	2301      	movs	r3, #1
 800a080:	3201      	adds	r2, #1
 800a082:	f108 0804 	add.w	r8, r8, #4
 800a086:	461d      	mov	r5, r3
 800a088:	e752      	b.n	8009f30 <__kernel_rem_pio2+0x1b0>
 800a08a:	1acb      	subs	r3, r1, r3
 800a08c:	f8c8 3000 	str.w	r3, [r8]
 800a090:	462b      	mov	r3, r5
 800a092:	e7f5      	b.n	800a080 <__kernel_rem_pio2+0x300>
 800a094:	f3af 8000 	nop.w
	...
 800a0a4:	3ff00000 	.word	0x3ff00000
 800a0a8:	0801de98 	.word	0x0801de98
 800a0ac:	40200000 	.word	0x40200000
 800a0b0:	3ff00000 	.word	0x3ff00000
 800a0b4:	3e700000 	.word	0x3e700000
 800a0b8:	41700000 	.word	0x41700000
 800a0bc:	3fe00000 	.word	0x3fe00000
 800a0c0:	0801de58 	.word	0x0801de58
 800a0c4:	1e62      	subs	r2, r4, #1
 800a0c6:	ab0e      	add	r3, sp, #56	; 0x38
 800a0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a0d0:	a90e      	add	r1, sp, #56	; 0x38
 800a0d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a0d6:	e739      	b.n	8009f4c <__kernel_rem_pio2+0x1cc>
 800a0d8:	1e62      	subs	r2, r4, #1
 800a0da:	ab0e      	add	r3, sp, #56	; 0x38
 800a0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a0e4:	e7f4      	b.n	800a0d0 <__kernel_rem_pio2+0x350>
 800a0e6:	a90e      	add	r1, sp, #56	; 0x38
 800a0e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	e789      	b.n	800a006 <__kernel_rem_pio2+0x286>
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	d0fa      	beq.n	800a0f2 <__kernel_rem_pio2+0x372>
 800a0fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a102:	446a      	add	r2, sp
 800a104:	3a98      	subs	r2, #152	; 0x98
 800a106:	920a      	str	r2, [sp, #40]	; 0x28
 800a108:	9a08      	ldr	r2, [sp, #32]
 800a10a:	18e3      	adds	r3, r4, r3
 800a10c:	18a5      	adds	r5, r4, r2
 800a10e:	aa22      	add	r2, sp, #136	; 0x88
 800a110:	f104 0801 	add.w	r8, r4, #1
 800a114:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	9b04      	ldr	r3, [sp, #16]
 800a11c:	4543      	cmp	r3, r8
 800a11e:	da04      	bge.n	800a12a <__kernel_rem_pio2+0x3aa>
 800a120:	461c      	mov	r4, r3
 800a122:	e6a3      	b.n	8009e6c <__kernel_rem_pio2+0xec>
 800a124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a126:	2301      	movs	r3, #1
 800a128:	e7e4      	b.n	800a0f4 <__kernel_rem_pio2+0x374>
 800a12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a12c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a130:	f7f6 fb2e 	bl	8000790 <__aeabi_i2d>
 800a134:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a13a:	46ab      	mov	fp, r5
 800a13c:	461c      	mov	r4, r3
 800a13e:	f04f 0900 	mov.w	r9, #0
 800a142:	2600      	movs	r6, #0
 800a144:	2700      	movs	r7, #0
 800a146:	9b06      	ldr	r3, [sp, #24]
 800a148:	4599      	cmp	r9, r3
 800a14a:	dd06      	ble.n	800a15a <__kernel_rem_pio2+0x3da>
 800a14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a152:	f108 0801 	add.w	r8, r8, #1
 800a156:	930a      	str	r3, [sp, #40]	; 0x28
 800a158:	e7df      	b.n	800a11a <__kernel_rem_pio2+0x39a>
 800a15a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a15e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a162:	f7f6 f899 	bl	8000298 <__aeabi_dmul>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4630      	mov	r0, r6
 800a16c:	4639      	mov	r1, r7
 800a16e:	f7f6 f9c3 	bl	80004f8 <__adddf3>
 800a172:	f109 0901 	add.w	r9, r9, #1
 800a176:	4606      	mov	r6, r0
 800a178:	460f      	mov	r7, r1
 800a17a:	e7e4      	b.n	800a146 <__kernel_rem_pio2+0x3c6>
 800a17c:	3d01      	subs	r5, #1
 800a17e:	e748      	b.n	800a012 <__kernel_rem_pio2+0x292>
 800a180:	ec47 6b10 	vmov	d0, r6, r7
 800a184:	f1ca 0000 	rsb	r0, sl, #0
 800a188:	f000 fa92 	bl	800a6b0 <scalbn>
 800a18c:	ec57 6b10 	vmov	r6, r7, d0
 800a190:	4ba0      	ldr	r3, [pc, #640]	; (800a414 <__kernel_rem_pio2+0x694>)
 800a192:	ee10 0a10 	vmov	r0, s0
 800a196:	2200      	movs	r2, #0
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 fbd7 	bl	800094c <__aeabi_dcmpge>
 800a19e:	b1f8      	cbz	r0, 800a1e0 <__kernel_rem_pio2+0x460>
 800a1a0:	4b9d      	ldr	r3, [pc, #628]	; (800a418 <__kernel_rem_pio2+0x698>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	f7f6 f876 	bl	8000298 <__aeabi_dmul>
 800a1ac:	f7f6 fbe2 	bl	8000974 <__aeabi_d2iz>
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	f7f6 faed 	bl	8000790 <__aeabi_i2d>
 800a1b6:	4b97      	ldr	r3, [pc, #604]	; (800a414 <__kernel_rem_pio2+0x694>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f7f6 f86d 	bl	8000298 <__aeabi_dmul>
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f7f6 f995 	bl	80004f4 <__aeabi_dsub>
 800a1ca:	f7f6 fbd3 	bl	8000974 <__aeabi_d2iz>
 800a1ce:	1c65      	adds	r5, r4, #1
 800a1d0:	ab0e      	add	r3, sp, #56	; 0x38
 800a1d2:	f10a 0a18 	add.w	sl, sl, #24
 800a1d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a1da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a1de:	e720      	b.n	800a022 <__kernel_rem_pio2+0x2a2>
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	f7f6 fbc6 	bl	8000974 <__aeabi_d2iz>
 800a1e8:	ab0e      	add	r3, sp, #56	; 0x38
 800a1ea:	4625      	mov	r5, r4
 800a1ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a1f0:	e717      	b.n	800a022 <__kernel_rem_pio2+0x2a2>
 800a1f2:	ab0e      	add	r3, sp, #56	; 0x38
 800a1f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a1f8:	f7f6 faca 	bl	8000790 <__aeabi_i2d>
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	463b      	mov	r3, r7
 800a200:	f7f6 f84a 	bl	8000298 <__aeabi_dmul>
 800a204:	4b84      	ldr	r3, [pc, #528]	; (800a418 <__kernel_rem_pio2+0x698>)
 800a206:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a20a:	2200      	movs	r2, #0
 800a20c:	4630      	mov	r0, r6
 800a20e:	4639      	mov	r1, r7
 800a210:	f7f6 f842 	bl	8000298 <__aeabi_dmul>
 800a214:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a218:	4606      	mov	r6, r0
 800a21a:	460f      	mov	r7, r1
 800a21c:	e70f      	b.n	800a03e <__kernel_rem_pio2+0x2be>
 800a21e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a222:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a226:	f7f6 f837 	bl	8000298 <__aeabi_dmul>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a232:	f7f6 f961 	bl	80004f8 <__adddf3>
 800a236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a23a:	f108 0801 	add.w	r8, r8, #1
 800a23e:	9b02      	ldr	r3, [sp, #8]
 800a240:	4598      	cmp	r8, r3
 800a242:	dc01      	bgt.n	800a248 <__kernel_rem_pio2+0x4c8>
 800a244:	45b8      	cmp	r8, r7
 800a246:	ddea      	ble.n	800a21e <__kernel_rem_pio2+0x49e>
 800a248:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a24c:	ab4a      	add	r3, sp, #296	; 0x128
 800a24e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a252:	ed87 7b00 	vstr	d7, [r7]
 800a256:	3e01      	subs	r6, #1
 800a258:	e6f8      	b.n	800a04c <__kernel_rem_pio2+0x2cc>
 800a25a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	dc0b      	bgt.n	800a278 <__kernel_rem_pio2+0x4f8>
 800a260:	2b00      	cmp	r3, #0
 800a262:	dc35      	bgt.n	800a2d0 <__kernel_rem_pio2+0x550>
 800a264:	d059      	beq.n	800a31a <__kernel_rem_pio2+0x59a>
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	f003 0007 	and.w	r0, r3, #7
 800a26c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a270:	ecbd 8b02 	vpop	{d8}
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a278:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d1f3      	bne.n	800a266 <__kernel_rem_pio2+0x4e6>
 800a27e:	ab4a      	add	r3, sp, #296	; 0x128
 800a280:	4423      	add	r3, r4
 800a282:	9306      	str	r3, [sp, #24]
 800a284:	461c      	mov	r4, r3
 800a286:	469a      	mov	sl, r3
 800a288:	9502      	str	r5, [sp, #8]
 800a28a:	9b02      	ldr	r3, [sp, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a292:	dc6b      	bgt.n	800a36c <__kernel_rem_pio2+0x5ec>
 800a294:	46aa      	mov	sl, r5
 800a296:	f1ba 0f01 	cmp.w	sl, #1
 800a29a:	f1a4 0408 	sub.w	r4, r4, #8
 800a29e:	f300 8085 	bgt.w	800a3ac <__kernel_rem_pio2+0x62c>
 800a2a2:	9c06      	ldr	r4, [sp, #24]
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	3408      	adds	r4, #8
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2d01      	cmp	r5, #1
 800a2ac:	f300 809d 	bgt.w	800a3ea <__kernel_rem_pio2+0x66a>
 800a2b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a2b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a2b8:	f1bb 0f00 	cmp.w	fp, #0
 800a2bc:	f040 809b 	bne.w	800a3f6 <__kernel_rem_pio2+0x676>
 800a2c0:	9b01      	ldr	r3, [sp, #4]
 800a2c2:	e9c3 5600 	strd	r5, r6, [r3]
 800a2c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a2ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a2ce:	e7ca      	b.n	800a266 <__kernel_rem_pio2+0x4e6>
 800a2d0:	3408      	adds	r4, #8
 800a2d2:	ab4a      	add	r3, sp, #296	; 0x128
 800a2d4:	441c      	add	r4, r3
 800a2d6:	462e      	mov	r6, r5
 800a2d8:	2000      	movs	r0, #0
 800a2da:	2100      	movs	r1, #0
 800a2dc:	2e00      	cmp	r6, #0
 800a2de:	da36      	bge.n	800a34e <__kernel_rem_pio2+0x5ce>
 800a2e0:	f1bb 0f00 	cmp.w	fp, #0
 800a2e4:	d039      	beq.n	800a35a <__kernel_rem_pio2+0x5da>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2ec:	9c01      	ldr	r4, [sp, #4]
 800a2ee:	e9c4 2300 	strd	r2, r3, [r4]
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a2fa:	f7f6 f8fb 	bl	80004f4 <__aeabi_dsub>
 800a2fe:	ae4c      	add	r6, sp, #304	; 0x130
 800a300:	2401      	movs	r4, #1
 800a302:	42a5      	cmp	r5, r4
 800a304:	da2c      	bge.n	800a360 <__kernel_rem_pio2+0x5e0>
 800a306:	f1bb 0f00 	cmp.w	fp, #0
 800a30a:	d002      	beq.n	800a312 <__kernel_rem_pio2+0x592>
 800a30c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a310:	4619      	mov	r1, r3
 800a312:	9b01      	ldr	r3, [sp, #4]
 800a314:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a318:	e7a5      	b.n	800a266 <__kernel_rem_pio2+0x4e6>
 800a31a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a31e:	eb0d 0403 	add.w	r4, sp, r3
 800a322:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a326:	2000      	movs	r0, #0
 800a328:	2100      	movs	r1, #0
 800a32a:	2d00      	cmp	r5, #0
 800a32c:	da09      	bge.n	800a342 <__kernel_rem_pio2+0x5c2>
 800a32e:	f1bb 0f00 	cmp.w	fp, #0
 800a332:	d002      	beq.n	800a33a <__kernel_rem_pio2+0x5ba>
 800a334:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a338:	4619      	mov	r1, r3
 800a33a:	9b01      	ldr	r3, [sp, #4]
 800a33c:	e9c3 0100 	strd	r0, r1, [r3]
 800a340:	e791      	b.n	800a266 <__kernel_rem_pio2+0x4e6>
 800a342:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a346:	f7f6 f8d7 	bl	80004f8 <__adddf3>
 800a34a:	3d01      	subs	r5, #1
 800a34c:	e7ed      	b.n	800a32a <__kernel_rem_pio2+0x5aa>
 800a34e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a352:	f7f6 f8d1 	bl	80004f8 <__adddf3>
 800a356:	3e01      	subs	r6, #1
 800a358:	e7c0      	b.n	800a2dc <__kernel_rem_pio2+0x55c>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	e7c5      	b.n	800a2ec <__kernel_rem_pio2+0x56c>
 800a360:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a364:	f7f6 f8c8 	bl	80004f8 <__adddf3>
 800a368:	3401      	adds	r4, #1
 800a36a:	e7ca      	b.n	800a302 <__kernel_rem_pio2+0x582>
 800a36c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a370:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a374:	9b02      	ldr	r3, [sp, #8]
 800a376:	3b01      	subs	r3, #1
 800a378:	9302      	str	r3, [sp, #8]
 800a37a:	4632      	mov	r2, r6
 800a37c:	463b      	mov	r3, r7
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	f7f6 f8b9 	bl	80004f8 <__adddf3>
 800a386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 f8af 	bl	80004f4 <__aeabi_dsub>
 800a396:	4632      	mov	r2, r6
 800a398:	463b      	mov	r3, r7
 800a39a:	f7f6 f8ad 	bl	80004f8 <__adddf3>
 800a39e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a3a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3a6:	ed8a 7b00 	vstr	d7, [sl]
 800a3aa:	e76e      	b.n	800a28a <__kernel_rem_pio2+0x50a>
 800a3ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a3b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4632      	mov	r2, r6
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f6 f89c 	bl	80004f8 <__adddf3>
 800a3c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f6 f892 	bl	80004f4 <__aeabi_dsub>
 800a3d0:	4632      	mov	r2, r6
 800a3d2:	463b      	mov	r3, r7
 800a3d4:	f7f6 f890 	bl	80004f8 <__adddf3>
 800a3d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a3e0:	ed84 7b00 	vstr	d7, [r4]
 800a3e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3e8:	e755      	b.n	800a296 <__kernel_rem_pio2+0x516>
 800a3ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a3ee:	f7f6 f883 	bl	80004f8 <__adddf3>
 800a3f2:	3d01      	subs	r5, #1
 800a3f4:	e759      	b.n	800a2aa <__kernel_rem_pio2+0x52a>
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	9a01      	ldr	r2, [sp, #4]
 800a3fa:	601d      	str	r5, [r3, #0]
 800a3fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a400:	605c      	str	r4, [r3, #4]
 800a402:	609f      	str	r7, [r3, #8]
 800a404:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a408:	60d3      	str	r3, [r2, #12]
 800a40a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a40e:	6110      	str	r0, [r2, #16]
 800a410:	6153      	str	r3, [r2, #20]
 800a412:	e728      	b.n	800a266 <__kernel_rem_pio2+0x4e6>
 800a414:	41700000 	.word	0x41700000
 800a418:	3e700000 	.word	0x3e700000
 800a41c:	00000000 	.word	0x00000000

0800a420 <__kernel_sin>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	ed2d 8b04 	vpush	{d8-d9}
 800a428:	eeb0 8a41 	vmov.f32	s16, s2
 800a42c:	eef0 8a61 	vmov.f32	s17, s3
 800a430:	ec55 4b10 	vmov	r4, r5, d0
 800a434:	b083      	sub	sp, #12
 800a436:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a43a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a43e:	9001      	str	r0, [sp, #4]
 800a440:	da06      	bge.n	800a450 <__kernel_sin+0x30>
 800a442:	ee10 0a10 	vmov	r0, s0
 800a446:	4629      	mov	r1, r5
 800a448:	f7f6 fa94 	bl	8000974 <__aeabi_d2iz>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d051      	beq.n	800a4f4 <__kernel_sin+0xd4>
 800a450:	4622      	mov	r2, r4
 800a452:	462b      	mov	r3, r5
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f5 ff1e 	bl	8000298 <__aeabi_dmul>
 800a45c:	4682      	mov	sl, r0
 800a45e:	468b      	mov	fp, r1
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 ff16 	bl	8000298 <__aeabi_dmul>
 800a46c:	a341      	add	r3, pc, #260	; (adr r3, 800a574 <__kernel_sin+0x154>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	4680      	mov	r8, r0
 800a474:	4689      	mov	r9, r1
 800a476:	4650      	mov	r0, sl
 800a478:	4659      	mov	r1, fp
 800a47a:	f7f5 ff0d 	bl	8000298 <__aeabi_dmul>
 800a47e:	a33f      	add	r3, pc, #252	; (adr r3, 800a57c <__kernel_sin+0x15c>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f6 f836 	bl	80004f4 <__aeabi_dsub>
 800a488:	4652      	mov	r2, sl
 800a48a:	465b      	mov	r3, fp
 800a48c:	f7f5 ff04 	bl	8000298 <__aeabi_dmul>
 800a490:	a33c      	add	r3, pc, #240	; (adr r3, 800a584 <__kernel_sin+0x164>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f6 f82f 	bl	80004f8 <__adddf3>
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	f7f5 fefb 	bl	8000298 <__aeabi_dmul>
 800a4a2:	a33a      	add	r3, pc, #232	; (adr r3, 800a58c <__kernel_sin+0x16c>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f6 f824 	bl	80004f4 <__aeabi_dsub>
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	465b      	mov	r3, fp
 800a4b0:	f7f5 fef2 	bl	8000298 <__aeabi_dmul>
 800a4b4:	a337      	add	r3, pc, #220	; (adr r3, 800a594 <__kernel_sin+0x174>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f6 f81d 	bl	80004f8 <__adddf3>
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	460f      	mov	r7, r1
 800a4c4:	b9eb      	cbnz	r3, 800a502 <__kernel_sin+0xe2>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	4659      	mov	r1, fp
 800a4ce:	f7f5 fee3 	bl	8000298 <__aeabi_dmul>
 800a4d2:	a325      	add	r3, pc, #148	; (adr r3, 800a568 <__kernel_sin+0x148>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f6 f80c 	bl	80004f4 <__aeabi_dsub>
 800a4dc:	4642      	mov	r2, r8
 800a4de:	464b      	mov	r3, r9
 800a4e0:	f7f5 feda 	bl	8000298 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f6 f804 	bl	80004f8 <__adddf3>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	ec45 4b10 	vmov	d0, r4, r5
 800a4f8:	b003      	add	sp, #12
 800a4fa:	ecbd 8b04 	vpop	{d8-d9}
 800a4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a502:	4b1b      	ldr	r3, [pc, #108]	; (800a570 <__kernel_sin+0x150>)
 800a504:	ec51 0b18 	vmov	r0, r1, d8
 800a508:	2200      	movs	r2, #0
 800a50a:	f7f5 fec5 	bl	8000298 <__aeabi_dmul>
 800a50e:	4632      	mov	r2, r6
 800a510:	ec41 0b19 	vmov	d9, r0, r1
 800a514:	463b      	mov	r3, r7
 800a516:	4640      	mov	r0, r8
 800a518:	4649      	mov	r1, r9
 800a51a:	f7f5 febd 	bl	8000298 <__aeabi_dmul>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	ec51 0b19 	vmov	r0, r1, d9
 800a526:	f7f5 ffe5 	bl	80004f4 <__aeabi_dsub>
 800a52a:	4652      	mov	r2, sl
 800a52c:	465b      	mov	r3, fp
 800a52e:	f7f5 feb3 	bl	8000298 <__aeabi_dmul>
 800a532:	ec53 2b18 	vmov	r2, r3, d8
 800a536:	f7f5 ffdd 	bl	80004f4 <__aeabi_dsub>
 800a53a:	a30b      	add	r3, pc, #44	; (adr r3, 800a568 <__kernel_sin+0x148>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	4606      	mov	r6, r0
 800a542:	460f      	mov	r7, r1
 800a544:	4640      	mov	r0, r8
 800a546:	4649      	mov	r1, r9
 800a548:	f7f5 fea6 	bl	8000298 <__aeabi_dmul>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f5 ffd0 	bl	80004f8 <__adddf3>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4620      	mov	r0, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 ffc8 	bl	80004f4 <__aeabi_dsub>
 800a564:	e7c4      	b.n	800a4f0 <__kernel_sin+0xd0>
 800a566:	bf00      	nop
 800a568:	55555549 	.word	0x55555549
 800a56c:	3fc55555 	.word	0x3fc55555
 800a570:	3fe00000 	.word	0x3fe00000
 800a574:	5acfd57c 	.word	0x5acfd57c
 800a578:	3de5d93a 	.word	0x3de5d93a
 800a57c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a580:	3e5ae5e6 	.word	0x3e5ae5e6
 800a584:	57b1fe7d 	.word	0x57b1fe7d
 800a588:	3ec71de3 	.word	0x3ec71de3
 800a58c:	19c161d5 	.word	0x19c161d5
 800a590:	3f2a01a0 	.word	0x3f2a01a0
 800a594:	1110f8a6 	.word	0x1110f8a6
 800a598:	3f811111 	.word	0x3f811111

0800a59c <fabs>:
 800a59c:	ec51 0b10 	vmov	r0, r1, d0
 800a5a0:	ee10 2a10 	vmov	r2, s0
 800a5a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5a8:	ec43 2b10 	vmov	d0, r2, r3
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <floor>:
 800a5b0:	ec51 0b10 	vmov	r0, r1, d0
 800a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a5bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a5c0:	2e13      	cmp	r6, #19
 800a5c2:	ee10 5a10 	vmov	r5, s0
 800a5c6:	ee10 8a10 	vmov	r8, s0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	dc32      	bgt.n	800a634 <floor+0x84>
 800a5ce:	2e00      	cmp	r6, #0
 800a5d0:	da14      	bge.n	800a5fc <floor+0x4c>
 800a5d2:	a333      	add	r3, pc, #204	; (adr r3, 800a6a0 <floor+0xf0>)
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f7f5 ff8e 	bl	80004f8 <__adddf3>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f7f6 f9be 	bl	8000960 <__aeabi_dcmpgt>
 800a5e4:	b138      	cbz	r0, 800a5f6 <floor+0x46>
 800a5e6:	2c00      	cmp	r4, #0
 800a5e8:	da57      	bge.n	800a69a <floor+0xea>
 800a5ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a5ee:	431d      	orrs	r5, r3
 800a5f0:	d001      	beq.n	800a5f6 <floor+0x46>
 800a5f2:	4c2d      	ldr	r4, [pc, #180]	; (800a6a8 <floor+0xf8>)
 800a5f4:	2500      	movs	r5, #0
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e025      	b.n	800a648 <floor+0x98>
 800a5fc:	4f2b      	ldr	r7, [pc, #172]	; (800a6ac <floor+0xfc>)
 800a5fe:	4137      	asrs	r7, r6
 800a600:	ea01 0307 	and.w	r3, r1, r7
 800a604:	4303      	orrs	r3, r0
 800a606:	d01f      	beq.n	800a648 <floor+0x98>
 800a608:	a325      	add	r3, pc, #148	; (adr r3, 800a6a0 <floor+0xf0>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	f7f5 ff73 	bl	80004f8 <__adddf3>
 800a612:	2200      	movs	r2, #0
 800a614:	2300      	movs	r3, #0
 800a616:	f7f6 f9a3 	bl	8000960 <__aeabi_dcmpgt>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d0eb      	beq.n	800a5f6 <floor+0x46>
 800a61e:	2c00      	cmp	r4, #0
 800a620:	bfbe      	ittt	lt
 800a622:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a626:	fa43 f606 	asrlt.w	r6, r3, r6
 800a62a:	19a4      	addlt	r4, r4, r6
 800a62c:	ea24 0407 	bic.w	r4, r4, r7
 800a630:	2500      	movs	r5, #0
 800a632:	e7e0      	b.n	800a5f6 <floor+0x46>
 800a634:	2e33      	cmp	r6, #51	; 0x33
 800a636:	dd0b      	ble.n	800a650 <floor+0xa0>
 800a638:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a63c:	d104      	bne.n	800a648 <floor+0x98>
 800a63e:	ee10 2a10 	vmov	r2, s0
 800a642:	460b      	mov	r3, r1
 800a644:	f7f5 ff58 	bl	80004f8 <__adddf3>
 800a648:	ec41 0b10 	vmov	d0, r0, r1
 800a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a650:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a654:	f04f 33ff 	mov.w	r3, #4294967295
 800a658:	fa23 f707 	lsr.w	r7, r3, r7
 800a65c:	4207      	tst	r7, r0
 800a65e:	d0f3      	beq.n	800a648 <floor+0x98>
 800a660:	a30f      	add	r3, pc, #60	; (adr r3, 800a6a0 <floor+0xf0>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f5 ff47 	bl	80004f8 <__adddf3>
 800a66a:	2200      	movs	r2, #0
 800a66c:	2300      	movs	r3, #0
 800a66e:	f7f6 f977 	bl	8000960 <__aeabi_dcmpgt>
 800a672:	2800      	cmp	r0, #0
 800a674:	d0bf      	beq.n	800a5f6 <floor+0x46>
 800a676:	2c00      	cmp	r4, #0
 800a678:	da02      	bge.n	800a680 <floor+0xd0>
 800a67a:	2e14      	cmp	r6, #20
 800a67c:	d103      	bne.n	800a686 <floor+0xd6>
 800a67e:	3401      	adds	r4, #1
 800a680:	ea25 0507 	bic.w	r5, r5, r7
 800a684:	e7b7      	b.n	800a5f6 <floor+0x46>
 800a686:	2301      	movs	r3, #1
 800a688:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a68c:	fa03 f606 	lsl.w	r6, r3, r6
 800a690:	4435      	add	r5, r6
 800a692:	4545      	cmp	r5, r8
 800a694:	bf38      	it	cc
 800a696:	18e4      	addcc	r4, r4, r3
 800a698:	e7f2      	b.n	800a680 <floor+0xd0>
 800a69a:	2500      	movs	r5, #0
 800a69c:	462c      	mov	r4, r5
 800a69e:	e7aa      	b.n	800a5f6 <floor+0x46>
 800a6a0:	8800759c 	.word	0x8800759c
 800a6a4:	7e37e43c 	.word	0x7e37e43c
 800a6a8:	bff00000 	.word	0xbff00000
 800a6ac:	000fffff 	.word	0x000fffff

0800a6b0 <scalbn>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	ec55 4b10 	vmov	r4, r5, d0
 800a6b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	462b      	mov	r3, r5
 800a6be:	b99a      	cbnz	r2, 800a6e8 <scalbn+0x38>
 800a6c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6c4:	4323      	orrs	r3, r4
 800a6c6:	d036      	beq.n	800a736 <scalbn+0x86>
 800a6c8:	4b39      	ldr	r3, [pc, #228]	; (800a7b0 <scalbn+0x100>)
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	ee10 0a10 	vmov	r0, s0
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f7f5 fde1 	bl	8000298 <__aeabi_dmul>
 800a6d6:	4b37      	ldr	r3, [pc, #220]	; (800a7b4 <scalbn+0x104>)
 800a6d8:	429e      	cmp	r6, r3
 800a6da:	4604      	mov	r4, r0
 800a6dc:	460d      	mov	r5, r1
 800a6de:	da10      	bge.n	800a702 <scalbn+0x52>
 800a6e0:	a32b      	add	r3, pc, #172	; (adr r3, 800a790 <scalbn+0xe0>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	e03a      	b.n	800a75e <scalbn+0xae>
 800a6e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a6ec:	428a      	cmp	r2, r1
 800a6ee:	d10c      	bne.n	800a70a <scalbn+0x5a>
 800a6f0:	ee10 2a10 	vmov	r2, s0
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f7f5 fefe 	bl	80004f8 <__adddf3>
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	460d      	mov	r5, r1
 800a700:	e019      	b.n	800a736 <scalbn+0x86>
 800a702:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a706:	460b      	mov	r3, r1
 800a708:	3a36      	subs	r2, #54	; 0x36
 800a70a:	4432      	add	r2, r6
 800a70c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a710:	428a      	cmp	r2, r1
 800a712:	dd08      	ble.n	800a726 <scalbn+0x76>
 800a714:	2d00      	cmp	r5, #0
 800a716:	a120      	add	r1, pc, #128	; (adr r1, 800a798 <scalbn+0xe8>)
 800a718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a71c:	da1c      	bge.n	800a758 <scalbn+0xa8>
 800a71e:	a120      	add	r1, pc, #128	; (adr r1, 800a7a0 <scalbn+0xf0>)
 800a720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a724:	e018      	b.n	800a758 <scalbn+0xa8>
 800a726:	2a00      	cmp	r2, #0
 800a728:	dd08      	ble.n	800a73c <scalbn+0x8c>
 800a72a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a72e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a732:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a736:	ec45 4b10 	vmov	d0, r4, r5
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a740:	da19      	bge.n	800a776 <scalbn+0xc6>
 800a742:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a746:	429e      	cmp	r6, r3
 800a748:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a74c:	dd0a      	ble.n	800a764 <scalbn+0xb4>
 800a74e:	a112      	add	r1, pc, #72	; (adr r1, 800a798 <scalbn+0xe8>)
 800a750:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e2      	bne.n	800a71e <scalbn+0x6e>
 800a758:	a30f      	add	r3, pc, #60	; (adr r3, 800a798 <scalbn+0xe8>)
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	f7f5 fd9b 	bl	8000298 <__aeabi_dmul>
 800a762:	e7cb      	b.n	800a6fc <scalbn+0x4c>
 800a764:	a10a      	add	r1, pc, #40	; (adr r1, 800a790 <scalbn+0xe0>)
 800a766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0b8      	beq.n	800a6e0 <scalbn+0x30>
 800a76e:	a10e      	add	r1, pc, #56	; (adr r1, 800a7a8 <scalbn+0xf8>)
 800a770:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a774:	e7b4      	b.n	800a6e0 <scalbn+0x30>
 800a776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a77a:	3236      	adds	r2, #54	; 0x36
 800a77c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a780:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a784:	4620      	mov	r0, r4
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <scalbn+0x108>)
 800a788:	2200      	movs	r2, #0
 800a78a:	e7e8      	b.n	800a75e <scalbn+0xae>
 800a78c:	f3af 8000 	nop.w
 800a790:	c2f8f359 	.word	0xc2f8f359
 800a794:	01a56e1f 	.word	0x01a56e1f
 800a798:	8800759c 	.word	0x8800759c
 800a79c:	7e37e43c 	.word	0x7e37e43c
 800a7a0:	8800759c 	.word	0x8800759c
 800a7a4:	fe37e43c 	.word	0xfe37e43c
 800a7a8:	c2f8f359 	.word	0xc2f8f359
 800a7ac:	81a56e1f 	.word	0x81a56e1f
 800a7b0:	43500000 	.word	0x43500000
 800a7b4:	ffff3cb0 	.word	0xffff3cb0
 800a7b8:	3c900000 	.word	0x3c900000

0800a7bc <__errno>:
 800a7bc:	4b01      	ldr	r3, [pc, #4]	; (800a7c4 <__errno+0x8>)
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20000078 	.word	0x20000078

0800a7c8 <_init>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr

0800a7d4 <_fini>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	bf00      	nop
 800a7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7da:	bc08      	pop	{r3}
 800a7dc:	469e      	mov	lr, r3
 800a7de:	4770      	bx	lr
